set.seed(3)
D <- maximin(n = 3, p=2, Xorig = D_initial)$Xf
plot(D, pch = 16)
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial)
plot(D$Xf, pch = 16)
# Function to obtain the minimum distance between
# a point and a design
minimum_distance <- function(x)
{
sq_distances <- (colSums((t(D$Xf)- x)^2))
sq_distances[sq_distances == 0] <- Inf
return(sqrt(min(sq_distances)))
}
min(apply(D$Xf, 1, minimum_distance))
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
plot(D, pch = 16)
# Chunk 1
library(maximin)
# Chunk 2
D_initial <- matrix(c(0,0),1,2)
# Chunk 3
set.seed(3)
D <- maximin(n = 3, p=2, Xorig = D_initial)$Xf
plot(D, pch = 16)
plot(D, pch = 16, asp = 1)
par(pty="s")
plot(D, pch = 16, asp = 1)
par(pty="s")
plot(D, pch = 16)
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial)
plot(D$Xf, pch = 16)
# Chunk 1
library(maximin)
# Chunk 2
D_initial <- matrix(c(0,0),1,2)
# Chunk 3
set.seed(3)
D <- maximin(n = 3, p=2, Xorig = D_initial)$Xf
# Chunk 4
par(pty="s") # Making a square plot (maintaining aspect ratio)
plot(D, pch = 16)
# Chunk 5
par(pty="s")
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial)
plot(D$Xf, pch = 16)
# Chunk 6
# Function to obtain the minimum distance between
# a point and a design
minimum_distance <- function(x)
{
sq_distances <- (colSums((t(D$Xf)- x)^2))
sq_distances[sq_distances == 0] <- Inf
return(sqrt(min(sq_distances)))
}
min(apply(D$Xf, 1, minimum_distance))
# Chunk 7
par(pty="s")
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
# Chunk 8
par(pty="s")
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
par(pty="s")
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 200)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial)
par(pty="s")
plot(D$Xf, pch = 16)
library(lhs)
set.seed(1)
D <- maximinLHS(4, 2)
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
# Chunk 1
library(maximin)
# Chunk 2
D_initial <- matrix(c(0,0),1,2)
# Chunk 3
set.seed(3)
D <- maximin(n = 3, p=2, Xorig = D_initial)$Xf
# Chunk 4
par(pty="s") # Making a square plot (maintaining aspect ratio)
plot(D, pch = 16)
# Chunk 5
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial)
par(pty="s")
plot(D$Xf, pch = 16)
# Function to obtain the minimum distance between
# a point and a design
minimum_distance <- function(x, D)
{
sq_distances <- (colSums((t(D)- x)^2))
sq_distances[sq_distances == 0] <- Inf
return(sqrt(min(sq_distances)))
}
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
par(pty="s")
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
par(pty="s")
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 200)
par(pty="s")
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 400)
par(pty="s")
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
set.seed(5)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 400)
par(pty="s")
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
min_dist <- rep(0, 20)
for(s in 1:20)
{
set.seed(s)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
min_dist[s] <- min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
}
set.seed(12)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
par(pty="s")
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D$Xf))
set.seed(1)
D <- maximinLHS(4, 2)
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
min(apply(D$Xf, 1, minimum_distance, D = D))
set.seed(1)
D <- maximinLHS(4, 2)
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
min(apply(D, 1, minimum_distance, D = D))
?maximinLHS
D <- maximinLHS(n = 4, k=2)
D
min_dist <- rep(0, 20)
for(s in 1:20)
{
set.seed(s)
D <- maximinLHS(n = 4, k=2)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
min_dist
which.max(min_dist)
set.seed(6)
D <- maximinLHS(4, 2)
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
min(apply(D, 1, minimum_distance, D = D))
set.seed(3)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
D <- maximinLHS(20, 10)
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
set.seed(3)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
par(pty="s")
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
D <- maximinLHS(20, 10)
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
set.seed(6)
D <- maximinLHS(4, 2)
par(pty="s")
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
min(apply(D, 1, minimum_distance, D = D))
set.seed(6)
D <- maximinLHS(4, 2)
par(pty="s")
plot(D, pch = 16)
min(apply(D, 1, minimum_distance, D = D))
par(mfrow=c(1,1))
set.seed(6)
D <- maximinLHS(4, 2)
par(pty="s")
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
min(apply(D, 1, minimum_distance, D = D))
par(pty="l")
par(pty="d")
par(pty="a")
par(pty="r")
par(pty="s")
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
D
set.seed(3)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
par(pty="s")
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
D <- maximinLHS(20, 10)
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
min_dist <- rep(0, 20)
for(s in 1:20)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:100)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:100)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10, maxIter = 100)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:100)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10, maxIter = 1000)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:200)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10, maxIter = 1000)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:1000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10, maxIter = 1000)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:1000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10, maxIter = 2000)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:1000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:2000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:5000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:10000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:20000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
min_dist <- rep(0, 20)
for(s in 1:10000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=10)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
max(min_dist)
which.max(min_dist)
which.max(min_dist)
set.seed(2541)
D <- maximinLHS(20, 10)
par(mfrow = c(1,2))
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
set.seed(6)
D <- maximinLHS(4, 2)
par(pty="s")
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
min(apply(D, 1, minimum_distance, D = D))
min_dist <- rep(0, 20)
for(s in 1:10000)
{
set.seed(s)
D <- maximinLHS(n = 20, k=2)
min_dist[s] <- min(apply(D, 1, minimum_distance, D = D))
}
which.max(min_dist)
which.max(min_dist)
set.seed(7312)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
par(pty="s")
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
set.seed(7312)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
par(pty="s")
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
set.seed(2541)
D <- maximinLHS(20, 10)
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
set.seed(7312)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
par(pty="s")
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
set.seed(2541)
D <- maximinLHS(20, 10)
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
MaxProLHD(20, 10)
library(MaxPro)
D1 <- MaxProLHD(20, 10)
D1
?MaxProLHD
set.seed(3)
D1 <- MaxProLHD(20, 10)$Design
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
MaxProLHD
maxpro_criterion <- rep(0, 20)
for(s in 1:20)
{
set.seed(s)
D <- MaxProLHD(n = 20, p = 10)
maxpro_criterion[s] <- D$measure
}
which.min(min_maxpro_criteriondist)
which.min(maxpro_criterion)
maxpro_criterion
min(maxpro_criterion)
max(maxpro_criterion)
maxpro_criterion <- rep(0, 100)
for(s in 1:100)
{
set.seed(s)
D <- MaxProLHD(n = 20, p = 10)
maxpro_criterion[s] <- D$measure
}
which.min(maxpro_criterion)
which.min(maxpro_criterion)
min(maxpro_criterion)
set.seed(26)
D1 <- MaxProLHD(20, 10)$Design
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
D2 <- MaxPro(D1)$Design
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
set.seed(7312)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
par(pty="s")
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
set.seed(2541)
D <- maximinLHS(20, 10)
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
par(mfrow = c(1,2))
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
par(pty="s")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
par(mfrow = c(1,2))
par(pty="s")
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
par(pty="s")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
library(randtoolbox)
?sobol
sobol_sequence <- sobol(20, 2)
plot(sobol_sequence)
D_sobol <- sobol(20, 2)
plot(D_sobol)
par(mfrow=c(1,1))
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol <- sobol(20, 2)
plot(D_sobol)
D_sobol
D_sobol <- sobol(100, 2)
plot(D_sobol)
D_sobol <- sobol(100, 10)
plot(D_sobol[,1:2])
D_sobol <- sobol(100, 10)
plot(D_sobol[,1:2])
D_sobol <- sobol(100, 10)
plot(D_sobol[,1:2])
D_sobol
D_sobol <- sobol(100, 2)
plot(D_sobol)
D_sobol <- sobol(100, 10)
plot(D_sobol[,1:2])
plot(D_sobol[,2:3])
D_sobol <- sobol(100, 10)
plot(D_sobol[,2:3])
plot(D_sobol[,2])
D_sobol <- sobol(100, 2)
plot(D_sobol)
D_sobol <- sobol(100, 2)
plot(D_sobol)
D_halton <- halton(100, 10)
plot(D_halton[,2])
D_halton <- halton(100, 10)
plot(D_halton[,1:2])
D_halton <- halton(100, 2)
plot(D_halton[,1:2])
D_sobol <- sobol(100, 2)
plot(D_sobol)
D_sobol <- sobol(100, 2)
plot(D_sobol)
D_halton <- halton(100, 2)
plot(D_halton[,1:2])
D_halton <- halton(100, 2)
plot(D_halton)
renv::snapshot()
