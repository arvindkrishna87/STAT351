data <- read.table('C:/Users/akl0407/Desktop/Courses/2023/Fall 2023/STAT350 Fall 2023/Datasets/CH01PR19.txt')
View(data)
names(Data) <- c("GPA", "ACT")
Data <- read.table('C:/Users/akl0407/Desktop/Courses/2023/Fall 2023/STAT350 Fall 2023/Datasets/CH01PR19.txt')
names(Data) <- c("GPA", "ACT")
plot(Data$ACT, Data$GPA)
getwd()
Data <- read.table("CH01PR19.txt")
Data <- read.table('C:/Users/akl0407/Desktop/Courses/2023/Fall 2023/STAT350 Fall 2023/Datasets/CH01PR19.txt')
Data <- read.table('C:/Users/akl0407/Desktop/Courses/2023/Fall 2023/STAT350 Fall 2023/Datasets/CH01PR19.txt', header = TRUE)
View(Data)
Data <- read.table('C:/Users/akl0407/Desktop/Courses/2023/Fall 2023/STAT350 Fall 2023/Datasets/CH01PR19.txt')
X
plot(Data$ACT, Data$GPA)
Data
head(Data)
names(Data) <- c("GPA", "ACT")
head(Data)
plot(Data$ACT, Data$GPA)
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
fit <- lm(Data$GPA ~ Data$ACT)
fit <- lm(GPA~ACT, data=Data)   # another option
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
abline(fit)
fit
fit$fitted.values
fit$residuals
n <- dim(Data)[1]
sum(fit$residuals^2)/(n-2)
fit <- lm(Data$GPA ~ Data$ACT)
fit <- lm(GPA~ACT, data=Data)   # another option
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
abline(fit, col = "red")
abline(fit, col = "red", lwd = 2)
plot(Data$ACT, Data$GPA)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()
usethis
install.packages("usethis")
usethis::use_github_action()
plot(Data$ACT, Data$GPA)
plot(Data$ACT, Data$GPA);
print(plot(Data$ACT, Data$GPA))
plot(Data$ACT, Data$GPA)
getOption("repos")
.libPaths()
renv::update()
renv::snapshot()
getwd()
Data <- read.table("./Datasets/CH01PR19.txt")
# Chunk 1
Data <- read.table("./Datasets/CH01PR19.txt")
# Chunk 3
head(Data)
# Chunk 7
names(Data) <- c("GPA", "ACT")
# Chunk 8
head(Data)
# Chunk 13
library(ggplot2)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()
plot(Data$ACT, Data$GPA)
renv::deactivate()
# Chunk 1
Data <- read.table("./Datasets/CH01PR19.txt")
# Chunk 3
head(Data)
# Chunk 7
names(Data) <- c("GPA", "ACT")
# Chunk 8
head(Data)
# Chunk 13
plot(Data$ACT, Data$GPA)
# Chunk 15
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
# Chunk 16
fit <- lm(Data$GPA ~ Data$ACT)
fit <- lm(GPA~ACT, data=Data)   # another option
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
abline(fit, col = "red", lwd = 2) #lwd is for line-width
# Chunk 17
fit
plot(Data$ACT, Data$GPA)
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()
library(ggplot2)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
labs(
main = "E"
)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
labs(
title = "E"
)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
labs(
title = "Problem 1.19"
)
fit <- lm(Data$GPA ~ Data$ACT)
fit <- lm(GPA~ACT, data=Data)   # another option
plot(Data$ACT, Data$GPA, main="Problem 1.19", xlab="ACT Test Score", ylab="Freshman GPA", pch=19)
abline(fit, col = "red", lwd = 2) #lwd is for line-width
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
labs(
title = "Problem 1.19"
)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
labs(
title = "Problem 1.19"
)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
geom_line()
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
geom_line(method = "lm")
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
geom_smooth(method = "lm")
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
geom_smooth(method = "lm")
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
ggplot(Data, aes(x = ACT, y = GPA))+
geom_point()+
geom_smooth(method = "lm")
data = c(2, 0.4, 0.7, 2.0, -0.4, 2.2, -1.3, 1.2, 1.1, 2.3)
data
mean(data)
sd(data)
1.02/1.19610
1.02/1.196105
pt(1.02/1.196105, df = 9)
1.02/1.196105/3
1.02/(1.196105/3)
1.02/(1.196105/sqrt(10))
t=1.02/(1.196105/sqrt(10))
pt(t, df = 9)
qt(0.95, df = 9)
1-pt(t, df = 9)
?qnorm()
pnorm(67, 64.5, 2.5)
pnorm(67, 64.5, 2.5) - pnorm(67, 62, 2.5)
pnorm(67, 64.5, 2.5) - pnorm(62, 64.5, 2.5)
qnorm(97.5)
qnorm(0.975)
qnorm(0.975, 64.5, 2.5)
qnorm(0.025, 64.5, 2.5)
60/sqrt(840)
2*60/sqrt(840)
renv::snapshot()
renv::snapshot()
install.packages(c("arrow", "boot", "bslib", "butcher", "callr", "codetools", "curl", "data.table", "datawizard", "dbplyr", "digest", "DT", "duckdb", "duckdbfs", "duckplyr", "finetune", "future", "future.apply", "ggdist", "gh", "globals", "htmltools", "httpuv", "httr2", "igraph", "infer", "insight", "knitr", "lattice", "lava", "leaflet", "lme4", "matrixStats", "munsell", "naivebayes", "naniar", "parallelly", "parsnip", "pkgbuild", "pkgdown", "prismatic", "processx", "promises", "quarto", "ragg", "RcppEigen", "remotes", "renv", "repr", "rmarkdown", "rsample", "rsconnect", "RSQLite", "rstan", "rstudioapi", "sass", "sf", "shiny", "showtext", "stacks", "StanHeaders", "styler", "sysfonts", "systemfonts", "tidycensus", "tidymodels", "tidyselect", "tinytex", "tune", "usmap", "usmapdata", "workflowsets", "xfun", "yardstick"))
renv::snapshot()
renv::status()
library(DescTools)
renv::status()
renv::snapshot()
renv::snapshot()
renv::snapshot()
# Chunk 1
a <- c(8.73, 11.31,  9.15, 13.78, 11.58, 9.14, 11.05,  9.49)
b <- c(10.77,  8.33, 11.87,  8.31,  7.28,  4.99, 12.61,  8.81)
t.test(a, b, alternative = "greater")
sd1a <- sqrt(0.5*(var(a)+var(b)))
# Chunk 2
a <- c(9.13, 10.31,  6.95, 12.77, 10.26,  8.3, 12.07, 12.24)
b <- c(7.58,  9.11,  8.02, 12.75,  8.97,  6.65, 10.34, 11.24)
t.test(a, b, alternative = "greater", paired = TRUE)
sd1b <- sqrt(var(a-b))
# Chunk 3
a <- c(10.79, 10.05, 11.17, 10.32, 12.08,  8.81, 11.66, 11.93)
b <- c(9.20, 6.53, 9.52, 8.50, 9.75, 9.18, 9.92, 9.09)
t.test(a, b, alternative = "greater")
sd1d <- sqrt(0.5*(var(a)+var(b)))
# Chunk 4
a <- c(10.99,  9.73,  9.38,  9.29,  8.26,  9.11,  9.51,  9.73)
b <- c(8.53,  7.06,  8.32, 10.79, 9.61, 11.00,  8.76,  8.88)
t.test(a, b, alternative = "greater", paired = TRUE)
sd1f <- sqrt(var(a-b))
power.t.test(n = 8, delta = 1, sd = sd1a, alternative = "one.sided", type = "two.sample")
power.t.test(n = 8, delta = 1, sd = sd1b, alternative = "one.sided",
type = "paired")
power.t.test(n = 8, delta = 1, sd = sd1d, alternative = "one.sided", type = "two.sample")
power.t.test(n = 8, delta = 1, sd = sd1f, alternative = "one.sided", type = "paired")
power.t.test(n = 8, delta = 1, sd = sd1f, alternative = "one.sided", type = "paired")
power.t.test(n = 8, delta = 1, sd = sd1d, alternative = "one.sided", type = "two.sample")
power.t.test(n = 8, delta = 1, sd = sd1d, alternative = "one.sided", type = "two.sample")
power.t.test(n = 8, delta = 1, sd = sd1f, alternative = "one.sided", type = "paired")
power.t.test(n = 8, delta = 1, sd = sd1d, alternative = "one.sided", type = "two.sample")
power.t.test(n = 8, delta = 1, sd = sd1b, alternative = "one.sided",
type = "paired")
power.t.test(n = 8, delta = 1, sd = sd1a, alternative = "one.sided", type = "two.sample")
data = data.frame(Control = c(4.23, 4.38, 4.10, 3.99, 4.25),
HC1 = c(3.85, 3.78, 3.91, 3.94, 3.86),
Propionic = c(3.75, 3.65, 3.82, 3.69, 3.73),
Butyric = c(3.66, 3.67, 3.62, 3.54, 3.71))
data
write.csv(data, "rice_seed_data.csv")
getwd()
data <- data.frame(app_time = c(7.75, 9.37, 7.33, 14.69, 12.16,  9.86,  9.97, 10.48, 10.15,  8.39, 12.02, 9.78), design = factor(c(rep("A", 3), rep("B", 3), rep("C", 3), rep("D", 3))))
data
c1 <- c(-1, 3, -1, -1)
c2 <- c(2, 0, -1, -1)
c3<- c(0, 0, 1, -1)
ct <- cbind(c1, c2, c3)
ct <- list(design = cbind(c1, c2, c3))
ct
head(data)
aov_object <- aov(app_time~design, data = data,
contrasts = ct)
data <- data.frame(app_time = c(7.75, 9.37, 7.33, 14.69, 12.16,  9.86,  9.97, 10.48, 10.15,  8.39, 12.02, 9.78), design = factor(c(rep("A", 3), rep("B", 3), rep("C", 3), rep("D", 3))))
c1 <- c(-1, 3, -1, -1)
c2 <- c(2, 0, -1, -1)
c3<- c(0, 0, 1, -1)
ct <- list(design = cbind(c1, c2, c3))
ct
aov_object <- aov(app_time~design, data = data,
contrasts = ct)
summary.aov(aov_object, split = list(design = list("B_vs_all" = 1,
"A_vs_cd" = 2,
"C_vs_D" = 3)))
aov_object <- aov(app_time~design, data = data,
contrasts = ct)
summary.aov(aov_object, split = list(design = list("B_vs_all" = 1,
"A_vs_cd" = 2,
"C_vs_D" = 3)))
?qtukey
qtukey(0.95, nmeans = 4, df = 8)
summary.aov(aov_object, split = list(design = list("B_vs_all" = 1,
"A_vs_cd" = 2,
"C_vs_D" = 3)))
?power.anova.test
var(c(0, 5, 10))
var(c(0, 9, 10))
var(c(0, 5, 10))
c1 <- c(-3, -1, 1, 3, -3, -1, 1, 3)
data <- read.csv('laser_power.csv')
data$power <- as.factor(data$power)
# Linear contrast
c1 <- c(-1, 0, 1)
# Quadratic contrast
c2 <- c(1, -2, 1)
mat.contrast <- cbind(c1, c2)
model <- aov(strength ~ power, data = data,
contrasts = list(power = mat.contrast))
summary.aov(model, split = list(power = list("linear" = 1,
"quadratic" = 2)))
summary(lm(strength~power+i(power**2)))
summary(lm(strength~power+I(power**2), data = data))
data
data['power'] = c(rep(40, 3), rep(50, 3), rep(60, 3))
summary(lm(strength~power+I(power**2), data = data))
cor(data$power, data$power**2)
data
plot(data$power, data$strength)
lines(data$power, data$strength)
plot(data$power, data$strength, type = "l")
data <- data.frame(app_time = c(7.75, 9.37, 7.33, 14.69, 12.16,  9.86,  9.97, 10.48, 10.15,  8.39, 12.02, 9.78), design = factor(c(rep("A", 3), rep("B", 3), rep("C", 3), rep("D", 3))))
c1 <- c(-1, 3, -1, -1)
c2 <- c(2, 0, -1, -1)
c3<- c(0, 0, 1, -1)
ct <- list(design = cbind(c1, c2, c3))
ct
aov_object <- aov(app_time~design, data = data,
contrasts = ct)
summary.aov(aov_object, split = list(design = list("B_vs_all" = 1,
"A_vs_cd" = 2,
"C_vs_D" = 3)))
data
library(dplyr)
data %>%
group_by(design) %>%
summarise(mean_app_time = mean(app_time))
3*12.2 - 8.15 - 10.2 - 10.1
data
qt(1-0.05/6, df = 8)
aov_object <- aov(app_time~design, data = data,
contrasts = ct)
summary.aov(aov_object, split = list(design = list("B_vs_all" = 1,
"A_vs_cd" = 2,
"C_vs_D" = 3)))
(qt(1-0.05/6, df = 8))*sqrt((2.605/3)*12)
add_subtract
3*12.2 - 8.15 - 10.2 - 10.1
mean_value_h1 = 3*12.2 - 8.15 - 10.2 - 10.1
add_subtract <- (qt(1-0.05/6, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
mean_value_h1 = 3*12.2 - 8.15 - 10.2 - 10.1
add_subtract <- (qt(1-0.05/2, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
mean_value_h1 = 3*12.2 - 8.15 - 10.2 - 10.1
add_subtract <- (qt(1-0.05/6, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
var(c(0, 5, 10))
mean_value_h1 = 3*12.2 - 8.15 - 10.2 - 10.1
add_subtract <- (qt(1-0.05/6, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
add_subtract_tuk <- ((1/sqrt(2))*qtukey(0.95, nmeans = 3, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
add_subtract_tuk <- ((1/sqrt(2))*qtukey(0.95, nmeans = 3, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
mean_value_h1 = 3*12.2 - 8.15 - 10.2 - 10.1
add_subtract_bon <- (qt(1-0.05/6, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract
mean_value_h1 -add_subtract
add_subtract_tuk <- ((1/sqrt(2))*qtukey(0.95, nmeans = 3, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract_tuk
mean_value_h1 -add_subtract_tuk
var(c(0, 5, 10))
add_subtract_tuk <- ((1/sqrt(2))*qtukey(0.95, nmeans = 4, df = 8))*sqrt((2.605/3)*12)
mean_value_h1 +add_subtract_tuk
mean_value_h1 -add_subtract_tuk
add_subtract_tuk <- ((1/sqrt(2))*qtukey(0.95, nmeans = 3, df = 8))*sqrt((2.605/3)*12)
summary.aov(aov_object, split = list(design = list("B_vs_all" = 1,
"A_vs_cd" = 2,
"C_vs_D" = 3)))
aov_object2 <- aov(app_time~design, data = data)
library(DescTools)
PostHocTest(aov_object2, method = "hsd")
?PostHocTest
PostHocTest(aov_object2, method = "hsd")
?power.anova.test
var(c(0, 5, 10))
var(c(100, 105, 110))
var(c(100, 101, 110))
var(c(100, 100, 110))
