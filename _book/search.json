[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Design and analysis of experiments (R notes)",
    "section": "",
    "text": "Preface\nThese are coding notes for the course STAT351. If you don’t have a background in R, please use the course material on R from the STAT201 course here."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html",
    "href": "Introduction to Jupyter Notebooks and programming in python.html",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "",
    "text": "This chapter is a very brief introduction to python and Jupyter notebooks. We only discuss the content relevant for applying python to analyze data."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#installation",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#installation",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nAnaconda: If you are new to python, we recommend downloading the Anaconda installer and following the instructions for installation. Once installed, we’ll use the Jupyter Notebook interface to write code.\nQuarto: We’ll use Quarto to publish the **.ipynb* file containing text, python code, and the output. Download and install Quarto from here."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.2 Jupyter notebook",
    "text": "1.2 Jupyter notebook\n\n1.2.1 Introduction\nJupyter notebook is an interactive platform, where you can write code and text, and make visualizations. You can access Jupyter notebook from the Anaconda Navigator, or directly open the Jupyter Notebook application itself. It should automatically open up in your default browser. The figure below shows a Jupyter Notebook opened with Google Chrome. This page is called the landing page of the notebook.\n\n\n\n\n\nTo create a new notebook, click on the New button and select the Python 3 option. You should see a blank notebook as in the figure below.\n\n\n\n\n\n\n\n1.2.2 Writing and executing code\nCode cell: By default, a cell is of type Code, i.e., for typing code, as seen as the default choice in the dropdown menu below the Widgets tab. Try typing a line of python code (say, 2+3) in an empty code cell and execute it by pressing Shift+Enter. This should execute the code, and create an new code cell. Pressing Ctlr+Enter for Windows (or Cmd+Enter for Mac) will execute the code without creating a new cell.\nCommenting code in a code cell: Comments should be made while writing the code to explain the purpose of the code or a brief explanation of the tasks being performed by the code. A comment can be added in a code cell by preceding it with a # sign. For example, see the comment in the code below.\nWriting comments will help other users understand your code. It is also useful for the coder to keep track of the tasks being performed by their code.\n\n#This code adds 3 and 5\n3+5\n\n8\n\n\nMarkdown cell: Although a comment can be written in a code cell, a code cell cannot be used for writing headings/sub-headings, and is not appropriate for writing lengthy chunks of text. In such cases, change the cell type to Markdown from the dropdown menu below the Widgets tab. Use any markdown cheat sheet found online, for example, this one to format text in the markdown cells.\nGive a name to the notebook by clicking on the text, which says ‘Untitled’.\n\n\n1.2.3 Saving and loading notebooks\nSave the notebook by clicking on File, and selecting Save as, or clicking on the Save and Checkpoint icon (below the File tab). Your notebook will be saved as a file with an exptension ipynb. This file will contain all the code as well as the outputs, and can be loaded and edited by a Jupyter user. To load an existing Jupyter notebook, navigate to the folder of the notebook on the landing page, and then click on the file to open it.\n\n\n1.2.4 Rendering notebook as HTML\nWe’ll use Quarto to print the **.ipynb* file as HTML. Check the procedure for rendering a notebook as HTML here. You have several options to format the file.\nYou will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.3 In-class exercise",
    "text": "1.3 In-class exercise\n\nCreate a new notebook.\nSave the file as In_class_exercise_1.\nGive a heading to the file - First HTML file.\nPrint Today is day 1 of my programming course.\nCompute and print the number of seconds in a day.\n\nThe HTML file should look like the picture below."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.4 Python libraries",
    "text": "1.4 Python libraries\nThere are several built-in functions in python like print(), abs(), max(), sum() etc., which do not require importing any library. However, these functions will typically be insufficient for a analyzing data. Some of the popular libraries in data science and their primary purposes are as follows:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nA library can be imported using the import keyword. For example, a NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7"
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.5 Debugging and errors",
    "text": "1.5 Debugging and errors\nRead sections 1.3 - 1.6 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html"
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.6 Terms used in programming",
    "text": "1.6 Terms used in programming\nRead section 1.11 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html"
  },
  {
    "objectID": "data_structures.html",
    "href": "data_structures.html",
    "title": "2  Data structures",
    "section": "",
    "text": "In this chapter we’ll learn about the python data structures that are often used or appear while analyzing data."
  },
  {
    "objectID": "data_structures.html#tuple",
    "href": "data_structures.html#tuple",
    "title": "2  Data structures",
    "section": "2.1 Tuple",
    "text": "2.1 Tuple\nTuple is a sequence of python objects, with two key characeterisics: (1) the number of objects are fixed, and (2) the objects are immutable, i.e., they cannot be changed.\nTuple can be defined as a sequence of python objects separated by commas, and enclosed in rounded brackets (). For example, below is a tuple containing three integers.\n\ntuple_example = (2,7,4)\n\nWe can check the data type of a python object using the type() function. Let us check the data type of the object tuple_example.\n\ntype(tuple_example)\n\ntuple\n\n\nElements of a tuple can be extracted using their index within square brackets. For example the second element of the tuple tuple_example can be extracted as follows:\n\ntuple_example[1]\n\n7\n\n\nNote that an element of a tuple cannot be modified. For example, consider the following attempt in changing the second element of the tuple tuple_example.\n\ntuple_example[1] = 8\n\nTypeError: 'tuple' object does not support item assignment\n\n\nThe above code results in an error as tuple elements cannot be modified.\n\n2.1.1 Practice exercise 1\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Print the years in which the GDP per capita of the US increased by more than 10%.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\nSolution:\n\n#Iterating over each element of the tuple\nfor i in range(len(T)-1):\n    \n    #Computing percentage increase in GDP per capita in the (i+1)th year\n    increase = (T[i+1]-T[i])/T[i]\n    \n    #Printing the year if the increase in GDP per capita is more than 10%\n    if increase>0.1:\n        print(i+1961)\n\n1973\n1976\n1977\n1978\n1979\n1981\n1984\n\n\n\n\n2.1.2 Concatenating tuples\nTuples can be concatenated using the + operator to produce a longer tuple:\n\n(2,7,4) + (\"another\", \"tuple\") + (\"mixed\",\"datatypes\",5)\n\n(2, 7, 4, 'another', 'tuple', 'mixed', 'datatypes', 5)\n\n\nMultiplying a tuple by an integer results in repetition of the tuple:\n\n(2,7,\"hi\") * 3\n\n(2, 7, 'hi', 2, 7, 'hi', 2, 7, 'hi')\n\n\n\n\n2.1.3 Unpacking tuples\nIf tuples are assigned to an expression containing multiple variables, the tuple will be unpacked and each variable will be assigned a value as per the order in which it appears. See the example below.\n\nx,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)))\n\n\nx\n\n4.5\n\n\n\ny\n\n'this is a string'\n\n\n\nz\n\n('Nested tuple', 5)\n\n\nIf we are interested in retrieving only some values of the tuple, the expression *_ can be used to discard the other values. Let’s say we are interested in retrieving only the first and the last two values of the tuple:\n\nx,*_,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)),\"99\",99)\n\n\nx\n\n4.5\n\n\n\ny\n\n'99'\n\n\n\nz\n\n99\n\n\n\n\n2.1.4 Practice exercise 2\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on.\nWrite a function that has two parameters:\n\nYear : which indicates the year from which the GDP per capita are available in the second parameter\nTuple of GDP per capita’s: Tuple consisting of GDP per capita for consecutive years starting from the year mentioned in the first parameter.\n\nThe function should return a tuple of length two, where the first element of the tuple is the number of years when the increase in GDP per capita was more than 5%, and the second element is the most recent year in which the GDP per capita increase was more than 5%.\nCall the function to find the number of years, and the most recent year in which the GDP per capita increased by more than 5%, since the year 2000. Assign the number of years returned by the function to a variable named num_years, and assign the most recent year to a variable named recent_year. Print the values of num_years and recent_year.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\nSolution:\n\ndef gdp_inc(year,gdp_tuple):\n    count=0\n    for i in range(len(gdp_tuple)-1):\n        \n        #Computing the increase in GDP per capita for the (i+1)th year\n        increase = (gdp_tuple[i+1]-gdp_tuple[i])/gdp_tuple[i]\n        if increase>0.05:\n            print(year+i)\n            \n            #Over-writing the value of recent_year if the increase in GDP per capita for a more recent year is more than 5%\n            recent_year = year+i+1\n            \n            #Counting the number of years for which the increase in GDP per capita is more than 5%\n            count = count+1\n    return((count,recent_year))\n\nnum_years, recent_year = gdp_inc(2000,T[40:])\nprint(\"Number of years when increase in GDP per capita was more than 5% = \", num_years)\nprint(\"The most recent year in which the increase in GDP per capita was more than 5% = \", recent_year)\n\n2003\n2004\n2020\nNumber of years when increase in GDP per capita was more than 5% =  3\nThe most recent year in which the increase in GDP per capita was more than 5% =  2021\n\n\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\n\n2.1.5 Tuple methods\nA couple of useful tuple methods are count, which counts the occurences of an element in the tuple and index, which returns the position of the first occurance of an element in the tuple:\n\ntuple_example = (2,5,64,7,2,2)\n\n\ntuple_example.count(2)\n\n3\n\n\n\ntuple_example.index(2)\n\n0\n\n\nNow that we have an idea about tuple, let us try to think where it can be used."
  },
  {
    "objectID": "data_structures.html#list",
    "href": "data_structures.html#list",
    "title": "2  Data structures",
    "section": "2.2 List",
    "text": "2.2 List\nList is a sequence of python objects, with two key characeterisics that differentiates it from tuple: (1) the number of objects are variable, i.e., objects can be added or removed from a list, and (2) the objects are mutable, i.e., they can be changed.\nList can be defined as a sequence of python objects separated by commas, and enclosed in square brackets []. For example, below is a list consisting of three integers.\n\nlist_example = [2,7,4]\n\n\n2.2.1 Adding and removing elements in a list\nWe can add elements at the end of the list using the append method. For example, we append the string ‘red’ to the list list_example below.\n\nlist_example.append('red')\n\n\nlist_example\n\n[2, 7, 4, 'red']\n\n\nNote that the objects of a list or a tuple can be of different datatypes.\nAn element can be added at a specific location of the list using the insert method. For example, if we wish to insert the number 2.32 as the second element of the list list_example, we can do it as follows:\n\nlist_example.insert(1,2.32)\n\n\nlist_example\n\n[2, 2.32, 7, 4, 'red']\n\n\nFor removing an element from the list, the pop and remove methods may be used. The pop method removes an element at a particular index, while the remove method removes the element’s first occurence in the list by its value. See the examples below.\nLet us say, we need to remove the third element of the list.\n\nlist_example.pop(2)\n\n7\n\n\n\nlist_example\n\n[2, 2.32, 4, 'red']\n\n\nLet us say, we need to remove the element ‘red’.\n\nlist_example.remove('red')\n\n\nlist_example\n\n[2, 2.32, 4]\n\n\n\n#If there are multiple occurences of an element in the list, the first occurence will be removed\nlist_example2 = [2,3,2,4,4]\nlist_example2.remove(2)\nlist_example2\n\n[3, 2, 4, 4]\n\n\nFor removing multiple elements in a list, either pop or remove can be used in a for loop, or a for loop can be used with a condition. See the examples below.\nLet’s say we need to remove integers less than 100 from the following list.\n\nlist_example3 = list(range(95,106))\nlist_example3\n\n[95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105]\n\n\n\n#Method 1: For loop with remove\nlist_example3_filtered = list(list_example3) #\nfor element in list_example3:\n    if element<100:\n        list_example3_filtered.remove(element)\nprint(list_example3_filtered)\n\n[100, 101, 102, 103, 104, 105]\n\n\n\\(\\color{red}{\\text{Q1}}\\): What’s the need to define a new variable list\\_example3\\_filtered in the above code?\n\\(\\color{blue}{\\text{A1}}\\): Replace list_example3_filtered with list_example3 and identify the issue.\n\n#Method 2: For loop with condition\n[element for element in list_example3 if element>100]\n\n[101, 102, 103, 104, 105]\n\n\n\n\n2.2.2 List comprehensions\nList comprehension is a compact way to create new lists based on elements of an existing list or other objects.\nExample: Create a list that has squares of natural numbers from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]\n\n\nExample: Create a list of tuples, where each tuple consists of a natural number and its square, for natural numbers ranging from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x,x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[(5, 25), (6, 36), (7, 49), (8, 64), (9, 81), (10, 100), (11, 121), (12, 144), (13, 169), (14, 196), (15, 225)]\n\n\n\n\n2.2.3 Practice exercise 3\nBelow is a list consisting of responses to the question: “At what age do you think you will marry?” from students of the STAT303-1 Fall 2022 class.\n\nexp_marriage_age=['24','30','28','29','30','27','26','28','30+','26','28','30','30','30','probably never','30','25','25','30','28','30+ ','30','25','28','28','25','25','27','28','30','30','35','26','28','27','27','30','25','30','26','32','27','26','27','26','28','37','28','28','28','35','28','27','28','26','28','26','30','27','30','28','25','26','28','35','29','27','27','30','24','25','29','27','33','30','30','25','26','30','32','26','30','30','I wont','25','27','27','25','27','27','32','26','25','never','28','33','28','35','25','30','29','30','31','28','28','30','40','30','28','30','27','by 30','28','27','28','30-35','35','30','30','never','30','35','28','31','30','27','33','32','27','27','26','N/A','25','26','29','28','34','26','24','28','30','120','25','33','27','28','32','30','26','30','30','28','27','27','27','27','27','27','28','30','30','30','28','30','28','30','30','28','28','30','27','30','28','25','never','69','28','28','33','30','28','28','26','30','26','27','30','25','Never','27','27','25']\n\nUse list comprehension to:\n\n2.2.3.1 \nRemove the elements that are not integers - such as ‘probably never’, ‘30+’, etc. What is the length of the new list?\nHint: The built-in python function of the str class - isdigit() may be useful to check if the string contains only digits.\n\nexp_marriage_age_num = [x for x in exp_marriage_age if x.isdigit()==True]\nprint(\"Length of the new list = \",len(exp_marriage_age_num))\n\nLength of the new list =  181\n\n\n\n\n2.2.3.2 \nCap the values greater than 80 to 80, in the clean list obtained in (1). What is the mean age when people expect to marry in the new list?\n\nexp_marriage_age_capped = [min(int(x),80) for x in exp_marriage_age_num]\nprint(\"Mean age when people expect to marry = \", sum(exp_marriage_age_capped)/len(exp_marriage_age_capped))\n\nMean age when people expect to marry =  28.955801104972377\n\n\n\n\n2.2.3.3 \nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\nprint(\"Percentage of people who expect to marry at an age of 30 or more =\", str(100*sum([1 for x in exp_marriage_age_capped if x>=30])/len(exp_marriage_age_capped)),\"%\")\n\nPercentage of people who expect to marry at an age of 30 or more = 37.01657458563536 %\n\n\n\n\n\n2.2.4 Concatenating lists\nAs in tuples, lists can be concatenated using the + operator:\n\nimport time as tm\n\n\nlist_example4 = [5,'hi',4] \nlist_example4 = list_example4 + [None,'7',9]\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\nFor adding elements to a list, the extend method is preferred over the + operator. This is because the + operator creates a new list, while the extend method adds elements to an existing list. Thus, the extend operator is more memory efficient.\n\nlist_example4 = [5,'hi',4]\nlist_example4.extend([None, '7', 9])\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\n\n\n2.2.5 Sorting a list\nA list can be sorted using the sort method:\n\nlist_example5 = [6,78,9]\nlist_example5.sort(reverse=True) #the reverse argument is used to specify if the sorting is in ascending or descending order\nlist_example5\n\n[78, 9, 6]\n\n\n\n\n2.2.6 Slicing a list\nWe may extract or update a section of the list by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a list. For example, see the following example.\n\nlist_example6 = [4,7,3,5,7,1,5,87,5]\n\nLet us extract a slice containing all the elements from the the 3rd position to the 7th position.\n\nlist_example6[2:7]\n\n[3, 5, 7, 1, 5]\n\n\nNote that while the element at the start index is included, the element with the stop index is excluded in the above slice.\nIf either the start or stop index is not mentioned, the slicing will be done from the beginning or until the end of the list, respectively.\n\nlist_example6[:7]\n\n[4, 7, 3, 5, 7, 1, 5]\n\n\n\nlist_example6[2:]\n\n[3, 5, 7, 1, 5, 87, 5]\n\n\nTo slice the list relative to the end, we can use negative indices:\n\nlist_example6[-4:]\n\n[1, 5, 87, 5]\n\n\n\nlist_example6[-4:-2:]\n\n[1, 5]\n\n\nAn extra colon (‘:’) can be used to slice every ith element of a list.\n\n#Selecting every 3rd element of a list\nlist_example6[::3]\n\n[4, 5, 5]\n\n\n\n#Selecting every 3rd element of a list from the end\nlist_example6[::-3]\n\n[5, 1, 3]\n\n\n\n#Selecting every element of a list from the end or reversing a list \nlist_example6[::-1]\n\n[5, 87, 5, 1, 7, 5, 3, 7, 4]\n\n\n\n\n2.2.7 Practice exercise 4\nStart with the list [8,9,10]. Do the following:\n\n2.2.7.1 \nSet the second entry (index 1) to 17\n\nL = [8,9,10]\nL[1]=17\n\n\n\n2.2.7.2 \nAdd 4, 5, and 6 to the end of the list\n\nL.extend([4, 5, 6])\n\n\n\n2.2.7.3 \nRemove the first entry from the list\n\nL.pop(0)\n\n8\n\n\n\n\n2.2.7.4 \nSort the list\n\nL.sort()\n\n\n\n2.2.7.5 \nDouble the list (concatenate the list to itself)\n\nL.extend(L)\n\n\n\n2.2.7.6 \nInsert 25 at index 3\nThe final list should equal [4,5,6,25,10,17,4,5,6,10,17]\n\nL.insert(3, 25)\n\n\nL\n\n[4, 5, 6, 25, 10, 17, 4, 5, 6, 10, 17]\n\n\nNow that we have an idea about lists, let us try to think where it can be used.\n\n\n\n\n\n \n        \n\n\nNow that we have learned about lists and tuples, let us compare them.\n\\(\\color{red}{\\text{Q2}}\\): A list seems to be much more flexible than tuple, and can replace a tuple almost everywhere. Then why use tuple at all?\n\\(\\color{blue}{\\text{A2}}\\): The additional flexibility of a list comes at the cost of efficiency. Some of the advatages of a tuple over a list are as follows:\n\nSince a list can be extended, space is over-allocated when creating a list. A tuple takes less storage space as compared to a list of the same length.\nTuples are not copied. If a tuple is assigned to another tuple, both tuples point to the same memory location. However, if a list is assigned to another list, a new list is created consuming the same memory space as the orignial list.\nTuples refer to their element directly, while in a list, there is an extra layer of pointers that refers to their elements. Thus it is faster to retrieve elements from a tuple.\n\nThe examples below illustrate the above advantages of a tuple.\n\n#Example showing tuples take less storage space than lists for the same elements\ntuple_ex = (1, 2, 'Obama')\nlist_ex = [1, 2, 'Obama']\nprint(\"Space taken by tuple =\",tuple_ex.__sizeof__(),\" bytes\")\nprint(\"Space taken by list =\",list_ex.__sizeof__(),\" bytes\")\n\nSpace taken by tuple = 48  bytes\nSpace taken by list = 64  bytes\n\n\n\n#Examples showing that a tuples are not copied, while lists can be copied\ntuple_copy = tuple(tuple_ex)\nprint(\"Is tuple_copy same as tuple_ex?\", tuple_ex is tuple_copy)\nlist_copy = list(list_ex)\nprint(\"Is list_copy same as list_ex?\",list_ex is list_copy)\n\nIs tuple_copy same as tuple_ex? True\nIs list_copy same as list_ex? False\n\n\n\n#Examples showing tuples takes lesser time to retrieve elements\nimport time as tm\ntt = tm.time()\nlist_ex = list(range(1000000)) #List containinig whole numbers upto 1 million\na=(list_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a list = \", tm.time()-tt)\n\ntt = tm.time()\ntuple_ex = tuple(range(1000000)) #tuple containinig whole numbers upto 1 million\na=(tuple_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a tuple = \", tm.time()-tt)\n\nTime take to retrieve every 2nd element from a list =  0.03579902648925781\nTime take to retrieve every 2nd element from a tuple =  0.02684164047241211"
  },
  {
    "objectID": "data_structures.html#dictionary",
    "href": "data_structures.html#dictionary",
    "title": "2  Data structures",
    "section": "2.3 Dictionary",
    "text": "2.3 Dictionary\nA dictionary consists of key-value pairs, where the keys and values are python objects. While values can be any python object, keys need to be immutable python objects, like strings, integers, tuples, etc. Thus, a list can be a value, but not a key, as elements of a list can be changed. A dictionary is defined using the keyword dict along with curly braces, colons to separate keys and values, and commas to separate elements of a dictionary:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping'}\n\nElements of a dictionary can be retrieved by using the corresponding key.\n\ndict_example['India']\n\n'Narendra Modi'\n\n\n\n2.3.1 Adding and removing elements in a dictionary\nNew elements can be added to a dictionary by defining a key in square brackets and assiging it to a value:\n\ndict_example['Japan'] = 'Fumio Kishida'\ndict_example['Countries'] = 4\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida',\n 'Countries': 4}\n\n\nElements can be removed from the dictionary using the del method or the pop method:\n\n#Removing the element having key as 'Countries'\ndel dict_example['Countries']\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida'}\n\n\n\n#Removing the element having key as 'USA'\ndict_example.pop('USA')\n\n'Joe Biden'\n\n\n\ndict_example\n\n{'India': 'Narendra Modi', 'China': 'Xi Jinping', 'Japan': 'Fumio Kishida'}\n\n\nNew elements can be added, and values of exisiting keys can be changed using the update method:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping','Countries':3}\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 3}\n\n\n\ndict_example.update({'Countries':4, 'Japan':'Fumio Kishida'})\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 4,\n 'Japan': 'Fumio Kishida'}\n\n\n\n\n2.3.2 Iterating over elements of a dictionary\nThe items() attribute of a dictionary can be used to iterate over elements of a dictionary.\n\nfor key,value in dict_example.items():\n    print(\"The Head of State of\",key,\"is\",value)\n\nThe Head of State of USA is Joe Biden\nThe Head of State of India is Narendra Modi\nThe Head of State of China is Xi Jinping\nThe Head of State of Countries is 4\nThe Head of State of Japan is Fumio Kishida\n\n\n\n\n2.3.3 Practice exercise 5\nThe GDP per capita of USA for most years from 1960 to 2021 is given by the dictionary D given in the code cell below.\nFind:\n\nThe GDP per capita in 2015\nThe GDP per capita of 2014 is missing. Update the dictionary to include the GDP per capita of 2014 as the average of the GDP per capita of 2013 and 2015.\nImpute the GDP per capita of other missing years in the same manner as in (2), i.e., as the average GDP per capita of the previous year and the next year. Note that the GDP per capita is not missing for any two consecutive years.\nPrint the years and the imputed GDP per capita for the years having a missing value of GDP per capita in (3).\n\n\nD = {'1960':3007,'1961':3067,'1962':3244,'1963':3375,'1964':3574,'1965':3828,'1966':4146,'1967':4336,'1968':4696,'1970':5234,'1971':5609,'1972':6094,'1973':6726,'1974':7226,'1975':7801,'1976':8592,'1978':10565,'1979':11674, '1980':12575,'1981':13976,'1982':14434,'1983':15544,'1984':17121,'1985':18237,  '1986':19071,'1987':20039,'1988':21417,'1989':22857,'1990':23889,'1991':24342,  '1992':25419,'1993':26387,'1994':27695,'1995':28691,'1996':29968,'1997':31459,  '1998':32854,'2000':36330,'2001':37134,'2002':37998,'2003':39490,'2004':41725,  '2005':44123,'2006':46302,'2007':48050,'2008':48570,'2009':47195,'2010':48651,  '2011':50066,'2012':51784,'2013':53291,'2015':56763,'2016':57867,'2017':59915,'2018':62805, '2019':65095,'2020':63028,'2021':69288}\n\nSolution:\n\nprint(\"GDP per capita in 2015 =\", D['2015'])\nD['2014'] = (D['2013']+D['2015'])/2\n\n#Iterating over all years from 1960 to 2021\nfor i in range(1960,2021):\n    \n    #Imputing the GDP of the year if it is missing\n    if str(i) not in D.keys():    \n        D[str(i)] = (D[str(i-1)]+D[str(i+1)])/2\n        print(\"Imputed GDP per capita for the year\",i,\"is $\",D[str(i)])\n\nGDP per capita in 2015 = 56763\nImputed GDP per capita for the year 1969 is $ 4965.0\nImputed GDP per capita for the year 1977 is $ 9578.5\nImputed GDP per capita for the year 1999 is $ 34592.0\n\n\n\n\n2.3.4 Practice exercise 6\nThe object deck defined below corresponds to a deck of cards. Estimate the probablity that a five card hand will be a flush, as follows:\n\nWrite a function that accepts a hand of 5 cards as argument, and returns whether the hand is a flush or not.\nRandomly pull a hand of 5 cards from the deck. Call the function developed in (1) to determine if the hand is a flush.\nRepeat (2) 10,000 times.\nEstimate the probability of the hand being a flush from the results of the 10,000 simulations.\n\nYou may use the function shuffle() from the random library to shuffle the deck everytime before pulling a hand of 5 cards.\n\ndeck = [{'value':i, 'suit':c}\nfor c in ['spades', 'clubs', 'hearts', 'diamonds']\nfor i in range(2,15)]\n\nSolution:\n\nimport random as rm\n\n#Function to check if a 5-card hand is a flush\ndef chck_flush(hands):  \n    \n    #Assuming that the hand is a flush, before checking the cards\n    yes_flush =1\n    \n    #Storing the suit of the first card in 'first_suit'\n    first_suit = hands[0]['suit']\n    \n    #Iterating over the remaining 4 cards of the hand\n    for j in range(1,len(hands)):\n        \n        #If the suit of any of the cards does not match the suit of the first card, the hand is not a flush\n        if first_suit!=hands[j]['suit']:\n            yes_flush = 0; \n            \n            #As soon as a card with a different suit is found, the hand is not a flush and there is no need to check other cards. So, we 'break' out of the loop\n            break;\n    return yes_flush\n\nflush=0\nfor i in range(10000):\n    \n    #Shuffling the deck\n    rm.shuffle(deck)\n    \n    #Picking out the first 5 cards of the deck as a hand and checking if they are a flush\n    #If the hand is a flush it is counted\n    flush=flush+chck_flush(deck[0:5])\n    \nprint(\"Probability of obtaining a flush=\", 100*(flush/10000),\"%\")\n\nProbability of obtaining a flush= 0.26 %"
  },
  {
    "objectID": "data_structures.html#practice-exercise-7",
    "href": "data_structures.html#practice-exercise-7",
    "title": "2  Data structures",
    "section": "2.4 Practice exercise 7",
    "text": "2.4 Practice exercise 7\nThe code cell below defines an object having the nutrition information of drinks in starbucks. Assume that the manner in which the information is structured is consistent throughout the object.\n\nstarbucks_drinks_nutrition={'Cool Lime Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Strawberry Acai Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Very Berry Hibiscus Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Evolution Fresh™ Organic Ginger Limeade': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Coffee': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Espresso Classics - Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Iced Espresso Classics - Caffe Mocha': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 23}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Espresso Classics - Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Shaken Sweet Tea': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Berry Blossom White': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Black Mango': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Black with Lemon': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Brambleberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Giant Peach': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Iced Passion': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Lemon Ginger': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Black Lemonade': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Plum Pomegranate': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Tazoberry': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled White Cranberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Teavana® Shaken Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Black Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Green Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Peach Green Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Raspberry Pomegranate': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Strawberry Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Doubleshot Protein Dark Chocolate': [{'Nutrition_type': 'Calories', 'value': 210}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 33}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Starbucks® Doubleshot Protein Vanilla': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 120}], 'Starbucks® Iced Coffee Caramel': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Light Sweetened': [{'Nutrition_type': 'Calories', 'value': 50}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Unsweetened': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 2}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Blonde Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Clover® Brewed Coffee': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Decaf Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Featured Dark Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nariño 70 Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Nariño 70 Cold Brew with Milk': [{'Nutrition_type': 'Calories', 'value': 0}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Nitro Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nitro Cold Brew with Sweet Cream': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 20}], 'Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Vanilla Sweet Cream Cold Brew': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 25}], 'Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks® Signature Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 430}, {'Nutrition_type': 'Fat', 'value': 26.0}, {'Nutrition_type': 'Carb', 'value': 45}, {'Nutrition_type': 'Fiber', 'value': 5}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 290}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 42}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 140}], 'Cappuccino': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 12}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 40}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 32}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Flat White': [{'Nutrition_type': 'Calories', 'value': 180}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Iced Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Iced Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 230}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 36}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 9}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Iced Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 95}], 'Iced Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Iced Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 30}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Iced White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 190}], 'Latte Macchiato': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks Doubleshot® on Ice Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 1.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 40}], 'Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 150}], 'White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 360}, {'Nutrition_type': 'Fat', 'value': 11.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 240}], 'Cinnamon Dolce Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 350}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 64}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 15}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Coffee Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 200}], 'Mocha Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 280}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 220}], 'Mocha Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.5}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Cinnamon Dolce Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Vanilla Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Chocolate Smoothie': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 8}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Strawberry Smoothie': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 2.0}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 7}, {'Nutrition_type': 'Protein', 'value': 16}, {'Nutrition_type': 'Sodium', 'value': 130}]}\n\nUse the object above to answer the following questions:\n\n2.4.1 \nWhat is the datatype of the object?\n\n2.4.1.1 \nIf the object in (1) is a dictionary, what is the datatype of the values of the dictionary?\n\n\n2.4.1.2 \nIf the object in (1) is a dictionary, what is the datatype of the elements within the values of the dictionary?\n\n\n2.4.1.3 \nHow many calories are there in Iced Coffee?\n\n\n2.4.1.4 \nWhich drink(s) have the highest amount of protein in them, and what is that protein amount?\n\n\n2.4.1.5 \nWhich drink(s) have a fat content of more than 10g, and what is their fat content?"
  },
  {
    "objectID": "Assignment 1 (control flow).html",
    "href": "Assignment 1 (control flow).html",
    "title": "Appendix A — Assignment A",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The breakdow is as follows:\n\n\nMust be an HTML file rendered using Quarto (1.5 pts).\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt)\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc. (1.5 pts)\n\n\nThe assignment is worth 100 points, and is due on 13th April 2023 at 11:59 pm."
  },
  {
    "objectID": "Assignment 1 (control flow).html#alarm-clock",
    "href": "Assignment 1 (control flow).html#alarm-clock",
    "title": "Appendix A — Assignment A",
    "section": "A.1 Alarm clock",
    "text": "A.1 Alarm clock\n\nA.1.1 When does the alarm go off?\nYou look at the clock and it is exactly 2pm. You set an alarm to go off in 510 hours. At what time does the alarm go off? If the answer is say, 4 pm, then your code should print - \"The alarm goes off at 4 pm\".\n(2 points)\n\n\nA.1.2 User-friendly alarm clock\nWrite a program to solve the general version of the above problem. Ask the user for - (1) the time now (in hours), and (2) the number of hours for the alarm to go off. Your program should output the time at which the alarm goes off. Both the user inputs must be in {0, 1, 2…, 22, 23}. If the answer is, say 14:00 hours, then your program should print - “The alarm goes off at 14:00 hours.\nShow the output of your program when the user inputs 7 as the current time, and 95 as the number of hours for the alarm to go off.\n(4 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#finding-prime-factors",
    "href": "Assignment 1 (control flow).html#finding-prime-factors",
    "title": "Appendix A — Assignment A",
    "section": "A.2 Finding prime factors",
    "text": "A.2 Finding prime factors\n\nA.2.1 Prime or not\nWrite a program that checks if a positive integer is prime or not. Show the output when the program is used to check if 89 is prime or not.\n(2 points)\n\n\nA.2.2 Factors\nPrompt the user to input a positive integer. Write a program that prints the factors of the positive integer input by the user. Show the output of the program if the user inputs 190.\n(2 points)\n\n\nA.2.3 Prime factors\nPrompt the user to input a positive integer. Update the program in 2(b) to print the prime factors of the positive integer input by the user. Show the output of the program if the user inputs 190.\n(8 points)\n\n\nA.2.4 User-friendly prime factor calculator\nUpdate the program in 2(c), so that it prints “Incorrect input, please enter positive integer” if the user does not enter a positive integer, and then prompts the user to input a positive integer. The program should continue to prompt the user to enter a positive integer until the user successfully enters a positive integer. Show the output of the program if the user enters \"seventy\" in the first attempt, \"#70\" in the second attempt, and 70 in the third attempt.\n(12 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#number-of-words-in-a-sentence",
    "href": "Assignment 1 (control flow).html#number-of-words-in-a-sentence",
    "title": "Appendix A — Assignment A",
    "section": "A.3 Number of words in a sentence",
    "text": "A.3 Number of words in a sentence\nPrompt the user to input an english sentence. Write a program that counts and prints the number of words in the sentence input by the user. The program should continue to run until the user inputs the sentence - “end program”. Show the output of the program if the user enters \"this is the time to sleep\" in the first attempt, \"this is too much work for a day\" in the second attempt, and \"end program\" in the third attempt.\nHint: Count the number of spaces\n(10 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#survival-of-rabbits",
    "href": "Assignment 1 (control flow).html#survival-of-rabbits",
    "title": "Appendix A — Assignment A",
    "section": "A.4 Survival of rabbits",
    "text": "A.4 Survival of rabbits\nIn many environments, two or more species compete for the available resources. Classic predator–prey equations have been used to simulate or predict the dynamics of biological systems in which two species interact, one as a predator and the other as prey. You will use a simplified version of the Lotka-Volterra equations for modeling fox/rabbit populations, described below.\nLet the following variables be defined as:\n\\(r_t\\): The number of prey (rabbits) at time \\(t\\), where \\(t\\) corresponds to a certain year.\n\\(f_t\\): The number of predators (foxes) at time \\(t\\), where \\(t\\) corresponds to a certain year.\n\\(\\alpha\\): The birth rate of prey.\n\\(\\beta\\): The death rate of prey (depends on predator population).\n\\(\\gamma\\): The birth rate of predators (depends on prey population).\n\\(\\delta\\): The death rate of predators.\nThen, we can define the populations of the next time period or the next year \\((t+1)\\) using the following system of equations:\n\\[r_{t+1} = r_t + \\alpha r_t - \\beta r_t f_t,\\]\n\\[f_{t+1} = f_t + \\gamma f_t r_t - \\delta f_t\\]\n\nA.4.1 Number of rabbits and foxes\nWrite a program that uses the following parameter values, and calculates and prints the populations of the rabbits and foxes for each year upto the next 14 years. Since the number of rabbits and foxes cannot be floating-point numbers, use the in-built python function round() to round-off the calculated values to integers. Also, we cannot have negative rabbits or negative foxes, so if the population values are ever negative, consider the population to be zero instead.\n\\(r_0\\) = 500\n\\(f_0\\) = 1\n\\(\\alpha\\) = 0.2\n\\(\\beta\\) = 0.005\n\\(\\gamma\\) = 0.001\n\\(\\delta\\) = 0.2\nThe output of the program should be as follows:\nAt time t = 0, there are 500 rabbits, and 1 foxes\nAt time t = 1, there are 598 rabbits, and 1 foxes\nAt time t = 2, there are 713 rabbits, and 2 foxes\nAt time t = 3, there are 849 rabbits, and 3 foxes\nAt time t = 4, there are 1007 rabbits, and 5 foxes\nAt time t = 5, there are 1186 rabbits, and 8 foxes\nAt time t = 6, there are 1375 rabbits, and 16 foxes\nAt time t = 7, there are 1538 rabbits, and 35 foxes\nAt time t = 8, there are 1573 rabbits, and 83 foxes\nAt time t = 9, there are 1237 rabbits, and 196 foxes\nAt time t = 10, there are 270 rabbits, and 400 foxes\nAt time t = 11, there are 0 rabbits, and 428 foxes\nAt time t = 12, there are 0 rabbits, and 342 foxes\nAt time t = 13, there are 0 rabbits, and 274 foxes\nAt time t = 14, there are 0 rabbits, and 219 foxes\n(10 points)\n\n\nA.4.2 How long can 100 rabbits survive?\nSuppose at \\(t = 0\\), there are 100 rabbits, i.e., \\(r_0 = 100\\). How many foxes should be there at \\(t = 0\\) (i.e., what should be \\(f_0\\)), such that the rabbit species survives (i.e., \\(r_{t\\_max}&gt;0\\)) for the maximum possible number of years (\\(t_{max}\\)) before becoming extinct (i.e., \\(r_{t\\_max+1} = 0\\)). Also, find the maximum possible number of years (i.e., \\(t_{max}\\)) the rabbit species will survive.\nModify the program in the previous question to compute the answers to the above questions, and print the following statement, with the blanks filled:\nIf there are ___ foxes at t = 0, the rabbit species will survive for ___ years, which is the maximum possible number of years they can survive.\nNote: Use the same values of \\(\\alpha\\), \\(\\beta\\), \\(\\gamma\\), and \\(\\delta\\) as in the previous question.\nHint:\n\nConsider values of \\(f_0\\) starting from 1, and upto a large number, say 1000.\nFor each value of \\(f_0\\), find the number of years for which the rabbit species survives.\nFind the value of \\(f_0\\) and \\(t\\) for which the rabbit species surives the maximum number of years, i.e., \\(t = t_{max}\\).\n\n(20 points)\n\n\nA.4.3 Saving rabbits from extinction\nWhat must be the minimum number of rabbits, and the corresponding number of foxes at \\(t = 0\\), such that the rabbit and fox species never become extinct.\nNote: Use the same values of \\(\\alpha\\), \\(\\beta\\), \\(\\gamma\\), and \\(\\delta\\) as in the previous question.\nHint:\n\nConsider \\(r_0 = 1\\), and then keep increasing \\(r_0\\) by 1 if it’s not possible for the rabbit species to survive with the value of \\(r_0\\) under consideration.\nFor each \\(r_0\\), consider number of foxes starting from \\(f_0 = 1\\), and upto a large number, say \\(f_0 = 200\\).\nAs soon as you find a combination of \\(r_0\\) and \\(f_0\\), such that there is no change in \\(r_t\\) and \\(f_t\\) for 2 consecutive years, you have found the values of \\(r_0\\) and \\(f_0\\), such that both the species maintain their numbers and never become extinct. At this point, print the result, and stop the program (break out of all loops).\n\nModify the program in the previous question to answer the above question, and print the following statement with the blanks filled:\nFor ___ foxes, and ___ rabbits at t = 0, the fox and rabbit species will never be extinct.\n(25 points)"
  },
  {
    "objectID": "Assignment 2 (control flow).html",
    "href": "Assignment 2 (control flow).html",
    "title": "Appendix C — Assignment B",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The breakdow is as follows:\n\n\nMust be an HTML file rendered using Quarto (1.5 pts).\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt)\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc. (1.5 pts)\n\n\nThe assignment is worth 100 points, and is due on Friday, 21st April 2023 at 11:59 pm."
  },
  {
    "objectID": "Assignment 2 (control flow).html#sentence-analysis",
    "href": "Assignment 2 (control flow).html#sentence-analysis",
    "title": "Appendix C — Assignment B",
    "section": "C.1 Sentence analysis",
    "text": "C.1 Sentence analysis\n\nC.1.1 Word count\nWrite a function that accepts a word, and a sentence as arguments, and returns the number of times the word occurs in the sentence.\nCall the function, and print the returned value if the word is “sea”, and the sentence is “She sells sea shells on the sea shore when the sea is calm.” Note that this is just an example to check your function. Your function should work for any word and sentence.\n(10 points)\n\n\nC.1.2 Max word count\nAsk the user to input a sentence. Use the function in B.1.1 to find the word that occurs the maximum number of times in the sentence. Print the word and its number of occurences. If multiple words occur the maximum number of times, then you can print any one of them.\nCheck your program when the user inputs the sentence, “She sells sea shells on the sea shore when the sea is calm.”. Your program must print, “The word with the maximum number of occurences is ‘sea’ and it occurs 3 times.” Note that this is just an example to check your program. Your program must work for any sentence.\n(20 points)"
  },
  {
    "objectID": "Assignment 2 (control flow).html#prime-factors",
    "href": "Assignment 2 (control flow).html#prime-factors",
    "title": "Appendix C — Assignment B",
    "section": "C.2 Prime factors",
    "text": "C.2 Prime factors\n\nC.2.1 Prime\nWrite a function that checks if an integer is prime. The function must accept the integer as an argument, and return True if the integer is prime, otherwise it must return False.\nCall your function with the argument as 197.\n(4 points)\n\n\nC.2.2 Factor\nWrite a function that checks if an integer is a factor of another integer. The function must accept both the integers as arguments, and return True if the integer is a factor, otherwise it must return False.\nCall your function with the arguments as (19,85).\n(3 points)\n\n\nC.2.3 Prime Factors\nPrompt the user to input a positive integer. Use the functions in B.2.1 and B.2.2 to print the prime factors of the integer. Your program should be no more than 4 lines (excluding the comments)\nCheck your program is the user inputs 190\n(8 points)"
  },
  {
    "objectID": "Assignment 2 (control flow).html#binary-search",
    "href": "Assignment 2 (control flow).html#binary-search",
    "title": "Appendix C — Assignment B",
    "section": "C.3 Binary search",
    "text": "C.3 Binary search\n\nC.3.1 Word search\nThe tuple below named as tuple_of_words consists of words. Write a function that accepts a word, say word_to_search and the tuple_of_words as arguments, and finds if the word_to_search occurs in the tuple_of_words or not. This is very simple to do with the code word_to_search in tuple_of_words. However, this code is unfortunately very slow.\nAs the words in the tuple_of_words are already sorted in alphabetical order, we can search using a faster way, called binary search. To implement binary search in a function, start by comparing word_to_search with the middle entry in the tuple_of_words. If they are equal, then you are done and the function should return True. On the other hand, if the word_to_search comes before the middle entry, then search the first half of tuple_of_words. If it comes after the middle entry, then search the second half of tuple_of_words. Then repeat the process on the appropriate half of the tuple_of_words and continue until the word is found or there is nothing left to search, in which case the function short return False. The < and > operators can be used to alphabetically compare two strings.\nYou may write just one function or multiple functions to solve this problem.\nCheck your function if the word_to_search is:\n\n'rocket'\n'rest'\n'ambush'\n\n(25 points)\n\n\nCode\ntuple_of_words=('abacus', 'abdomen', 'abdominal', 'abide', 'abiding', 'ability', 'ablaze', 'able', 'abnormal', 'abrasion', 'abrasive', 'abreast', 'abridge', 'abroad', 'abruptly', 'absence', 'absentee', 'absently', 'absinthe', 'absolute', 'absolve', 'abstain', 'abstract', 'absurd', 'accent', 'acclaim', 'acclimate', 'accompany', 'account', 'accuracy', 'accurate', 'accustom', 'acetone', 'achiness', 'aching', 'acid', 'acorn', 'acquaint', 'acquire', 'acre', 'acrobat', 'acronym', 'acting', 'action', 'activate', 'activator', 'active', 'activism', 'activist', 'activity', 'actress', 'acts', 'acutely', 'acuteness', 'aeration', 'aerobics', 'aerosol', 'aerospace', 'afar', 'affair', 'affected', 'affecting', 'affection', 'affidavit', 'affiliate', 'affirm', 'affix', 'afflicted', 'affluent', 'afford', 'affront', 'aflame', 'afloat', 'aflutter', 'afoot', 'afraid', 'afterglow', 'afterlife', 'aftermath', 'aftermost', 'afternoon', 'aged', 'ageless', 'agency', 'agenda', 'agent', 'aggregate', 'aghast', 'agile', 'agility', 'aging', 'agnostic', 'agonize', 'agonizing', 'agony', 'agreeable', 'agreeably', 'agreed', 'agreeing', 'agreement', 'aground', 'ahead', 'ahoy', 'aide', 'aids', 'aim', 'ajar', 'alabaster', 'alarm', 'albatross', 'album', 'alfalfa', 'algebra', 'algorithm', 'alias', 'alibi', 'alienable', 'alienate', 'aliens', 'alike', 'alive', 'alkaline', 'alkalize', 'almanac', 'almighty', 'almost', 'aloe', 'aloft', 'aloha', 'alone', 'alongside', 'aloof', 'alphabet', 'alright', 'although', 'altitude', 'alto', 'aluminum', 'alumni', 'always', 'amaretto', 'amaze', 'amazingly', 'amber', 'ambiance', 'ambiguity', 'ambiguous', 'ambition', 'ambitious', 'ambulance', 'ambush', 'amendable', 'amendment', 'amends', 'amenity', 'amiable', 'amicably', 'amid', 'amigo', 'amino', 'amiss', 'ammonia', 'ammonium', 'amnesty', 'amniotic', 'among', 'amount', 'amperage', 'ample', 'amplifier', 'amplify', 'amply', 'amuck', 'amulet', 'amusable', 'amused', 'amusement', 'amuser', 'amusing', 'anaconda', 'anaerobic', 'anagram', 'anatomist', 'anatomy', 'anchor', 'anchovy', 'ancient', 'android', 'anemia', 'anemic', 'aneurism', 'anew', 'angelfish', 'angelic', 'anger', 'angled', 'angler', 'angles', 'angling', 'angrily', 'angriness', 'anguished', 'angular', 'animal', 'animate', 'animating', 'animation', 'animator', 'anime', 'animosity', 'ankle', 'annex', 'annotate', 'announcer', 'annoying', 'annually', 'annuity', 'anointer', 'another', 'answering', 'antacid', 'antarctic', 'anteater', 'antelope', 'antennae', 'anthem', 'anthill', 'anthology', 'antibody', 'antics', 'antidote', 'antihero', 'antiquely', 'antiques', 'antiquity', 'antirust', 'antitoxic', 'antitrust', 'antiviral', 'antivirus', 'antler', 'antonym', 'antsy', 'anvil', 'anybody', 'anyhow', 'anymore', 'anyone', 'anyplace', 'anything', 'anytime', 'anyway', 'anywhere', 'aorta', 'apache', 'apostle', 'appealing', 'appear', 'appease', 'appeasing', 'appendage', 'appendix', 'appetite', 'appetizer', 'applaud', 'applause', 'apple', 'appliance', 'applicant', 'applied', 'apply', 'appointee', 'appraisal', 'appraiser', 'apprehend', 'approach', 'approval', 'approve', 'apricot', 'april', 'apron', 'aptitude', 'aptly', 'aqua', 'aqueduct', 'arbitrary', 'arbitrate', 'ardently', 'area', 'arena', 'arguable', 'arguably', 'argue', 'arise', 'armadillo', 'armband', 'armchair', 'armed', 'armful', 'armhole', 'arming', 'armless', 'armoire', 'armored', 'armory', 'armrest', 'army', 'aroma', 'arose', 'around', 'arousal', 'arrange', 'array', 'arrest', 'arrival', 'arrive', 'arrogance', 'arrogant', 'arson', 'art', 'ascend', 'ascension', 'ascent', 'ascertain', 'ashamed', 'ashen', 'ashes', 'ashy', 'aside', 'askew', 'asleep', 'asparagus', 'aspect', 'aspirate', 'aspire', 'aspirin', 'astonish', 'astound', 'astride', 'astrology', 'astronaut', 'astronomy', 'astute', 'atlantic', 'atlas', 'atom', 'atonable', 'atop', 'atrium', 'atrocious', 'atrophy', 'attach', 'attain', 'attempt', 'attendant', 'attendee', 'attention', 'attentive', 'attest', 'attic', 'attire', 'attitude', 'attractor', 'attribute', 'atypical', 'auction', 'audacious', 'audacity', 'audible', 'audibly', 'audience', 'audio', 'audition', 'augmented', 'august', 'authentic', 'author', 'autism', 'autistic', 'autograph', 'automaker', 'automated', 'automatic', 'autopilot', 'available', 'avalanche', 'avatar', 'avenge', 'avenging', 'avenue', 'average', 'aversion', 'avert', 'aviation', 'aviator', 'avid', 'avoid', 'await', 'awaken', 'award', 'aware', 'awhile', 'awkward', 'awning', 'awoke', 'awry', 'axis', 'babble', 'babbling', 'babied', 'baboon', 'backache', 'backboard', 'backboned', 'backdrop', 'backed', 'backer', 'backfield', 'backfire', 'backhand', 'backing', 'backlands', 'backlash', 'backless', 'backlight', 'backlit', 'backlog', 'backpack', 'backpedal', 'backrest', 'backroom', 'backshift', 'backside', 'backslid', 'backspace', 'backspin', 'backstab', 'backstage', 'backtalk', 'backtrack', 'backup', 'backward', 'backwash', 'backwater', 'backyard', 'bacon', 'bacteria', 'bacterium', 'badass', 'badge', 'badland', 'badly', 'badness', 'baffle', 'baffling', 'bagel', 'bagful', 'baggage', 'bagged', 'baggie', 'bagginess', 'bagging', 'baggy', 'bagpipe', 'baguette', 'baked', 'bakery', 'bakeshop', 'baking', 'balance', 'balancing', 'balcony', 'balmy', 'balsamic', 'bamboo', 'banana', 'banish', 'banister', 'banjo', 'bankable', 'bankbook', 'banked', 'banker', 'banking', 'banknote', 'bankroll', 'banner', 'bannister', 'banshee', 'banter', 'barbecue', 'barbed', 'barbell', 'barber', 'barcode', 'barge', 'bargraph', 'barista', 'baritone', 'barley', 'barmaid', 'barman', 'barn', 'barometer', 'barrack', 'barracuda', 'barrel', 'barrette', 'barricade', 'barrier', 'barstool', 'bartender', 'barterer', 'bash', 'basically', 'basics', 'basil', 'basin', 'basis', 'basket', 'batboy', 'batch', 'bath', 'baton', 'bats', 'battalion', 'battered', 'battering', 'battery', 'batting', 'battle', 'bauble', 'bazooka', 'blabber', 'bladder', 'blade', 'blah', 'blame', 'blaming', 'blanching', 'blandness', 'blank', 'blaspheme', 'blasphemy', 'blast', 'blatancy', 'blatantly', 'blazer', 'blazing', 'bleach', 'bleak', 'bleep', 'blemish', 'blend', 'bless', 'blighted', 'blimp', 'bling', 'blinked', 'blinker', 'blinking', 'blinks', 'blip', 'blissful', 'blitz', 'blizzard', 'bloated', 'bloating', 'blob', 'blog', 'bloomers', 'blooming', 'blooper', 'blot', 'blouse', 'blubber', 'bluff', 'bluish', 'blunderer', 'blunt', 'blurb', 'blurred', 'blurry', 'blurt', 'blush', 'blustery', 'boaster', 'boastful', 'boasting', 'boat', 'bobbed', 'bobbing', 'bobble', 'bobcat', 'bobsled', 'bobtail', 'bodacious', 'body', 'bogged', 'boggle', 'bogus', 'boil', 'bok', 'bolster', 'bolt', 'bonanza', 'bonded', 'bonding', 'bondless', 'boned', 'bonehead', 'boneless', 'bonelike', 'boney', 'bonfire', 'bonnet', 'bonsai', 'bonus', 'bony', 'boogeyman', 'boogieman', 'book', 'boondocks', 'booted', 'booth', 'bootie', 'booting', 'bootlace', 'bootleg', 'boots', 'boozy', 'borax', 'boring', 'borough', 'borrower', 'borrowing', 'boss', 'botanical', 'botanist', 'botany', 'botch', 'both', 'bottle', 'bottling', 'bottom', 'bounce', 'bouncing', 'bouncy', 'bounding', 'boundless', 'bountiful', 'bovine', 'boxcar', 'boxer', 'boxing', 'boxlike', 'boxy', 'breach', 'breath', 'breeches', 'breeching', 'breeder', 'breeding', 'breeze', 'breezy', 'brethren', 'brewery', 'brewing', 'briar', 'bribe', 'brick', 'bride', 'bridged', 'brigade', 'bright', 'brilliant', 'brim', 'bring', 'brink', 'brisket', 'briskly', 'briskness', 'bristle', 'brittle', 'broadband', 'broadcast', 'broaden', 'broadly', 'broadness', 'broadside', 'broadways', 'broiler', 'broiling', 'broken', 'broker', 'bronchial', 'bronco', 'bronze', 'bronzing', 'brook', 'broom', 'brought', 'browbeat', 'brownnose', 'browse', 'browsing', 'bruising', 'brunch', 'brunette', 'brunt', 'brush', 'brussels', 'brute', 'brutishly', 'bubble', 'bubbling', 'bubbly', 'buccaneer', 'bucked', 'bucket', 'buckle', 'buckshot', 'buckskin', 'bucktooth', 'buckwheat', 'buddhism', 'buddhist', 'budding', 'buddy', 'budget', 'buffalo', 'buffed', 'buffer', 'buffing', 'buffoon', 'buggy', 'bulb', 'bulge', 'bulginess', 'bulgur', 'bulk', 'bulldog', 'bulldozer', 'bullfight', 'bullfrog', 'bullhorn', 'bullion', 'bullish', 'bullpen', 'bullring', 'bullseye', 'bullwhip', 'bully', 'bunch', 'bundle', 'bungee', 'bunion', 'bunkbed', 'bunkhouse', 'bunkmate', 'bunny', 'bunt', 'busboy', 'bush', 'busily', 'busload', 'bust', 'busybody', 'buzz', 'cabana', 'cabbage', 'cabbie', 'cabdriver', 'cable', 'caboose', 'cache', 'cackle', 'cacti', 'cactus', 'caddie', 'caddy', 'cadet', 'cadillac', 'cadmium', 'cage', 'cahoots', 'cake', 'calamari', 'calamity', 'calcium', 'calculate', 'calculus', 'caliber', 'calibrate', 'calm', 'caloric', 'calorie', 'calzone', 'camcorder', 'cameo', 'camera', 'camisole', 'camper', 'campfire', 'camping', 'campsite', 'campus', 'canal', 'canary', 'cancel', 'candied', 'candle', 'candy', 'cane', 'canine', 'canister', 'cannabis', 'canned', 'canning', 'cannon', 'cannot', 'canola', 'canon', 'canopener', 'canopy', 'canteen', 'canyon', 'capable', 'capably', 'capacity', 'cape', 'capillary', 'capital', 'capitol', 'capped', 'capricorn', 'capsize', 'capsule', 'caption', 'captivate', 'captive', 'captivity', 'capture', 'caramel', 'carat', 'caravan', 'carbon', 'cardboard', 'carded', 'cardiac', 'cardigan', 'cardinal', 'cardstock', 'carefully', 'caregiver', 'careless', 'caress', 'caretaker', 'cargo', 'caring', 'carless', 'carload', 'carmaker', 'carnage', 'carnation', 'carnival', 'carnivore', 'carol', 'carpenter', 'carpentry', 'carpool', 'carport', 'carried', 'carrot', 'carrousel', 'carry', 'cartel', 'cartload', 'carton', 'cartoon', 'cartridge', 'cartwheel', 'carve', 'carving', 'carwash', 'cascade', 'case', 'cash', 'casing', 'casino', 'casket', 'cassette', 'casually', 'casualty', 'catacomb', 'catalog', 'catalyst', 'catalyze', 'catapult', 'cataract', 'catatonic', 'catcall', 'catchable', 'catcher', 'catching', 'catchy', 'caterer', 'catering', 'catfight', 'catfish', 'cathedral', 'cathouse', 'catlike', 'catnap', 'catnip', 'catsup', 'cattail', \n                'cattishly', 'cattle', 'catty', 'catwalk', 'caucasian', 'caucus', 'causal', 'causation', 'cause', 'causing', 'cauterize', 'caution', 'cautious', 'cavalier', 'cavalry', 'caviar', 'cavity', 'cedar', 'celery', 'celestial', 'celibacy', 'celibate', 'celtic', 'cement', 'census', 'ceramics', 'ceremony', 'certainly', 'certainty', 'certified', 'certify', 'cesarean', 'cesspool', 'chafe', 'chaffing', 'chain', 'chair', 'chalice', 'challenge', 'chamber', 'chamomile', 'champion', 'chance', 'change', 'channel', 'chant', 'chaos', 'chaperone', 'chaplain', 'chapped', 'chaps', 'chapter', 'character', 'charbroil', 'charcoal', 'charger', 'charging', 'chariot', 'charity', 'charm', 'charred', 'charter', 'charting', 'chase', 'chasing', 'chaste', 'chastise', 'chastity', 'chatroom', 'chatter', 'chatting', 'chatty', 'cheating', 'cheddar', 'cheek', 'cheer', 'cheese', 'cheesy', 'chef', 'chemicals', 'chemist', 'chemo', 'cherisher', 'cherub', 'chess', 'chest', 'chevron', 'chevy', 'chewable', 'chewer', 'chewing', 'chewy', 'chief', 'chihuahua', 'childcare', 'childhood', 'childish', 'childless', 'childlike', 'chili', 'chill', 'chimp', 'chip', 'chirping', 'chirpy', 'chitchat', 'chivalry', 'chive', 'chloride', 'chlorine', 'choice', 'chokehold', 'choking', 'chomp', 'chooser', 'choosing', 'choosy', 'chop', 'chosen', 'chowder', 'chowtime', 'chrome', 'chubby', 'chuck', 'chug', 'chummy', 'chump', 'chunk', 'churn', 'chute', 'cider', 'cilantro', 'cinch', 'cinema', 'cinnamon', 'circle', 'circling', 'circular', 'circulate', 'circus', 'citable', 'citadel', 'citation', 'citizen', 'citric', 'citrus', 'city', 'civic', 'civil', 'clad', 'claim', 'clambake', 'clammy', 'clamor', 'clamp', 'clamshell', 'clang', 'clanking', 'clapped', 'clapper', 'clapping', 'clarify', 'clarinet', 'clarity', 'clash', 'clasp', 'class', 'clatter', 'clause', 'clavicle', 'claw', 'clay', 'clean', 'clear', 'cleat', 'cleaver', 'cleft', 'clench', 'clergyman', 'clerical', 'clerk', 'clever', 'clicker', 'client', 'climate', 'climatic', 'cling', 'clinic', 'clinking', 'clip', 'clique', 'cloak', 'clobber', 'clock', 'clone', 'cloning', 'closable', 'closure', 'clothes', 'clothing', 'cloud', 'clover', 'clubbed', 'clubbing', 'clubhouse', 'clump', 'clumsily', 'clumsy', 'clunky', 'clustered', 'clutch', 'clutter', 'coach', 'coagulant', 'coastal', 'coaster', 'coasting', 'coastland', 'coastline', 'coat', 'coauthor', 'cobalt', 'cobbler', 'cobweb', 'cocoa', 'coconut', 'cod', 'coeditor', 'coerce', 'coexist', 'coffee', 'cofounder', 'cognition', 'cognitive', 'cogwheel', 'coherence', 'coherent', 'cohesive', 'coil', 'coke', 'cola', 'cold', 'coleslaw', 'coliseum', 'collage', 'collapse', 'collar', 'collected', 'collector', 'collide', 'collie', 'collision', 'colonial', 'colonist', 'colonize', 'colony', 'colossal', 'colt', 'coma', 'come', 'comfort', 'comfy', 'comic', 'coming', 'comma', 'commence', 'commend', 'comment', 'commerce', 'commode', 'commodity', 'commodore', 'common', 'commotion', 'commute', 'commuting', 'compacted', 'compacter', 'compactly', 'compactor', 'companion', 'company', 'compare', 'compel', 'compile', 'comply', 'component', 'composed', 'composer', 'composite', 'compost', 'composure', 'compound', 'compress', 'comprised', 'computer', 'computing', 'comrade', 'concave', 'conceal', 'conceded', 'concept', 'concerned', 'concert', 'conch', 'concierge', 'concise', 'conclude', 'concrete', 'concur', 'condense', 'condiment', 'condition', 'condone', 'conducive', 'conductor', 'conduit', 'cone', 'confess', 'confetti', 'confidant', 'confident', 'confider', 'confiding', 'configure', 'confined', 'confining', 'confirm', 'conflict', 'conform', 'confound', 'confront', 'confused', 'confusing', 'confusion', 'congenial', 'congested', 'congrats', 'congress', 'conical', 'conjoined', 'conjure', 'conjuror', 'connected', 'connector', 'consensus', 'consent', 'console', 'consoling', 'consonant', 'constable', 'constant', 'constrain', 'constrict', 'construct', 'consult', 'consumer', 'consuming', 'contact', 'container', 'contempt', 'contend', 'contented', 'contently', 'contents', 'contest', 'context', 'contort', 'contour', 'contrite', 'control', 'contusion', 'convene', 'convent', 'copartner', 'cope', 'copied', 'copier', 'copilot', 'coping', 'copious', 'copper', 'copy', 'coral', 'cork', 'cornball', 'cornbread', 'corncob', 'cornea', 'corned', 'corner', 'cornfield', 'cornflake', 'cornhusk', 'cornmeal', 'cornstalk', 'corny', 'coronary', 'coroner', 'corporal', 'corporate', 'corral', 'correct', 'corridor', 'corrode', 'corroding', 'corrosive', 'corsage', 'corset', 'cortex', 'cosigner', 'cosmetics', 'cosmic', 'cosmos', 'cosponsor', 'cost', 'cottage', 'cotton', 'couch', 'cough', 'could', 'countable', 'countdown', 'counting', 'countless', 'country', 'county', 'courier', 'covenant', 'cover', 'coveted', 'coveting', 'coyness', 'cozily', 'coziness', 'cozy', 'crabbing', 'crabgrass', 'crablike', 'crabmeat', 'cradle', 'cradling', 'crafter', 'craftily', 'craftsman', 'craftwork', 'crafty', 'cramp', 'cranberry', 'crane', 'cranial', 'cranium', 'crank', 'crate', 'crave', 'craving', 'crawfish', 'crawlers', 'crawling', 'crayfish', 'crayon', 'crazed', 'crazily', 'craziness', 'crazy', 'creamed', 'creamer', 'creamlike', 'crease', 'creasing', 'creatable', 'create', 'creation', 'creative', 'creature', 'credible', 'credibly', 'credit', 'creed', 'creme', 'creole', 'crepe', 'crept', 'crescent', 'crested', 'cresting', 'crestless', 'crevice', 'crewless', 'crewman', 'crewmate', 'crib', 'cricket', 'cried', 'crier', 'crimp', 'crimson', 'cringe', 'cringing', 'crinkle', 'crinkly', 'crisped', 'crisping', 'crisply', 'crispness', 'crispy', 'criteria', 'critter', 'croak', 'crock', 'crook', 'croon', 'crop', 'cross', 'crouch', 'crouton', 'crowbar', 'crowd', 'crown', 'crucial', 'crudely', 'crudeness', 'cruelly', 'cruelness', 'cruelty', 'crumb', 'crummiest', 'crummy', 'crumpet', 'crumpled', 'cruncher', 'crunching', 'crunchy', 'crusader', 'crushable', 'crushed', 'crusher', 'crushing', 'crust', 'crux', 'crying', 'cryptic', 'crystal', 'cubbyhole', 'cube', 'cubical', 'cubicle', 'cucumber', 'cuddle', 'cuddly', 'cufflink', 'culinary', 'culminate', 'culpable', 'culprit', 'cultivate', 'cultural', 'culture', 'cupbearer', 'cupcake', 'cupid', 'cupped', 'cupping', 'curable', 'curator', 'curdle', 'cure', 'curfew', 'curing', 'curled', 'curler', 'curliness', 'curling', 'curly', 'curry', 'curse', 'cursive', 'cursor', 'curtain', 'curtly', 'curtsy', 'curvature', 'curve', 'curvy', 'cushy', 'cusp', 'cussed', 'custard', 'custodian', 'custody', 'customary', 'customer', 'customize', 'customs', 'cut', 'cycle', 'cyclic', 'cycling', 'cyclist', 'cylinder', 'cymbal', 'cytoplasm', 'cytoplast', 'dab', 'dad', 'daffodil', 'dagger', 'daily', 'daintily', 'dainty', 'dairy', 'daisy', 'dallying', 'dance', 'dancing', 'dandelion', 'dander', 'dandruff', 'dandy', 'danger', 'dangle', 'dangling', 'daredevil', 'dares', 'daringly', 'darkened', 'darkening', 'darkish', 'darkness', 'darkroom', 'darling', 'darn', 'dart', 'darwinism', 'dash', 'dastardly', 'data', 'datebook', 'dating', 'daughter', 'daunting', 'dawdler', 'dawn', 'daybed', 'daybreak', 'daycare', 'daydream', 'daylight', 'daylong', 'dayroom', 'daytime', 'dazzler', 'dazzling', 'deacon', 'deafening', 'deafness', 'dealer', 'dealing', 'dealmaker', 'dealt', 'dean', 'debatable', 'debate', 'debating', 'debit', 'debrief', 'debtless', 'debtor', 'debug', 'debunk', 'decade', 'decaf', 'decal', 'decathlon', 'decay', 'deceased', 'deceit', 'deceiver', 'deceiving', 'december', 'decency', 'decent', 'deception', 'deceptive', 'decibel', 'decidable', 'decimal', 'decimeter', 'decipher', 'deck', 'declared', 'decline', 'decode', 'decompose', 'decorated', 'decorator', 'decoy', 'decrease', 'decree', 'dedicate', 'dedicator', 'deduce', 'deduct', 'deed', 'deem', 'deepen', 'deeply', 'deepness', 'deface', 'defacing', 'defame', 'default', 'defeat', 'defection', 'defective', 'defendant', 'defender', 'defense', 'defensive', 'deferral', 'deferred', 'defiance', 'defiant', 'defile', 'defiling', 'define', 'definite', 'deflate', 'deflation', 'deflator', 'deflected', 'deflector', 'defog', 'deforest', 'defraud', 'defrost', 'deftly', 'defuse', 'defy', 'degraded', 'degrading', 'degrease', 'degree', 'dehydrate', 'deity', 'dejected', 'delay', 'delegate', 'delegator', 'delete', 'deletion', 'delicacy', 'delicate', 'delicious', 'delighted', 'delirious', 'delirium', 'deliverer', 'delivery', 'delouse', 'delta', 'deluge', 'delusion', 'deluxe', 'demanding', 'demeaning', 'demeanor', 'demise', 'democracy', 'democrat', 'demote', 'demotion', 'demystify', 'denatured', 'deniable', 'denial', 'denim', 'denote', 'dense', 'density', 'dental', 'dentist', 'denture', 'deny', 'deodorant', 'deodorize', 'departed', 'departure', 'depict', 'deplete', 'depletion', 'deplored', 'deploy', 'deport', 'depose', 'depraved', 'depravity', 'deprecate', 'depress', 'deprive', 'depth', 'deputize', 'deputy', 'derail', 'deranged', 'derby', 'derived', 'desecrate', 'deserve', 'deserving', 'designate', 'designed', 'designer', 'designing', 'deskbound', 'desktop', 'deskwork', 'desolate', 'despair', 'despise', 'despite', 'destiny', 'destitute', 'destruct', 'detached', 'detail', 'detection', 'detective', 'detector', 'detention', 'detergent', 'detest', 'detonate', 'detonator', 'detoxify', 'detract', 'deuce', 'devalue', 'deviancy', 'deviant', 'deviate', 'deviation', 'deviator', 'device', 'devious', 'devotedly', 'devotee', 'devotion', 'devourer', 'devouring', 'devoutly', 'dexterity', 'dexterous', 'diabetes', 'diabetic', 'diabolic', 'diagnoses', 'diagnosis', 'diagram', 'dial', 'diameter', 'diaper', 'diaphragm', 'diary', 'dice', 'dicing', 'dictate', 'dictation', 'dictator', 'difficult', 'diffused', 'diffuser', 'diffusion', 'diffusive', 'dig', 'dilation', 'diligence', 'diligent', 'dill', 'dilute', 'dime', 'diminish', 'dimly', 'dimmed', 'dimmer', 'dimness', 'dimple', 'diner', 'dingbat', 'dinghy', 'dinginess', 'dingo', 'dingy', 'dining', 'dinner', 'diocese', 'dioxide', 'diploma', 'dipped', 'dipper', 'dipping', 'directed', 'direction', 'directive', \n    'directly', 'directory', 'direness', 'dirtiness', 'disabled', 'disagree', 'disallow', 'disarm', 'disarray', 'disaster', 'disband', 'disbelief', 'disburse', 'discard', 'discern', 'discharge', 'disclose', 'discolor', 'discount', 'discourse', 'discover', 'discuss', 'disdain', 'disengage', 'disfigure', 'disgrace', 'dish', 'disinfect', 'disjoin', 'disk', 'dislike', 'disliking', 'dislocate', 'dislodge', 'disloyal', 'dismantle', 'dismay', 'dismiss', 'dismount', 'disobey', 'disorder', 'disown', 'disparate', 'disparity', 'dispatch', 'dispense', 'dispersal', 'dispersed', 'disperser', 'displace', 'display', 'displease', 'disposal', 'dispose', 'disprove', 'dispute', 'disregard', 'disrupt', 'dissuade', 'distance', 'distant', 'distaste', 'distill', 'distinct', 'distort', 'distract', 'distress', 'district', 'distrust', 'ditch', 'ditto', 'ditzy', 'dividable', 'divided', 'dividend', 'dividers', 'dividing', 'divinely', 'diving', 'divinity', 'divisible', 'divisibly', 'division', 'divisive', 'divorcee', 'dizziness', 'dizzy', 'doable', 'docile', 'dock', 'doctrine', 'document', 'dodge', 'dodgy', 'doily', 'doing', 'dole', 'dollar', 'dollhouse', 'dollop', 'dolly', 'dolphin', 'domain', 'domelike', 'domestic', 'dominion', 'dominoes', 'donated', 'donation', 'donator', 'donor', 'donut', 'doodle', 'doorbell', 'doorframe', 'doorknob', 'doorman', 'doormat', 'doornail', 'doorpost', 'doorstep', 'doorstop', 'doorway', 'doozy', 'dork', 'dormitory', 'dorsal', 'dosage', 'dose', 'dotted', 'doubling', 'douche', 'dove', 'down', 'dowry', 'doze', 'drab', 'dragging', 'dragonfly', 'dragonish', 'dragster', 'drainable', 'drainage', 'drained', 'drainer', 'drainpipe', 'dramatic', 'dramatize', 'drank', 'drapery', 'drastic', 'draw', 'dreaded', 'dreadful', 'dreadlock', 'dreamboat', 'dreamily', 'dreamland', 'dreamless', 'dreamlike', 'dreamt', 'dreamy', 'drearily', 'dreary', 'drench', 'dress', 'drew', 'dribble', 'dried', 'drier', 'drift', 'driller', 'drilling', 'drinkable', 'drinking', 'dripping', 'drippy', 'drivable', 'driven', 'driver', 'driveway', 'driving', 'drizzle', 'drizzly', 'drone', 'drool', 'droop', 'drop-down', 'dropbox', 'dropkick', 'droplet', 'dropout', 'dropper', 'drove', 'drown', 'drowsily', 'drudge', 'drum', 'dry', 'dubbed', 'dubiously', 'duchess', 'duckbill', 'ducking', 'duckling', 'ducktail', 'ducky', 'duct', 'dude', 'duffel', 'dugout', 'duh', 'duke', 'duller', 'dullness', 'duly', 'dumping', 'dumpling', 'dumpster', 'duo', 'dupe', 'duplex', 'duplicate', 'duplicity', 'durable', 'durably', 'duration', 'duress', 'during', 'dusk', 'dust', 'dutiful', 'duty', 'duvet', 'dwarf', 'dweeb', 'dwelled', 'dweller', 'dwelling', 'dwindle', 'dwindling', 'dynamic', 'dynamite', 'dynasty', 'dyslexia', 'dyslexic', 'each', 'eagle', 'earache', 'eardrum', 'earflap', 'earful', 'earlobe', 'early', 'earmark', 'earmuff', 'earphone', 'earpiece', 'earplugs', 'earring', 'earshot', 'earthen', 'earthlike', 'earthling', 'earthly', 'earthworm', 'earthy', 'earwig', 'easeful', 'easel', 'easiest', 'easily', 'easiness', 'easing', 'eastbound', 'eastcoast', 'easter', 'eastward', 'eatable', 'eaten', 'eatery', 'eating', 'eats', 'ebay', 'ebony', 'ebook', 'ecard', 'eccentric', 'echo', 'eclair', 'eclipse', 'ecologist', 'ecology', 'economic', 'economist', 'economy', 'ecosphere', 'ecosystem', 'edge', 'edginess', 'edging', 'edgy', 'edition', 'editor', 'educated', 'education', 'educator', 'eel', 'effective', 'effects', 'efficient', 'effort', 'eggbeater', 'egging', 'eggnog', 'eggplant', 'eggshell', 'egomaniac', 'egotism', 'egotistic', 'either', 'eject', 'elaborate', 'elastic', 'elated', 'elbow', 'eldercare', 'elderly', 'eldest', 'electable', 'election', 'elective', 'elephant', 'elevate', 'elevating', 'elevation', 'elevator', 'eleven', 'elf', 'eligible', 'eligibly', 'eliminate', 'elite', 'elitism', 'elixir', 'elk', 'ellipse', 'elliptic', 'elm', 'elongated', 'elope', 'eloquence', 'eloquent', 'elsewhere', 'elude', 'elusive', 'elves', 'email', 'embargo', 'embark', 'embassy', 'embattled', 'embellish', 'ember', 'embezzle', 'emblaze', 'emblem', 'embody', 'embolism', 'emboss', 'embroider', 'emcee', 'emerald', 'emergency', 'emission', 'emit', 'emote', 'emoticon', 'emotion', 'empathic', 'empathy', 'emperor', 'emphases', 'emphasis', 'emphasize', 'emphatic', 'empirical', 'employed', 'employee', 'employer', 'emporium', 'empower', 'emptier', 'emptiness', 'empty', 'emu', 'enable', 'enactment', 'enamel', 'enchanted', 'enchilada', 'encircle', 'enclose', 'enclosure', 'encode', 'encore', 'encounter', 'encourage', 'encroach', 'encrust', 'encrypt', 'endanger', 'endeared', 'endearing', 'ended', 'ending', 'endless', 'endnote', 'endocrine', 'endorphin', 'endorse', 'endowment', 'endpoint', 'endurable', 'endurance', 'enduring', 'energetic', 'energize', 'energy', 'enforced', 'enforcer', 'engaged', 'engaging', 'engine', 'engorge', 'engraved', 'engraver', 'engraving', 'engross', 'engulf', 'enhance', 'enigmatic', 'enjoyable', 'enjoyably', 'enjoyer', 'enjoying', 'enjoyment', 'enlarged', 'enlarging', 'enlighten', 'enlisted', 'enquirer', 'enrage', 'enrich', 'enroll', 'enslave', 'ensnare', 'ensure', 'entail', 'entangled', 'entering', 'entertain', 'enticing', 'entire', 'entitle', 'entity', 'entomb', 'entourage', 'entrap', 'entree', 'entrench', 'entrust', 'entryway', 'entwine', 'enunciate', 'envelope', 'enviable', 'enviably', 'envious', 'envision', 'envoy', 'envy', 'enzyme', 'epic', 'epidemic', 'epidermal', 'epidermis', 'epidural', 'epilepsy', 'epileptic', 'epilogue', 'epiphany', 'episode', 'equal', 'equate', 'equation', 'equator', 'equinox', 'equipment', 'equity', 'equivocal', 'eradicate', 'erasable', 'erased', 'eraser', 'erasure', 'ergonomic', 'errand', 'errant', 'erratic', 'error', 'erupt', 'escalate', 'escalator', 'escapable', 'escapade', 'escapist', 'escargot', 'eskimo', 'esophagus', 'espionage', 'espresso', 'esquire', 'essay', 'essence', 'essential', 'establish', 'estate', 'esteemed', 'estimate', 'estimator', 'estranged', 'estrogen', 'etching', 'eternal', 'eternity', 'ethanol', 'ether', 'ethically', 'ethics', 'euphemism', 'evacuate', 'evacuee', 'evade', 'evaluate', 'evaluator', 'evaporate', 'evasion', 'evasive', 'even', 'everglade', 'evergreen', 'everybody', 'everyday', 'everyone', 'evict', 'evidence', 'evident', 'evil', 'evoke', 'evolution', 'evolve', 'exact', 'exalted', 'example', 'excavate', 'excavator', 'exceeding', 'exception', 'excess', 'exchange', 'excitable', 'exciting', 'exclaim', 'exclude', 'excluding', 'exclusion', 'exclusive', 'excretion', 'excretory', 'excursion', 'excusable', 'excusably', 'excuse', 'exemplary', 'exemplify', 'exemption', 'exerciser', 'exert', 'exes', 'exfoliate', 'exhale', 'exhaust', 'exhume', 'exile', 'existing', 'exit', 'exodus', 'exonerate', 'exorcism', 'exorcist', 'expand', 'expanse', 'expansion', 'expansive', 'expectant', 'expedited', 'expediter', 'expel', 'expend', 'expenses', 'expensive', 'expert', 'expire', 'expiring', 'explain', 'expletive', 'explicit', 'explode', 'exploit', 'explore', 'exploring', 'exponent', 'exporter', 'exposable', 'expose', 'exposure', 'express', 'expulsion', 'exquisite', 'extended', 'extending', 'extent', 'extenuate', 'exterior', 'external', 'extinct', 'extortion', 'extradite', 'extras', 'extrovert', 'extrude', 'extruding', 'exuberant', 'fable', 'fabric', 'fabulous', 'facebook', 'facecloth', 'facedown', 'faceless', 'facelift', 'faceplate', 'faceted', 'facial', 'facility', 'facing', 'facsimile', 'faction', 'factoid', 'factor', 'factsheet', 'factual', 'faculty', 'fade', 'fading', 'failing', 'falcon', 'fall', 'FALSE', 'falsify', 'fame', 'familiar', 'family', 'famine', 'famished', 'fanatic', 'fancied', 'fanciness', 'fancy', 'fanfare', 'fang', 'fanning', 'fantasize', 'fantastic', 'fantasy', 'fascism', 'fastball', 'faster', 'fasting', 'fastness', 'faucet', 'favorable', 'favorably', 'favored', 'favoring', 'favorite', 'fax', 'feast', 'federal', 'fedora', 'feeble', 'feed', 'feel', 'feisty', 'feline', 'felt-tip', 'feminine', 'feminism', 'feminist', 'feminize', 'femur', 'fence', 'fencing', 'fender', 'ferment', 'fernlike', 'ferocious', 'ferocity', 'ferret', 'ferris', 'ferry', 'fervor', 'fester', 'festival', 'festive', 'festivity', 'fetal', 'fetch', 'fever', 'fiber', 'fiction', 'fiddle', 'fiddling', 'fidelity', 'fidgeting', 'fidgety', 'fifteen', 'fifth', 'fiftieth', 'fifty', 'figment', 'figure', 'figurine', 'filing', 'filled', 'filler', 'filling', 'film', 'filter', 'filth', 'filtrate', 'finale', 'finalist', 'finalize', 'finally', 'finance', 'financial', 'finch', 'fineness', 'finer', 'finicky', 'finished', 'finisher', 'finishing', 'finite', 'finless', 'finlike', 'fiscally', 'fit', 'five', 'flaccid', 'flagman', 'flagpole', 'flagship', 'flagstick', 'flagstone', 'flail', 'flakily', 'flaky', 'flame', 'flammable', 'flanked', 'flanking', 'flannels', 'flap', 'flaring', 'flashback', 'flashbulb', 'flashcard', 'flashily', 'flashing', 'flashy', 'flask', 'flatbed', 'flatfoot', 'flatly', 'flatness', 'flatten', 'flattered', 'flatterer', 'flattery', 'flattop', 'flatware', 'flatworm', 'flavored', 'flavorful', 'flavoring', 'flaxseed', 'fled', 'fleshed', 'fleshy', 'flick', 'flier', 'flight', 'flinch', 'fling', 'flint', 'flip', 'flirt', 'float', 'flock', 'flogging', 'flop', 'floral', 'florist', 'floss', 'flounder', 'flyable', 'flyaway', 'flyer', 'flying', 'flyover', 'flypaper', 'foam', 'foe', 'fog', 'foil', 'folic', 'folk', 'follicle', 'follow', 'fondling', 'fondly', 'fondness', 'fondue', 'font', 'food', 'fool', 'footage', 'football', 'footbath', 'footboard', 'footer', 'footgear', 'foothill', 'foothold', 'footing', 'footless', 'footman', 'footnote', 'footpad', 'footpath', 'footprint', 'footrest', 'footsie', 'footsore', 'footwear', 'footwork', 'fossil', 'foster', 'founder', 'founding', 'fountain', 'fox', 'foyer', 'fraction', 'fracture', 'fragile', 'fragility', 'fragment', 'fragrance', 'fragrant', 'frail', 'frame', 'framing', 'frantic', 'fraternal', 'frayed', 'fraying', 'frays', 'freckled', 'freckles', 'freebase', 'freebee', 'freebie', 'freedom', 'freefall', 'freehand', 'freeing', 'freeload', 'freely', \n    'freemason', 'freeness', 'freestyle', 'freeware', 'freeway', 'freewill', 'freezable', 'freezing', 'freight', 'french', 'frenzied', 'frenzy', 'frequency', 'frequent', 'fresh', 'fretful', 'fretted', 'friction', 'friday', 'fridge', 'fried', 'friend', 'frighten', 'frightful', 'frigidity', 'frigidly', 'frill', 'fringe', 'frisbee', 'frisk', 'fritter', 'frivolous', 'frolic', 'from', 'front', 'frostbite', 'frosted', 'frostily', 'frosting', 'frostlike', 'frosty', 'froth', 'frown', 'frozen', 'fructose', 'frugality', 'frugally', 'fruit', 'frustrate', 'frying', 'gab', 'gaffe', 'gag', 'gainfully', 'gaining', 'gains', 'gala', 'gallantly', 'galleria', 'gallery', 'galley', 'gallon', 'gallows', 'gallstone', 'galore', 'galvanize', 'gambling', 'game', 'gaming', 'gamma', 'gander', 'gangly', 'gangrene', 'gangway', 'gap', 'garage', 'garbage', 'garden', 'gargle', 'garland', 'garlic', 'garment', 'garnet', 'garnish', 'garter', 'gas', 'gatherer', 'gathering', 'gating', 'gauging', 'gauntlet', 'gauze', 'gave', 'gawk', 'gazing', 'gear', 'gecko', 'geek', 'geiger', 'gem', 'gender', 'generic', 'generous', 'genetics', 'genre', 'gentile', 'gentleman', 'gently', 'gents', 'geography', 'geologic', 'geologist', 'geology', 'geometric', 'geometry', 'geranium', 'gerbil', 'geriatric', 'germicide', 'germinate', 'germless', 'germproof', 'gestate', 'gestation', 'gesture', 'getaway', 'getting', 'getup', 'giant', 'gibberish', 'giblet', 'giddily', 'giddiness', 'giddy', 'gift', 'gigabyte', 'gigahertz', 'gigantic', 'giggle', 'giggling', 'giggly', 'gigolo', 'gilled', 'gills', 'gimmick', 'girdle', 'giveaway', 'given', 'giver', 'giving', 'gizmo', 'gizzard', 'glacial', 'glacier', 'glade', 'gladiator', 'gladly', 'glamorous', 'glamour', 'glance', 'glancing', 'glandular', 'glare', 'glaring', 'glass', 'glaucoma', 'glazing', 'gleaming', 'gleeful', 'glider', 'gliding', 'glimmer', 'glimpse', 'glisten', 'glitch', 'glitter', 'glitzy', 'gloater', 'gloating', 'gloomily', 'gloomy', 'glorified', 'glorifier', 'glorify', 'glorious', 'glory', 'gloss', 'glove', 'glowing', 'glowworm', 'glucose', 'glue', 'gluten', 'glutinous', 'glutton', 'gnarly', 'gnat', 'goal', 'goatskin', 'goes', 'goggles', 'going', 'goldfish', 'goldmine', 'goldsmith', 'golf', 'goliath', 'gonad', 'gondola', 'gone', 'gong', 'good', 'gooey', 'goofball', 'goofiness', 'goofy', 'google', 'goon', 'gopher', 'gore', 'gorged', 'gorgeous', 'gory', 'gosling', 'gossip', 'gothic', 'gotten', 'gout', 'gown', 'grab', 'graceful', 'graceless', 'gracious', 'gradation', 'graded', 'grader', 'gradient', 'grading', 'gradually', 'graduate', 'graffiti', 'grafted', 'grafting', 'grain', 'granddad', 'grandkid', 'grandly', 'grandma', 'grandpa', 'grandson', 'granite', 'granny', 'granola', 'grant', 'granular', 'grape', 'graph', 'grapple', 'grappling', 'grasp', 'grass', 'gratified', 'gratify', 'grating', 'gratitude', 'gratuity', 'gravel', 'graveness', 'graves', 'graveyard', 'gravitate', 'gravity', 'gravy', 'gray', 'grazing', 'greasily', 'greedily', 'greedless', 'greedy', 'green', 'greeter', 'greeting', 'grew', 'greyhound', 'grid', 'grief', 'grievance', 'grieving', 'grievous', 'grill', 'grimace', 'grimacing', 'grime', 'griminess', 'grimy', 'grinch', 'grinning', 'grip', 'gristle', 'grit', 'groggily', 'groggy', 'groin', 'groom', 'groove', 'grooving', 'groovy', 'grope', 'ground', 'grouped', 'grout', 'grove', 'grower', 'growing', 'growl', 'grub', 'grudge', 'grudging', 'grueling', 'gruffly', 'grumble', 'grumbling', 'grumbly', 'grumpily', 'grunge', 'grunt', 'guacamole', 'guidable', 'guidance', 'guide', 'guiding', 'guileless', 'guise', 'gulf', 'gullible', 'gully', 'gulp', 'gumball', 'gumdrop', 'gumminess', 'gumming', 'gummy', 'gurgle', 'gurgling', 'guru', 'gush', 'gusto', 'gusty', 'gutless', 'guts', 'gutter', 'guy', 'guzzler', 'gyration', 'habitable', 'habitant', 'habitat', 'habitual', 'hacked', 'hacker', 'hacking', 'hacksaw', 'had', 'haggler', 'haiku', 'half', 'halogen', 'halt', 'halved', 'halves', 'hamburger', 'hamlet', 'hammock', 'hamper', 'hamster', 'hamstring', 'handbag', 'handball', 'handbook', 'handbrake', 'handcart', 'handclap', 'handclasp', 'handcraft', 'handcuff', 'handed', 'handful', 'handgrip', 'handgun', 'handheld', 'handiness', 'handiwork', 'handlebar', 'handled', 'handler', 'handling', 'handmade', 'handoff', 'handpick', 'handprint', 'handrail', 'handsaw', 'handset', 'handsfree', 'handshake', 'handstand', 'handwash', 'handwork', 'handwoven', 'handwrite', 'handyman', 'hangnail', 'hangout', 'hangover', 'hangup', 'hankering', 'hankie', 'hanky', 'haphazard', 'happening', 'happier', 'happiest', 'happily', 'happiness', 'happy', 'harbor', 'hardcopy', 'hardcore', 'hardcover', 'harddisk', 'hardened', 'hardener', 'hardening', 'hardhat', 'hardhead', 'hardiness', 'hardly', 'hardness', 'hardship', 'hardware', 'hardwired', 'hardwood', 'hardy', 'harmful', 'harmless', 'harmonica', 'harmonics', 'harmonize', 'harmony', 'harness', 'harpist', 'harsh', 'harvest', 'hash', 'hassle', 'haste', 'hastily', 'hastiness', 'hasty', 'hatbox', 'hatchback', 'hatchery', 'hatchet', 'hatching', 'hatchling', 'hate', 'hatless', 'hatred', 'haunt', 'haven', 'hazard', 'hazelnut', 'hazily', 'haziness', 'hazing', 'hazy', 'headache', 'headband', 'headboard', 'headcount', 'headdress', 'headed', 'header', 'headfirst', 'headgear', 'heading', 'headlamp', 'headless', 'headlock', 'headphone', 'headpiece', 'headrest', 'headroom', 'headscarf', 'headset', 'headsman', 'headstand', 'headstone', 'headway', 'headwear', 'heap', 'heat', 'heave', 'heavily', 'heaviness', 'heaving', 'hedge', 'hedging', 'heftiness', 'hefty', 'helium', 'helmet', 'helper', 'helpful', 'helping', 'helpless', 'helpline', 'hemlock', 'hemstitch', 'hence', 'henchman', 'henna', 'herald', 'herbal', 'herbicide', 'herbs', 'heritage', 'hermit', 'heroics', 'heroism', 'herring', 'herself', 'hertz', 'hesitancy', 'hesitant', 'hesitate', 'hexagon', 'hexagram', 'hubcap', 'huddle', 'huddling', 'huff', 'hug', 'hula', 'hulk', 'hull', 'human', 'humble', 'humbling', 'humbly', 'humid', 'humiliate', 'humility', 'humming', 'hummus', 'humongous', 'humorist', 'humorless', 'humorous', 'humpback', 'humped', 'humvee', 'hunchback', 'hundredth', 'hunger', 'hungrily', 'hungry', 'hunk', 'hunter', 'hunting', 'huntress', 'huntsman', 'hurdle', 'hurled', 'hurler', 'hurling', 'hurray', 'hurricane', 'hurried', 'hurry', 'hurt', 'husband', 'hush', 'husked', 'huskiness', 'hut', 'hybrid', 'hydrant', 'hydrated', 'hydration', 'hydrogen', 'hydroxide', 'hyperlink', 'hypertext', 'hyphen', 'hypnoses', 'hypnosis', 'hypnotic', 'hypnotism', 'hypnotist', 'hypnotize', 'hypocrisy', 'hypocrite', 'ibuprofen', 'ice', 'iciness', 'icing', 'icky', 'icon', 'icy', 'idealism', 'idealist', 'idealize', 'ideally', 'idealness', 'identical', 'identify', 'identity', 'ideology', 'idiocy', 'idiom', 'idly', 'igloo', 'ignition', 'ignore', 'iguana', 'illicitly', 'illusion', 'illusive', 'image', 'imaginary', 'imagines', 'imaging', 'imbecile', 'imitate', 'imitation', 'immature', 'immerse', 'immersion', 'imminent', 'immobile', 'immodest', 'immorally', 'immortal', 'immovable', 'immovably', 'immunity', 'immunize', 'impaired', 'impale', 'impart', 'impatient', 'impeach', 'impeding', 'impending', 'imperfect', 'imperial', 'impish', 'implant', 'implement', 'implicate', 'implicit', 'implode', 'implosion', 'implosive', 'imply', 'impolite', 'important', 'importer', 'impose', 'imposing', 'impotence', 'impotency', 'impotent', 'impound', 'imprecise', 'imprint', 'imprison', 'impromptu', 'improper', 'improve', 'improving', 'improvise', 'imprudent', 'impulse', 'impulsive', 'impure', 'impurity', 'iodine', 'iodize', 'ion', 'ipad', 'iphone', 'ipod', 'irate', 'irk', 'iron', 'irregular', 'irrigate', 'irritable', 'irritably', 'irritant', 'irritate', 'islamic', 'islamist', 'isolated', 'isolating', 'isolation', 'isotope', 'issue', 'issuing', 'italicize', 'italics', 'item', 'itinerary', 'itunes', 'ivory', 'ivy', 'jab', 'jackal', 'jacket', 'jackknife', 'jackpot', 'jailbird', 'jailbreak', 'jailer', 'jailhouse', 'jalapeno', 'jam', 'janitor', 'january', 'jargon', 'jarring', 'jasmine', 'jaundice', 'jaunt', 'java', 'jawed', 'jawless', 'jawline', 'jaws', 'jaybird', 'jaywalker', 'jazz', 'jeep', 'jeeringly', 'jellied', 'jelly', 'jersey', 'jester', 'jet', 'jiffy', 'jigsaw', 'jimmy', 'jingle', 'jingling', 'jinx', 'jitters', 'jittery', 'job', 'jockey', 'jockstrap', 'jogger', 'jogging', 'john', 'joining', 'jokester', 'jokingly', 'jolliness', 'jolly', 'jolt', 'jot', 'jovial', 'joyfully', 'joylessly', 'joyous', 'joyride', 'joystick', 'jubilance', 'jubilant', 'judge', 'judgingly', 'judicial', 'judiciary', 'judo', 'juggle', 'juggling', 'jugular', 'juice', 'juiciness', 'juicy', 'jujitsu', 'jukebox', 'july', 'jumble', 'jumbo', 'jump', 'junction', 'juncture', 'june', 'junior', 'juniper', 'junkie', 'junkman', 'junkyard', 'jurist', 'juror', 'jury', 'justice', 'justifier', 'justify', 'justly', 'justness', 'juvenile', 'kabob', 'kangaroo', 'karaoke', 'karate', 'karma', 'kebab', 'keenly', 'keenness', 'keep', 'keg', 'kelp', 'kennel', 'kept', 'kerchief', 'kerosene', 'kettle', 'kick', 'kiln', 'kilobyte', 'kilogram', 'kilometer', 'kilowatt', 'kilt', 'kimono', 'kindle', 'kindling', 'kindly', 'kindness', 'kindred', 'kinetic', 'kinfolk', 'king', 'kinship', 'kinsman', 'kinswoman', 'kissable', 'kisser', 'kissing', 'kitchen', 'kite', 'kitten', 'kitty', 'kiwi', 'kleenex', 'knapsack', 'knee', 'knelt', 'knickers', 'knoll', 'koala', 'kooky', 'kosher', 'krypton', 'kudos', 'kung', 'labored', 'laborer', 'laboring', 'laborious', 'labrador', 'ladder', 'ladies', 'ladle', 'ladybug', 'ladylike', 'lagged', 'lagging', 'lagoon', 'lair', 'lake', 'lance', 'landed', 'landfall', 'landfill', 'landing', 'landlady', 'landless', 'landline', 'landlord', 'landmark', 'landmass', 'landmine', 'landowner', 'landscape', 'landside', 'landslide', 'language', 'lankiness', 'lanky', 'lantern', 'lapdog', 'lapel', 'lapped', 'lapping', 'laptop', 'lard', 'large', 'lark', 'lash', 'lasso', 'last', 'latch', 'late', 'lather', 'latitude', 'latrine', 'latter', 'latticed', 'launch', 'launder', 'laundry', \n    'laurel', 'lavender', 'lavish', 'laxative', 'lazily', 'laziness', 'lazy', 'lecturer', 'left', 'legacy', 'legal', 'legend', 'legged', 'leggings', 'legible', 'legibly', 'legislate', 'lego', 'legroom', 'legume', 'legwarmer', 'legwork', 'lemon', 'lend', 'length', 'lens', 'lent', 'leotard', 'lesser', 'letdown', 'lethargic', 'lethargy', 'letter', 'lettuce', 'level', 'leverage', 'levers', 'levitate', 'levitator', 'liability', 'liable', 'liberty', 'librarian', 'library', 'licking', 'licorice', 'lid', 'life', 'lifter', 'lifting', 'liftoff', 'ligament', 'likely', 'likeness', 'likewise', 'liking', 'lilac', 'lilly', 'lily', 'limb', 'limeade', 'limelight', 'limes', 'limit', 'limping', 'limpness', 'line', 'lingo', 'linguini', 'linguist', 'lining', 'linked', 'linoleum', 'linseed', 'lint', 'lion', 'lip', 'liquefy', 'liqueur', 'liquid', 'lisp', 'list', 'litigate', 'litigator', 'litmus', 'litter', 'little', 'livable', 'lived', 'lively', 'liver', 'livestock', 'lividly', 'living', 'lizard', 'lubricant', 'lubricate', 'lucid', 'luckily', 'luckiness', 'luckless', 'lucrative', 'ludicrous', 'lugged', 'lukewarm', 'lullaby', 'lumber', 'luminance', 'luminous', 'lumpiness', 'lumping', 'lumpish', 'lunacy', 'lunar', 'lunchbox', 'luncheon', 'lunchroom', 'lunchtime', 'lung', 'lurch', 'lure', 'luridness', 'lurk', 'lushly', 'lushness', 'luster', 'lustfully', 'lustily', 'lustiness', 'lustrous', 'lusty', 'luxurious', 'luxury', 'lying', 'lyrically', 'lyricism', 'lyricist', 'lyrics', 'macarena', 'macaroni', 'macaw', 'mace', 'machine', 'machinist', 'magazine', 'magenta', 'maggot', 'magical', 'magician', 'magma', 'magnesium', 'magnetic', 'magnetism', 'magnetize', 'magnifier', 'magnify', 'magnitude', 'magnolia', 'mahogany', 'maimed', 'majestic', 'majesty', 'majorette', 'majority', 'makeover', 'maker', 'makeshift', 'making', 'malformed', 'malt', 'mama', 'mammal', 'mammary', 'mammogram', 'manager', 'managing', 'manatee', 'mandarin', 'mandate', 'mandatory', 'mandolin', 'manger', 'mangle', 'mango', 'mangy', 'manhandle', 'manhole', 'manhood', 'manhunt', 'manicotti', 'manicure', 'manifesto', 'manila', 'mankind', 'manlike', 'manliness', 'manly', 'manmade', 'manned', 'mannish', 'manor', 'manpower', 'mantis', 'mantra', 'manual', 'many', 'map', 'marathon', 'marauding', 'marbled', 'marbles', 'marbling', 'march', 'mardi', 'margarine', 'margarita', 'margin', 'marigold', 'marina', 'marine', 'marital', 'maritime', 'marlin', 'marmalade', 'maroon', 'married', 'marrow', 'marry', 'marshland', 'marshy', 'marsupial', 'marvelous', 'marxism', 'mascot', 'masculine', 'mashed', 'mashing', 'massager', 'masses', 'massive', 'mastiff', 'matador', 'matchbook', 'matchbox', 'matcher', 'matching', 'matchless', 'material', 'maternal', 'maternity', 'math', 'mating', 'matriarch', 'matrimony', 'matrix', 'matron', 'matted', 'matter', 'maturely', 'maturing', 'maturity', 'mauve', 'maverick', 'maximize', 'maximum', 'maybe', 'mayday', 'mayflower', 'moaner', 'moaning', 'mobile', 'mobility', 'mobilize', 'mobster', 'mocha', 'mocker', 'mockup', 'modified', 'modify', 'modular', 'modulator', 'module', 'moisten', 'moistness', 'moisture', 'molar', 'molasses', 'mold', 'molecular', 'molecule', 'molehill', 'mollusk', 'mom', 'monastery', 'monday', 'monetary', 'monetize', 'moneybags', 'moneyless', 'moneywise', 'mongoose', 'mongrel', 'monitor', 'monkhood', 'monogamy', 'monogram', 'monologue', 'monopoly', 'monorail', 'monotone', 'monotype', 'monoxide', 'monsieur', 'monsoon', 'monstrous', 'monthly', 'monument', 'moocher', 'moodiness', 'moody', 'mooing', 'moonbeam', 'mooned', 'moonlight', 'moonlike', 'moonlit', 'moonrise', 'moonscape', 'moonshine', 'moonstone', 'moonwalk', 'mop', 'morale', 'morality', 'morally', 'morbidity', 'morbidly', 'morphine', 'morphing', 'morse', 'mortality', 'mortally', 'mortician', 'mortified', 'mortify', 'mortuary', 'mosaic', 'mossy', 'most', 'mothball', 'mothproof', 'motion', 'motivate', 'motivator', 'motive', 'motocross', 'motor', 'motto', 'mountable', 'mountain', 'mounted', 'mounting', 'mourner', 'mournful', 'mouse', 'mousiness', 'moustache', 'mousy', 'mouth', 'movable', 'move', 'movie', 'moving', 'mower', 'mowing', 'much', 'muck', 'mud', 'mug', 'mulberry', 'mulch', 'mule', 'mulled', 'mullets', 'multiple', 'multiply', 'multitask', 'multitude', 'mumble', 'mumbling', 'mumbo', 'mummified', 'mummify', 'mummy', 'mumps', 'munchkin', 'mundane', 'municipal', 'muppet', 'mural', 'murkiness', 'murky', 'murmuring', 'muscular', 'museum', 'mushily', 'mushiness', 'mushroom', 'mushy', 'music', 'musket', 'muskiness', 'musky', 'mustang', 'mustard', 'muster', 'mustiness', 'musty', 'mutable', 'mutate', 'mutation', 'mute', 'mutilated', 'mutilator', 'mutiny', 'mutt', 'mutual', 'muzzle', 'myself', 'myspace', 'mystified', 'mystify', 'myth', 'nacho', 'nag', 'nail', 'name', 'naming', 'nanny', 'nanometer', 'nape', 'napkin', 'napped', 'napping', 'nappy', 'narrow', 'nastily', 'nastiness', 'national', 'native', 'nativity', 'natural', 'nature', 'naturist', 'nautical', 'navigate', 'navigator', 'navy', 'nearby', 'nearest', 'nearly', 'nearness', 'neatly', 'neatness', 'nebula', 'nebulizer', 'nectar', 'negate', 'negation', 'negative', 'neglector', 'negligee', 'negligent', 'negotiate', 'nemeses', 'nemesis', 'neon', 'nephew', 'nerd', 'nervous', 'nervy', 'nest', 'net', 'neurology', 'neuron', 'neurosis', 'neurotic', 'neuter', 'neutron', 'never', 'next', 'nibble', 'nickname', 'nicotine', 'niece', 'nifty', 'nimble', 'nimbly', 'nineteen', 'ninetieth', 'ninja', 'nintendo', 'ninth', 'nuclear', 'nuclei', 'nucleus', 'nugget', 'nullify', 'number', 'numbing', 'numbly', 'numbness', 'numeral', 'numerate', 'numerator', 'numeric', 'numerous', 'nuptials', 'nursery', 'nursing', 'nurture', 'nutcase', 'nutlike', 'nutmeg', 'nutrient', 'nutshell', 'nuttiness', 'nutty', 'nuzzle', 'nylon', 'oaf', 'oak', 'oasis', 'oat', 'obedience', 'obedient', 'obituary', 'object', 'obligate', 'obliged', 'oblivion', 'oblivious', 'oblong', 'obnoxious', 'oboe', 'obscure', 'obscurity', 'observant', 'observer', 'observing', 'obsessed', 'obsession', 'obsessive', 'obsolete', 'obstacle', 'obstinate', 'obstruct', 'obtain', 'obtrusive', 'obtuse', 'obvious', 'occultist', 'occupancy', 'occupant', 'occupier', 'occupy', 'ocean', 'ocelot', 'octagon', 'octane', 'october', 'octopus', 'ogle', 'oil', 'oink', 'ointment', 'okay', 'old', 'olive', 'olympics', 'omega', 'omen', 'ominous', 'omission', 'omit', 'omnivore', 'onboard', 'oncoming', 'ongoing', 'onion', 'online', 'onlooker', 'only', 'onscreen', 'onset', 'onshore', 'onslaught', 'onstage', 'onto', 'onward', 'onyx', 'oops', 'ooze', 'oozy', 'opacity', 'opal', 'open', 'operable', 'operate', 'operating', 'operation', 'operative', 'operator', 'opium', 'opossum', 'opponent', 'oppose', 'opposing', 'opposite', 'oppressed', 'oppressor', 'opt', 'opulently', 'osmosis', 'other', 'otter', 'ouch', 'ought', 'ounce', 'outage', 'outback', 'outbid', 'outboard', 'outbound', 'outbreak', 'outburst', 'outcast', 'outclass', 'outcome', 'outdated', 'outdoors', 'outer', 'outfield', 'outfit', 'outflank', 'outgoing', 'outgrow', 'outhouse', 'outing', 'outlast', 'outlet', 'outline', 'outlook', 'outlying', 'outmatch', 'outmost', 'outnumber', 'outplayed', 'outpost', 'outpour', 'output', 'outrage', 'outrank', 'outreach', 'outright', 'outscore', 'outsell', 'outshine', 'outshoot', 'outsider', 'outskirts', 'outsmart', 'outsource', 'outspoken', 'outtakes', 'outthink', 'outward', 'outweigh', 'outwit', 'oval', 'ovary', 'oven', 'overact', 'overall', 'overarch', 'overbid', 'overbill', 'overbite', 'overblown', 'overboard', 'overbook', 'overbuilt', 'overcast', 'overcoat', 'overcome', 'overcook', 'overcrowd', 'overdraft', 'overdrawn', 'overdress', 'overdrive', 'overdue', 'overeager', 'overeater', 'overexert', 'overfed', 'overfeed', 'overfill', 'overflow', 'overfull', 'overgrown', 'overhand', 'overhang', 'overhaul', 'overhead', 'overhear', 'overheat', 'overhung', 'overjoyed', 'overkill', 'overlabor', 'overlaid', 'overlap', 'overlay', 'overload', 'overlook', 'overlord', 'overlying', 'overnight', 'overpass', 'overpay', 'overplant', 'overplay', 'overpower', 'overprice', 'overrate', 'overreach', 'overreact', 'override', 'overripe', 'overrule', 'overrun', 'overshoot', 'overshot', 'oversight', 'oversized', 'oversleep', 'oversold', 'overspend', 'overstate', 'overstay', 'overstep', 'overstock', 'overstuff', 'oversweet', 'overtake', 'overthrow', 'overtime', 'overtly', 'overtone', 'overture', 'overturn', 'overuse', 'overvalue', 'overview', 'overwrite', 'owl', 'oxford', 'oxidant', 'oxidation', 'oxidize', 'oxidizing', 'oxygen', 'oxymoron', 'oyster', 'ozone', 'paced', 'pacemaker', 'pacific', 'pacifier', 'pacifism', 'pacifist', 'pacify', 'padded', 'padding', 'paddle', 'paddling', 'padlock', 'pagan', 'pager', 'paging', 'pajamas', 'palace', 'palatable', 'palm', 'palpable', 'palpitate', 'paltry', 'pampered', 'pamperer', 'pampers', 'pamphlet', 'panama', 'pancake', 'pancreas', 'panda', 'pandemic', 'pang', 'panhandle', 'panic', 'panning', 'panorama', 'panoramic', 'panther', 'pantomime', 'pantry', 'pants', 'pantyhose', 'paparazzi', 'papaya', 'paper', 'paprika', 'papyrus', 'parabola', 'parachute', 'parade', 'paradox', 'paragraph', 'parakeet', 'paralegal', 'paralyses', 'paralysis', 'paralyze', 'paramedic', 'parameter', 'paramount', 'parasail', 'parasite', 'parasitic', 'parcel', 'parched', 'parchment', 'pardon', 'parish', 'parka', 'parking', 'parkway', 'parlor', 'parmesan', 'parole', 'parrot', 'parsley', 'parsnip', 'partake', 'parted', 'parting', 'partition', 'partly', 'partner', 'partridge', 'party', 'passable', 'passably', 'passage', 'passcode', 'passenger', 'passerby', 'passing', 'passion', 'passive', 'passivism', 'passover', 'passport', 'password', 'pasta', 'pasted', 'pastel', 'pastime', 'pastor', 'pastrami', 'pasture', 'pasty', 'patchwork', 'patchy', 'paternal', 'paternity', 'path', 'patience', 'patient', 'patio', 'patriarch', 'patriot', 'patrol', 'patronage', 'patronize', 'pauper', 'pavement', 'paver', 'pavestone', 'pavilion', 'paving', 'pawing', 'payable', 'payback', 'paycheck', 'payday', \n    'payee', 'payer', 'paying', 'payment', 'payphone', 'payroll', 'pebble', 'pebbly', 'pecan', 'pectin', 'peculiar', 'peddling', 'pediatric', 'pedicure', 'pedigree', 'pedometer', 'pegboard', 'pelican', 'pellet', 'pelt', 'pelvis', 'penalize', 'penalty', 'pencil', 'pendant', 'pending', 'penholder', 'penknife', 'pennant', 'penniless', 'penny', 'penpal', 'pension', 'pentagon', 'pentagram', 'pep', 'perceive', 'percent', 'perch', 'percolate', 'perennial', 'perfected', 'perfectly', 'perfume', 'periscope', 'perish', 'perjurer', 'perjury', 'perkiness', 'perky', 'perm', 'peroxide', 'perpetual', 'perplexed', 'persecute', 'persevere', 'persuaded', 'persuader', 'pesky', 'peso', 'pessimism', 'pessimist', 'pester', 'pesticide', 'petal', 'petite', 'petition', 'petri', 'petroleum', 'petted', 'petticoat', 'pettiness', 'petty', 'petunia', 'phantom', 'phobia', 'phoenix', 'phonebook', 'phoney', 'phonics', 'phoniness', 'phony', 'phosphate', 'photo', 'phrase', 'phrasing', 'placard', 'placate', 'placidly', 'plank', 'planner', 'plant', 'plasma', 'plaster', 'plastic', 'plated', 'platform', 'plating', 'platinum', 'platonic', 'platter', 'platypus', 'plausible', 'plausibly', 'playable', 'playback', 'player', 'playful', 'playgroup', 'playhouse', 'playing', 'playlist', 'playmaker', 'playmate', 'playoff', 'playpen', 'playroom', 'playset', 'plaything', 'playtime', 'plaza', 'pleading', 'pleat', 'pledge', 'plentiful', 'plenty', 'plethora', 'plexiglas', 'pliable', 'plod', 'plop', 'plot', 'plow', 'ploy', 'pluck', 'plug', 'plunder', 'plunging', 'plural', 'plus', 'plutonium', 'plywood', 'poach', 'pod', 'poem', 'poet', 'pogo', 'pointed', 'pointer', 'pointing', 'pointless', 'pointy', 'poise', 'poison', 'poker', 'poking', 'polar', 'police', 'policy', 'polio', 'polish', 'politely', 'polka', 'polo', 'polyester', 'polygon', 'polygraph', 'polymer', 'poncho', 'pond', 'pony', 'popcorn', 'pope', 'poplar', 'popper', 'poppy', 'popsicle', 'populace', 'popular', 'populate', 'porcupine', 'pork', 'porous', 'porridge', 'portable', 'portal', 'portfolio', 'porthole', 'portion', 'portly', 'portside', 'poser', 'posh', 'posing', 'possible', 'possibly', 'possum', 'postage', 'postal', 'postbox', 'postcard', 'posted', 'poster', 'posting', 'postnasal', 'posture', 'postwar', 'pouch', 'pounce', 'pouncing', 'pound', 'pouring', 'pout', 'powdered', 'powdering', 'powdery', 'power', 'powwow', 'pox', 'praising', 'prance', 'prancing', 'pranker', 'prankish', 'prankster', 'prayer', 'praying', 'preacher', 'preaching', 'preachy', 'preamble', 'precinct', 'precise', 'precision', 'precook', 'precut', 'predator', 'predefine', 'predict', 'preface', 'prefix', 'preflight', 'preformed', 'pregame', 'pregnancy', 'pregnant', 'preheated', 'prelaunch', 'prelaw', 'prelude', 'premiere', 'premises', 'premium', 'prenatal', 'preoccupy', 'preorder', 'prepaid', 'prepay', 'preplan', 'preppy', 'preschool', 'prescribe', 'preseason', 'preset', 'preshow', 'president', 'presoak', 'press', 'presume', 'presuming', 'preteen', 'pretended', 'pretender', 'pretense', 'pretext', 'pretty', 'pretzel', 'prevail', 'prevalent', 'prevent', 'preview', 'previous', 'prewar', 'prewashed', 'prideful', 'pried', 'primal', 'primarily', 'primary', 'primate', 'primer', 'primp', 'princess', 'print', 'prior', 'prism', 'prison', 'prissy', 'pristine', 'privacy', 'private', 'privatize', 'prize', 'proactive', 'probable', 'probably', 'probation', 'probe', 'probing', 'probiotic', 'problem', 'procedure', 'process', 'proclaim', 'procreate', 'procurer', 'prodigal', 'prodigy', 'produce', 'product', 'profane', 'profanity', 'professed', 'professor', 'profile', 'profound', 'profusely', 'progeny', 'prognosis', 'program', 'progress', 'projector', 'prologue', 'prolonged', 'promenade', 'prominent', 'promoter', 'promotion', 'prompter', 'promptly', 'prone', 'prong', 'pronounce', 'pronto', 'proofing', 'proofread', 'proofs', 'propeller', 'properly', 'property', 'proponent', 'proposal', 'propose', 'props', 'prorate', 'protector', 'protegee', 'proton', 'prototype', 'protozoan', 'protract', 'protrude', 'proud', 'provable', 'proved', 'proven', 'provided', 'provider', 'providing', 'province', 'proving', 'provoke', 'provoking', 'provolone', 'prowess', 'prowler', 'prowling', 'proximity', 'proxy', 'prozac', 'prude', 'prudishly', 'prune', 'pruning', 'pry', 'psychic', 'public', 'publisher', 'pucker', 'pueblo', 'pug', 'pull', 'pulmonary', 'pulp', 'pulsate', 'pulse', 'pulverize', 'puma', 'pumice', 'pummel', 'punch', 'punctual', 'punctuate', 'punctured', 'pungent', 'punisher', 'punk', 'pupil', 'puppet', 'puppy', 'purchase', 'pureblood', 'purebred', 'purely', 'pureness', 'purgatory', 'purge', 'purging', 'purifier', 'purify', 'purist', 'puritan', 'purity', 'purple', 'purplish', 'purposely', 'purr', 'purse', 'pursuable', 'pursuant', 'pursuit', 'purveyor', 'pushcart', 'pushchair', 'pusher', 'pushiness', 'pushing', 'pushover', 'pushpin', 'pushup', 'pushy', 'putdown', 'putt', 'puzzle', 'puzzling', 'pyramid', 'pyromania', 'python', 'quack', 'quadrant', 'quail', 'quaintly', 'quake', 'quaking', 'qualified', 'qualifier', 'qualify', 'quality', 'qualm', 'quantum', 'quarrel', 'quarry', 'quartered', 'quarterly', 'quarters', 'quartet', 'quench', 'query', 'quicken', 'quickly', 'quickness', 'quicksand', 'quickstep', 'quiet', 'quill', 'quilt', 'quintet', 'quintuple', 'quirk', 'quit', 'quiver', 'quizzical', 'quotable', 'quotation', 'quote', 'rabid', 'race', 'racing', 'racism', 'rack', 'racoon', 'radar', 'radial', 'radiance', 'radiantly', 'radiated', 'radiation', 'radiator', 'radio', 'radish', 'raffle', 'raft', 'rage', 'ragged', 'raging', 'ragweed', 'raider', 'railcar', 'railing', 'railroad', 'railway', 'raisin', 'rake', 'raking', 'rally', 'ramble', 'rambling', 'ramp', 'ramrod', 'ranch', 'rancidity', 'random', 'ranged', 'ranger', 'ranging', 'ranked', 'ranking', 'ransack', 'ranting', 'rants', 'rare', 'rarity', 'rascal', 'rash', 'rasping', 'ravage', 'raven', 'ravine', 'raving', 'ravioli', 'ravishing', 'reabsorb', 'reach', 'reacquire', 'reaction', 'reactive', 'reactor', 'reaffirm', 'ream', 'reanalyze', 'reappear', 'reapply', 'reappoint', 'reapprove', 'rearrange', 'rearview', 'reason', 'reassign', 'reassure', 'reattach', 'reawake', 'rebalance', 'rebate', 'rebel', 'rebirth', 'reboot', 'reborn', 'rebound', 'rebuff', 'rebuild', 'rebuilt', 'reburial', 'rebuttal', 'recall', 'recant', 'recapture', 'recast', 'recede', 'recent', 'recess', 'recharger', 'recipient', 'recital', 'recite', 'reckless', 'reclaim', 'recliner', 'reclining', 'recluse', 'reclusive', 'recognize', 'recoil', 'recollect', 'recolor', 'reconcile', 'reconfirm', 'reconvene', 'recopy', 'record', 'recount', 'recoup', 'recovery', 'recreate', 'rectal', 'rectangle', 'rectified', 'rectify', 'recycled', 'recycler', 'recycling', 'reemerge', 'reenact', 'reenter', 'reentry', 'reexamine', 'referable', 'referee', 'reference', 'refill', 'refinance', 'refined', 'refinery', 'refining', 'refinish', 'reflected', 'reflector', 'reflex', 'reflux', 'refocus', 'refold', 'reforest', 'reformat', 'reformed', 'reformer', 'reformist', 'refract', 'refrain', 'refreeze', 'refresh', 'refried', 'refueling', 'refund', 'refurbish', 'refurnish', 'refusal', 'refuse', 'refusing', 'refutable', 'refute', 'regain', 'regalia', 'regally', 'reggae', 'regime', 'region', 'register', 'registrar', 'registry', 'regress', 'regretful', 'regroup', 'regular', 'regulate', 'regulator', 'rehab', 'reheat', 'rehire', 'rehydrate', 'reimburse', 'reissue', 'reiterate', 'rejoice', 'rejoicing', 'rejoin', 'rekindle', 'relapse', 'relapsing', 'relatable', 'related', 'relation', 'relative', 'relax', 'relay', 'relearn', 'release', 'relenting', 'reliable', 'reliably', 'reliance', 'reliant', 'relic', 'relieve', 'relieving', 'relight', 'relish', 'relive', 'reload', 'relocate', 'relock', 'reluctant', 'rely', 'remake', 'remark', 'remarry', 'rematch', 'remedial', 'remedy', 'remember', 'reminder', 'remindful', 'remission', 'remix', 'remnant', 'remodeler', 'remold', 'remorse', 'remote', 'removable', 'removal', 'removed', 'remover', 'removing', 'rename', 'renderer', 'rendering', 'rendition', 'renegade', 'renewable', 'renewably', 'renewal', 'renewed', 'renounce', 'renovate', 'renovator', 'rentable', 'rental', 'rented', 'renter', 'reoccupy', 'reoccur', 'reopen', 'reorder', 'repackage', 'repacking', 'repaint', 'repair', 'repave', 'repaying', 'repayment', 'repeal', 'repeated', 'repeater', 'repent', 'rephrase', 'replace', 'replay', 'replica', 'reply', 'reporter', 'repose', 'repossess', 'repost', 'repressed', 'reprimand', 'reprint', 'reprise', 'reproach', 'reprocess', 'reproduce', 'reprogram', 'reps', 'reptile', 'reptilian', 'repugnant', 'repulsion', 'repulsive', 'repurpose', 'reputable', 'reputably', 'request', 'require', 'requisite', 'reroute', 'rerun', 'resale', 'resample', 'rescuer', 'reseal', 'research', 'reselect', 'reseller', 'resemble', 'resend', 'resent', 'reset', 'reshape', 'reshoot', 'reshuffle', 'residence', 'residency', 'resident', 'residual', 'residue', 'resigned', 'resilient', 'resistant', 'resisting', 'resize', 'resolute', 'resolved', 'resonant', 'resonate', 'resort', 'resource', 'respect', 'resubmit', 'result', 'resume', 'resupply', 'resurface', 'resurrect', 'retail', 'retainer', 'retaining', 'retake', 'retaliate', 'retention', 'rethink', 'retinal', 'retired', 'retiree', 'retiring', 'retold', 'retool', 'retorted', 'retouch', 'retrace', 'retract', 'retrain', 'retread', 'retreat', 'retrial', 'retrieval', 'retriever', 'retry', 'return', 'retying', 'retype', 'reunion', 'reunite', 'reusable', 'reuse', 'reveal', 'reveler', 'revenge', 'revenue', 'reverb', 'revered', 'reverence', 'reverend', 'reversal', 'reverse', 'reversing', 'reversion', 'revert', 'revisable', 'revise', 'revision', 'revisit', 'revivable', 'revival', 'reviver', 'reviving', 'revocable', 'revoke', 'revolt', 'revolver', 'revolving', 'reward', 'rewash', 'rewind', 'rewire', 'reword', 'rework', 'rewrap', 'rewrite', 'rhyme', 'ribbon', 'ribcage', 'rice', 'riches', 'richly', 'richness', 'rickety', 'ricotta', 'riddance', 'ridden', 'ride', 'riding', 'rifling', \n    'rift', 'rigging', 'rigid', 'rigor', 'rimless', 'rimmed', 'rind', 'rink', 'rinse', 'rinsing', 'riot', 'ripcord', 'ripeness', 'ripening', 'ripping', 'ripple', 'rippling', 'riptide', 'rise', 'rising', 'risk', 'risotto', 'ritalin', 'ritzy', 'rival', 'riverbank', 'riverbed', 'riverboat', 'riverside', 'riveter', 'riveting', 'roamer', 'roaming', 'roast', 'robbing', 'robe', 'robin', 'robotics', 'robust', 'rockband', 'rocker', 'rocket', 'rockfish', 'rockiness', 'rocking', 'rocklike', 'rockslide', 'rockstar', 'rocky', 'rogue', 'roman', 'romp', 'rope', 'roping', 'roster', 'rosy', 'rotten', 'rotting', 'rotunda', 'roulette', 'rounding', 'roundish', 'roundness', 'roundup', 'roundworm', 'routine', 'routing', 'rover', 'roving', 'royal', 'rubbed', 'rubber', 'rubbing', 'rubble', 'rubdown', 'ruby', 'ruckus', 'rudder', 'rug', 'ruined', 'rule', 'rumble', 'rumbling', 'rummage', 'rumor', 'runaround', 'rundown', 'runner', 'running', 'runny', 'runt', 'runway', 'rupture', 'rural', 'ruse', 'rush', 'rust', 'rut', 'sabbath', 'sabotage', 'sacrament', 'sacred', 'sacrifice', 'sadden', 'saddlebag', 'saddled', 'saddling', 'sadly', 'sadness', 'safari', 'safeguard', 'safehouse', 'safely', 'safeness', 'saffron', 'saga', 'sage', 'sagging', 'saggy', 'said', 'saint', 'sake', 'salad', 'salami', 'salaried', 'salary', 'saline', 'salon', 'saloon', 'salsa', 'salt', 'salutary', 'salute', 'salvage', 'salvaging', 'salvation', 'same', 'sample', 'sampling', 'sanction', 'sanctity', 'sanctuary', 'sandal', 'sandbag', 'sandbank', 'sandbar', 'sandblast', 'sandbox', 'sanded', 'sandfish', 'sanding', 'sandlot', 'sandpaper', 'sandpit', 'sandstone', 'sandstorm', 'sandworm', 'sandy', 'sanitary', 'sanitizer', 'sank', 'santa', 'sapling', 'sappiness', 'sappy', 'sarcasm', 'sarcastic', 'sardine', 'sash', 'sasquatch', 'sassy', 'satchel', 'satiable', 'satin', 'satirical', 'satisfied', 'satisfy', 'saturate', 'saturday', 'sauciness', 'saucy', 'sauna', 'savage', 'savanna', 'saved', 'savings', 'savior', 'savor', 'saxophone', 'say', 'scabbed', 'scabby', 'scalded', 'scalding', 'scale', 'scaling', 'scallion', 'scallop', 'scalping', 'scam', 'scandal', 'scanner', 'scanning', 'scant', 'scapegoat', 'scarce', 'scarcity', 'scarecrow', 'scared', 'scarf', 'scarily', 'scariness', 'scarring', 'scary', 'scavenger', 'scenic', 'schedule', 'schematic', 'scheme', 'scheming', 'schilling', 'schnapps', 'scholar', 'science', 'scientist', 'scion', 'scoff', 'scolding', 'scone', 'scoop', 'scooter', 'scope', 'scorch', 'scorebook', 'scorecard', 'scored', 'scoreless', 'scorer', 'scoring', 'scorn', 'scorpion', 'scotch', 'scoundrel', 'scoured', 'scouring', 'scouting', 'scouts', 'scowling', 'scrabble', 'scraggly', 'scrambled', 'scrambler', 'scrap', 'scratch', 'scrawny', 'screen', 'scribble', 'scribe', 'scribing', 'scrimmage', 'script', 'scroll', 'scrooge', 'scrounger', 'scrubbed', 'scrubber', 'scruffy', 'scrunch', 'scrutiny', 'scuba', 'scuff', 'sculptor', 'sculpture', 'scurvy', 'scuttle', 'secluded', 'secluding', 'seclusion', 'second', 'secrecy', 'secret', 'sectional', 'sector', 'secular', 'securely', 'security', 'sedan', 'sedate', 'sedation', 'sedative', 'sediment', 'seduce', 'seducing', 'segment', 'seismic', 'seizing', 'seldom', 'selected', 'selection', 'selective', 'selector', 'self', 'seltzer', 'semantic', 'semester', 'semicolon', 'semifinal', 'seminar', 'semisoft', 'semisweet', 'senate', 'senator', 'send', 'senior', 'senorita', 'sensation', 'sensitive', 'sensitize', 'sensually', 'sensuous', 'sepia', 'september', 'septic', 'septum', 'sequel', 'sequence', 'sequester', 'series', 'sermon', 'serotonin', 'serpent', 'serrated', 'serve', 'service', 'serving', 'sesame', 'sessions', 'setback', 'setting', 'settle', 'settling', 'setup', 'sevenfold', 'seventeen', 'seventh', 'seventy', 'severity', 'shabby', 'shack', 'shaded', 'shadily', 'shadiness', 'shading', 'shadow', 'shady', 'shaft', 'shakable', 'shakily', 'shakiness', 'shaking', 'shaky', 'shale', 'shallot', 'shallow', 'shame', 'shampoo', 'shamrock', 'shank', 'shanty', 'shape', 'shaping', 'share', 'sharpener', 'sharper', 'sharpie', 'sharply', 'sharpness', 'shawl', 'sheath', 'shed', 'sheep', 'sheet', 'shelf', 'shell', 'shelter', 'shelve', 'shelving', 'sherry', 'shield', 'shifter', 'shifting', 'shiftless', 'shifty', 'shimmer', 'shimmy', 'shindig', 'shine', 'shingle', 'shininess', 'shining', 'shiny', 'ship', 'shirt', 'shivering', 'shock', 'shone', 'shoplift', 'shopper', 'shopping', 'shoptalk', 'shore', 'shortage', 'shortcake', 'shortcut', 'shorten', 'shorter', 'shorthand', 'shortlist', 'shortly', 'shortness', 'shorts', 'shortwave', 'shorty', 'shout', 'shove', 'showbiz', 'showcase', 'showdown', 'shower', 'showgirl', 'showing', 'showman', 'shown', 'showoff', 'showpiece', 'showplace', 'showroom', 'showy', 'shrank', 'shrapnel', 'shredder', 'shredding', 'shrewdly', 'shriek', 'shrill', 'shrimp', 'shrine', 'shrink', 'shrivel', 'shrouded', 'shrubbery', 'shrubs', 'shrug', 'shrunk', 'shucking', 'shudder', 'shuffle', 'shuffling', 'shun', 'shush', 'shut', 'shy', 'siamese', 'siberian', 'sibling', 'siding', 'sierra', 'siesta', 'sift', 'sighing', 'silenced', 'silencer', 'silent', 'silica', 'silicon', 'silk', 'silliness', 'silly', 'silo', 'silt', 'silver', 'similarly', 'simile', 'simmering', 'simple', 'simplify', 'simply', 'sincere', 'sincerity', 'singer', 'singing', 'single', 'singular', 'sinister', 'sinless', 'sinner', 'sinuous', 'sip', 'siren', 'sister', 'sitcom', 'sitter', 'sitting', 'situated', 'situation', 'sixfold', 'sixteen', 'sixth', 'sixties', 'sixtieth', 'sixtyfold', 'sizable', 'sizably', 'size', 'sizing', 'sizzle', 'sizzling', 'skater', 'skating', 'skedaddle', 'skeletal', 'skeleton', 'skeptic', 'sketch', 'skewed', 'skewer', 'skid', 'skied', 'skier', 'skies', 'skiing', 'skilled', 'skillet', 'skillful', 'skimmed', 'skimmer', 'skimming', 'skimpily', 'skincare', 'skinhead', 'skinless', 'skinning', 'skinny', 'skintight', 'skipper', 'skipping', 'skirmish', 'skirt', 'skittle', 'skydiver', 'skylight', 'skyline', 'skype', 'skyrocket', 'skyward', 'slab', 'slacked', 'slacker', 'slacking', 'slackness', 'slacks', 'slain', 'slam', 'slander', 'slang', 'slapping', 'slapstick', 'slashed', 'slashing', 'slate', 'slather', 'slaw', 'sled', 'sleek', 'sleep', 'sleet', 'sleeve', 'slept', 'sliceable', 'sliced', 'slicer', 'slicing', 'slick', 'slider', 'slideshow', 'sliding', 'slighted', 'slighting', 'slightly', 'slimness', 'slimy', 'slinging', 'slingshot', 'slinky', 'slip', 'slit', 'sliver', 'slobbery', 'slogan', 'sloped', 'sloping', 'sloppily', 'sloppy', 'slot', 'slouching', 'slouchy', 'sludge', 'slug', 'slum', 'slurp', 'slush', 'sly', 'small', 'smartly', 'smartness', 'smasher', 'smashing', 'smashup', 'smell', 'smelting', 'smile', 'smilingly', 'smirk', 'smite', 'smith', 'smitten', 'smock', 'smog', 'smoked', 'smokeless', 'smokiness', 'smoking', 'smoky', 'smolder', 'smooth', 'smother', 'smudge', 'smudgy', 'smuggler', 'smuggling', 'smugly', 'smugness', 'snack', 'snagged', 'snaking', 'snap', 'snare', 'snarl', 'snazzy', 'sneak', 'sneer', 'sneeze', 'sneezing', 'snide', 'sniff', 'snippet', 'snipping', 'snitch', 'snooper', 'snooze', 'snore', 'snoring', 'snorkel', 'snort', 'snout', 'snowbird', 'snowboard', 'snowbound', 'snowcap', 'snowdrift', 'snowdrop', 'snowfall', 'snowfield', 'snowflake', 'snowiness', 'snowless', 'snowman', 'snowplow', 'snowshoe', 'snowstorm', 'snowsuit', 'snowy', 'snub', 'snuff', 'snuggle', 'snugly', 'snugness', 'speak', 'spearfish', 'spearhead', 'spearman', 'spearmint', 'species', 'specimen', 'specked', 'speckled', 'specks', 'spectacle', 'spectator', 'spectrum', 'speculate', 'speech', 'speed', 'spellbind', 'speller', 'spelling', 'spendable', 'spender', 'spending', 'spent', 'spew', 'sphere', 'spherical', 'sphinx', 'spider', 'spied', 'spiffy', 'spill', 'spilt', 'spinach', 'spinal', 'spindle', 'spinner', 'spinning', 'spinout', 'spinster', 'spiny', 'spiral', 'spirited', 'spiritism', 'spirits', 'spiritual', 'splashed', 'splashing', 'splashy', 'splatter', 'spleen', 'splendid', 'splendor', 'splice', 'splicing', 'splinter', 'splotchy', 'splurge', 'spoilage', 'spoiled', 'spoiler', 'spoiling', 'spoils', 'spoken', 'spokesman', 'sponge', 'spongy', 'sponsor', 'spoof', 'spookily', 'spooky', 'spool', 'spoon', 'spore', 'sporting', 'sports', 'sporty', 'spotless', 'spotlight', 'spotted', 'spotter', 'spotting', 'spotty', 'spousal', 'spouse', 'spout', 'sprain', 'sprang', 'sprawl', 'spray', 'spree', 'sprig', 'spring', 'sprinkled', 'sprinkler', 'sprint', 'sprite', 'sprout', 'spruce', 'sprung', 'spry', 'spud', 'spur', 'sputter', 'spyglass', 'squabble', 'squad', 'squall', 'squander', 'squash', 'squatted', 'squatter', 'squatting', 'squeak', 'squealer', 'squealing', 'squeamish', 'squeegee', 'squeeze', 'squeezing', 'squid', 'squiggle', 'squiggly', 'squint', 'squire', 'squirt', 'squishier', 'squishy', 'stability', 'stabilize', 'stable', 'stack', 'stadium', 'staff', 'stage', 'staging', 'stagnant', 'stagnate', 'stainable', 'stained', 'staining', 'stainless', 'stalemate', 'staleness', 'stalling', 'stallion', 'stamina', 'stammer', 'stamp', 'stand', 'stank', 'staple', 'stapling', 'starboard', 'starch', 'stardom', 'stardust', 'starfish', 'stargazer', 'staring', 'stark', 'starless', 'starlet', 'starlight', 'starlit', 'starring', 'starry', 'starship', 'starter', 'starting', 'startle', 'startling', 'startup', 'starved', 'starving', 'stash', 'state', 'static', 'statistic', 'statue', 'stature', 'status', 'statute', 'statutory', 'staunch', 'stays', 'steadfast', 'steadier', 'steadily', 'steadying', 'steam', 'steed', 'steep', 'steerable', 'steering', 'steersman', 'stegosaur', 'stellar', 'stem', 'stench', 'stencil', 'step', 'stereo', 'sterile', 'sterility', 'sterilize', 'sterling', 'sternness', 'sternum', 'stew', 'stick', 'stiffen', 'stiffly', 'stiffness', 'stifle', 'stifling', 'stillness', 'stilt', 'stimulant', 'stimulate', 'stimuli', 'stimulus', 'stinger', 'stingily', 'stinging', 'stingray', 'stingy', 'stinking', 'stinky', 'stipend', 'stipulate', 'stir', 'stitch', 'stock', 'stoic', 'stoke', 'stole', 'stomp', 'stonewall', \n    'stoneware', 'stonework', 'stoning', 'stony', 'stood', 'stooge', 'stool', 'stoop', 'stoplight', 'stoppable', 'stoppage', 'stopped', 'stopper', 'stopping', 'stopwatch', 'storable', 'storage', 'storeroom', 'storewide', 'storm', 'stout', 'stove', 'stowaway', 'stowing', 'straddle', 'straggler', 'strained', 'strainer', 'straining', 'strangely', 'stranger', 'strangle', 'strategic', 'strategy', 'stratus', 'straw', 'stray', 'streak', 'stream', 'street', 'strength', 'strenuous', 'strep', 'stress', 'stretch', 'strewn', 'stricken', 'strict', 'stride', 'strife', 'strike', 'striking', 'strive', 'striving', 'strobe', 'strode', 'stroller', 'strongbox', 'strongly', 'strongman', 'struck', 'structure', 'strudel', 'struggle', 'strum', 'strung', 'strut', 'stubbed', 'stubble', 'stubbly', 'stubborn', 'stucco', 'stuck', 'student', 'studied', 'studio', 'study', 'stuffed', 'stuffing', 'stuffy', 'stumble', 'stumbling', 'stump', 'stung', 'stunned', 'stunner', 'stunning', 'stunt', 'stupor', 'sturdily', 'sturdy', 'styling', 'stylishly', 'stylist', 'stylized', 'stylus', 'suave', 'subarctic', 'subatomic', 'subdivide', 'subdued', 'subduing', 'subfloor', 'subgroup', 'subheader', 'subject', 'sublease', 'sublet', 'sublevel', 'sublime', 'submarine', 'submerge', 'submersed', 'submitter', 'subpanel', 'subpar', 'subplot', 'subprime', 'subscribe', 'subscript', 'subsector', 'subside', 'subsiding', 'subsidize', 'subsidy', 'subsoil', 'subsonic', 'substance', 'subsystem', 'subtext', 'subtitle', 'subtly', 'subtotal', 'subtract', 'subtype', 'suburb', 'subway', 'subwoofer', 'subzero', 'succulent', 'such', 'suction', 'sudden', 'sudoku', 'suds', 'sufferer', 'suffering', 'suffice', 'suffix', 'suffocate', 'suffrage', 'sugar', 'suggest', 'suing', 'suitable', 'suitably', 'suitcase', 'suitor', 'sulfate', 'sulfide', 'sulfite', 'sulfur', 'sulk', 'sullen', 'sulphate', 'sulphuric', 'sultry', 'superbowl', 'superglue', 'superhero', 'superior', 'superjet', 'superman', 'supermom', 'supernova', 'supervise', 'supper', 'supplier', 'supply', 'support', 'supremacy', 'supreme', 'surcharge', 'surely', 'sureness', 'surface', 'surfacing', 'surfboard', 'surfer', 'surgery', 'surgical', 'surging', 'surname', 'surpass', 'surplus', 'surprise', 'surreal', 'surrender', 'surrogate', 'surround', 'survey', 'survival', 'survive', 'surviving', 'survivor', 'sushi', 'suspect', 'suspend', 'suspense', 'sustained', 'sustainer', 'swab', 'swaddling', 'swagger', 'swampland', 'swan', 'swapping', 'swarm', 'sway', 'swear', 'sweat', 'sweep', 'swell', 'swept', 'swerve', 'swifter', 'swiftly', 'swiftness', 'swimmable', 'swimmer', 'swimming', 'swimsuit', 'swimwear', 'swinger', 'swinging', 'swipe', 'swirl', 'switch', 'swivel', 'swizzle', 'swooned', 'swoop', 'swoosh', 'swore', 'sworn', 'swung', 'sycamore', 'sympathy', 'symphonic', 'symphony', 'symptom', 'synapse', 'syndrome', 'synergy', 'synopses', 'synopsis', 'synthesis', 'synthetic', 'syrup', 'system', 't-shirt', 'tabasco', 'tabby', 'tableful', 'tables', 'tablet', 'tableware', 'tabloid', 'tackiness', 'tacking', 'tackle', 'tackling', 'tacky', 'taco', 'tactful', 'tactical', 'tactics', 'tactile', 'tactless', 'tadpole', 'taekwondo', 'tag', 'tainted', 'take', 'taking', 'talcum', 'talisman', 'tall', 'talon', 'tamale', 'tameness', 'tamer', 'tamper', 'tank', 'tanned', 'tannery', 'tanning', 'tantrum', 'tapeless', 'tapered', 'tapering', 'tapestry', 'tapioca', 'tapping', 'taps', 'tarantula', 'target', 'tarmac', 'tarnish', 'tarot', 'tartar', 'tartly', 'tartness', 'task', 'tassel', 'taste', 'tastiness', 'tasting', 'tasty', 'tattered', 'tattle', 'tattling', 'tattoo', 'taunt', 'tavern', 'thank', 'that', 'thaw', 'theater', 'theatrics', 'thee', 'theft', 'theme', 'theology', 'theorize', 'thermal', 'thermos', 'thesaurus', 'these', 'thesis', 'thespian', 'thicken', 'thicket', 'thickness', 'thieving', 'thievish', 'thigh', 'thimble', 'thing', 'think', 'thinly', 'thinner', 'thinness', 'thinning', 'thirstily', 'thirsting', 'thirsty', 'thirteen', 'thirty', 'thong', 'thorn', 'those', 'thousand', 'thrash', 'thread', 'threaten', 'threefold', 'thrift', 'thrill', 'thrive', 'thriving', 'throat', 'throbbing', 'throng', 'throttle', 'throwaway', 'throwback', 'thrower', 'throwing', 'thud', 'thumb', 'thumping', 'thursday', 'thus', 'thwarting', 'thyself', 'tiara', 'tibia', 'tidal', 'tidbit', 'tidiness', 'tidings', 'tidy', 'tiger', 'tighten', 'tightly', 'tightness', 'tightrope', 'tightwad', 'tigress', 'tile', 'tiling', 'till', 'tilt', 'timid', 'timing', 'timothy', 'tinderbox', 'tinfoil', 'tingle', 'tingling', 'tingly', 'tinker', 'tinkling', 'tinsel', 'tinsmith', 'tint', 'tinwork', 'tiny', 'tipoff', 'tipped', 'tipper', 'tipping', 'tiptoeing', 'tiptop', 'tiring', 'tissue', 'trace', 'tracing', 'track', 'traction', 'tractor', 'trade', 'trading', 'tradition', 'traffic', 'tragedy', 'trailing', 'trailside', 'train', 'traitor', 'trance', 'tranquil', 'transfer', 'transform', 'translate', 'transpire', 'transport', 'transpose', 'trapdoor', 'trapeze', 'trapezoid', 'trapped', 'trapper', 'trapping', 'traps', 'trash', 'travel', 'traverse', 'travesty', 'tray', 'treachery', 'treading', 'treadmill', 'treason', 'treat', 'treble', 'tree', 'trekker', 'tremble', 'trembling', 'tremor', 'trench', 'trend', 'trespass', 'triage', 'trial', 'triangle', 'tribesman', 'tribunal', 'tribune', 'tributary', 'tribute', 'triceps', 'trickery', 'trickily', 'tricking', 'trickle', 'trickster', 'tricky', 'tricolor', 'tricycle', 'trident', 'tried', 'trifle', 'trifocals', 'trillion', 'trilogy', 'trimester', 'trimmer', 'trimming', 'trimness', 'trinity', 'trio', 'tripod', 'tripping', 'triumph', 'trivial', 'trodden', 'trolling', 'trombone', 'trophy', 'tropical', 'tropics', 'trouble', 'troubling', 'trough', 'trousers', 'trout', 'trowel', 'truce', 'truck', 'truffle', 'trump', 'trunks', 'trustable', 'trustee', 'trustful', 'trusting', 'trustless', 'truth', 'try', 'tubby', 'tubeless', 'tubular', 'tucking', 'tuesday', 'tug', 'tuition', 'tulip', 'tumble', 'tumbling', 'tummy', 'turban', 'turbine', 'turbofan', 'turbojet', 'turbulent', 'turf', 'turkey', 'turmoil', 'turret', 'turtle', 'tusk', 'tutor', 'tutu', 'tux', 'tweak', 'tweed', 'tweet', 'tweezers', 'twelve', 'twentieth', 'twenty', 'twerp', 'twice', 'twiddle', 'twiddling', 'twig', 'twilight', 'twine', 'twins', 'twirl', 'twistable', 'twisted', 'twister', 'twisting', 'twisty', 'twitch', 'twitter', 'tycoon', 'tying', 'tyke', 'udder', 'ultimate', 'ultimatum', 'ultra', 'umbilical', 'umbrella', 'umpire', 'unabashed', 'unable', 'unadorned', 'unadvised', 'unafraid', 'unaired', 'unaligned', 'unaltered', 'unarmored', 'unashamed', 'unaudited', 'unawake', 'unaware', 'unbaked', 'unbalance', 'unbeaten', 'unbend', 'unbent', 'unbiased', 'unbitten', 'unblended', 'unblessed', 'unblock', 'unbolted', 'unbounded', 'unboxed', 'unbraided', 'unbridle', 'unbroken', 'unbuckled', 'unbundle', 'unburned', 'unbutton', 'uncanny', 'uncapped', 'uncaring', 'uncertain', 'unchain', 'unchanged', 'uncharted', 'uncheck', 'uncivil', 'unclad', 'unclaimed', 'unclamped', 'unclasp', 'uncle', 'unclip', 'uncloak', 'unclog', 'unclothed', 'uncoated', 'uncoiled', 'uncolored', 'uncombed', 'uncommon', 'uncooked', 'uncork', 'uncorrupt', 'uncounted', 'uncouple', 'uncouth', 'uncover', 'uncross', 'uncrown', 'uncrushed', 'uncured', 'uncurious', 'uncurled', 'uncut', 'undamaged', 'undated', 'undaunted', 'undead', 'undecided', 'undefined', 'underage', 'underarm', 'undercoat', 'undercook', 'undercut', 'underdog', 'underdone', 'underfed', 'underfeed', 'underfoot', 'undergo', 'undergrad', 'underhand', 'underline', 'underling', 'undermine', 'undermost', 'underpaid', 'underpass', 'underpay', 'underrate', 'undertake', 'undertone', 'undertook', 'undertow', 'underuse', 'underwear', 'underwent', 'underwire', 'undesired', 'undiluted', 'undivided', 'undocked', 'undoing', 'undone', 'undrafted', 'undress', 'undrilled', 'undusted', 'undying', 'unearned', 'unearth', 'unease', 'uneasily', 'uneasy', 'uneatable', 'uneaten', 'unedited', 'unelected', 'unending', 'unengaged', 'unenvied', 'unequal', 'unethical', 'uneven', 'unexpired', 'unexposed', 'unfailing', 'unfair', 'unfasten', 'unfazed', 'unfeeling', 'unfiled', 'unfilled', 'unfitted', 'unfitting', 'unfixable', 'unfixed', 'unflawed', 'unfocused', 'unfold', 'unfounded', 'unframed', 'unfreeze', 'unfrosted', 'unfrozen', 'unfunded', 'unglazed', 'ungloved', 'unglue', 'ungodly', 'ungraded', 'ungreased', 'unguarded', 'unguided', 'unhappily', 'unhappy', 'unharmed', 'unhealthy', 'unheard', 'unhearing', 'unheated', 'unhelpful', 'unhidden', 'unhinge', 'unhitched', 'unholy', 'unhook', 'unicorn', 'unicycle', 'unified', 'unifier', 'uniformed', 'uniformly', 'unify', 'unimpeded', 'uninjured', 'uninstall', 'uninsured', 'uninvited', 'union', 'uniquely', 'unisexual', 'unison', 'unissued', 'unit', 'universal', 'universe', 'unjustly', 'unkempt', 'unkind', 'unknotted', 'unknowing', 'unknown', 'unlaced', 'unlatch', 'unlawful', 'unleaded', 'unlearned', 'unleash', 'unless', 'unleveled', 'unlighted', 'unlikable', 'unlimited', 'unlined', 'unlinked', 'unlisted', 'unlit', 'unlivable', 'unloaded', 'unloader', 'unlocked', 'unlocking', 'unlovable', 'unloved', 'unlovely', 'unloving', 'unluckily', 'unlucky', 'unmade', 'unmanaged', 'unmanned', 'unmapped', 'unmarked', 'unmasked', 'unmasking', 'unmatched', 'unmindful', 'unmixable', 'unmixed', 'unmolded', 'unmoral', 'unmovable', 'unmoved', 'unmoving', 'unnamable', 'unnamed', 'unnatural', 'unneeded', 'unnerve', 'unnerving', 'unnoticed', 'unopened', 'unopposed', 'unpack', 'unpadded', 'unpaid', 'unpainted', 'unpaired', 'unpaved', 'unpeeled', 'unpicked', 'unpiloted', 'unpinned', 'unplanned', 'unplanted', 'unpleased', 'unpledged', 'unplowed', 'unplug', 'unpopular', 'unproven', 'unquote', 'unranked', 'unrated', 'unraveled', 'unreached', 'unread', 'unreal', 'unreeling', 'unrefined', 'unrelated', 'unrented', 'unrest', 'unretired', 'unrevised', 'unrigged', 'unripe', 'unrivaled', 'unroasted', 'unrobed', 'unroll', 'unruffled', 'unruly', 'unrushed', 'unsaddle', 'unsafe', 'unsaid', 'unsalted', 'unsaved', 'unsavory', 'unscathed', \n    'unscented', 'unscrew', 'unsealed', 'unseated', 'unsecured', 'unseeing', 'unseemly', 'unseen', 'unselect', 'unselfish', 'unsent', 'unsettled', 'unshackle', 'unshaken', 'unshaved', 'unshaven', 'unsheathe', 'unshipped', 'unsightly', 'unsigned', 'unskilled', 'unsliced', 'unsmooth', 'unsnap', 'unsocial', 'unsoiled', 'unsold', 'unsolved', 'unsorted', 'unspoiled', 'unspoken', 'unstable', 'unstaffed', 'unstamped', 'unsteady', 'unsterile', 'unstirred', 'unstitch', 'unstopped', 'unstuck', 'unstuffed', 'unstylish', 'unsubtle', 'unsubtly', 'unsuited', 'unsure', 'unsworn', 'untagged', 'untainted', 'untaken', 'untamed', 'untangled', 'untapped', 'untaxed', 'unthawed', 'unthread', 'untidy', 'untie', 'until', 'untimed', 'untimely', 'untitled', 'untoasted', 'untold', 'untouched', 'untracked', 'untrained', 'untreated', 'untried', 'untrimmed', 'untrue', 'untruth', 'unturned', 'untwist', 'untying', 'unusable', 'unused', 'unusual', 'unvalued', 'unvaried', 'unvarying', 'unveiled', 'unveiling', 'unvented', 'unviable', 'unvisited', 'unvocal', 'unwanted', 'unwarlike', 'unwary', 'unwashed', 'unwatched', 'unweave', 'unwed', 'unwelcome', 'unwell', 'unwieldy', 'unwilling', 'unwind', 'unwired', 'unwitting', 'unwomanly', 'unworldly', 'unworn', 'unworried', 'unworthy', 'unwound', 'unwoven', 'unwrapped', 'unwritten', 'unzip', 'upbeat', 'upchuck', 'upcoming', 'upcountry', 'update', 'upfront', 'upgrade', 'upheaval', 'upheld', 'uphill', 'uphold', 'uplifted', 'uplifting', 'upload', 'upon', 'upper', 'upright', 'uprising', 'upriver', 'uproar', 'uproot', 'upscale', 'upside', 'upstage', 'upstairs', 'upstart', 'upstate', 'upstream', 'upstroke', 'upswing', 'uptake', 'uptight', 'uptown', 'upturned', 'upward', 'upwind', 'uranium', 'urban', 'urchin', 'urethane', 'urgency', 'urgent', 'urging', 'urologist', 'urology', 'usable', 'usage', 'useable', 'used', 'uselessly', 'user', 'usher', 'usual', 'utensil', 'utility', 'utilize', 'utmost', 'utopia', 'utter', 'vacancy', 'vacant', 'vacate', 'vacation', 'vagabond', 'vagrancy', 'vagrantly', 'vaguely', 'vagueness', 'valiant', 'valid', 'valium', 'valley', 'valuables', 'value', 'vanilla', 'vanish', 'vanity', 'vanquish', 'vantage', 'vaporizer', 'variable', 'variably', 'varied', 'variety', 'various', 'varmint', 'varnish', 'varsity', 'varying', 'vascular', 'vaseline', 'vastly', 'vastness', 'veal', 'vegan', 'veggie', 'vehicular', 'velcro', 'velocity', 'velvet', 'vendetta', 'vending', 'vendor', 'veneering', 'vengeful', 'venomous', 'ventricle', 'venture', 'venue', 'venus', 'verbalize', 'verbally', 'verbose', 'verdict', 'verify', 'verse', 'version', 'versus', 'vertebrae', 'vertical', 'vertigo', 'very', 'vessel', 'vest', 'veteran', 'veto', 'vexingly', 'viability', 'viable', 'vibes', 'vice', 'vicinity', 'victory', 'video', 'viewable', 'viewer', 'viewing', 'viewless', 'viewpoint', 'vigorous', 'village', 'villain', 'vindicate', 'vineyard', 'vintage', 'violate', 'violation', 'violator', 'violet', 'violin', 'viper', 'viral', 'virtual', 'virtuous', 'virus', 'visa', 'viscosity', 'viscous', 'viselike', 'visible', 'visibly', 'vision', 'visiting', 'visitor', 'visor', 'vista', 'vitality', 'vitalize', 'vitally', 'vitamins', 'vivacious', 'vividly', 'vividness', 'vixen', 'vocalist', 'vocalize', 'vocally', 'vocation', 'voice', 'voicing', 'void', 'volatile', 'volley', 'voltage', 'volumes', 'voter', 'voting', 'voucher', 'vowed', 'vowel', 'voyage', 'wackiness', 'wad', 'wafer', 'waffle', 'waged', 'wager', 'wages', 'waggle', 'wagon', 'wake', 'waking', 'walk', 'walmart', 'walnut', 'walrus', 'waltz', 'wand', 'wannabe', 'wanted', 'wanting', 'wasabi', 'washable', 'washbasin', 'washboard', 'washbowl', 'washcloth', 'washday', 'washed', 'washer', 'washhouse', 'washing', 'washout', 'washroom', 'washstand', 'washtub', 'wasp', 'wasting', 'watch', 'water', 'waviness', 'waving', 'wavy', 'whacking', 'whacky', 'wham', 'wharf', 'wheat', 'whenever', 'whiff', 'whimsical', 'whinny', 'whiny', 'whisking', 'whoever', 'whole', 'whomever', 'whoopee', 'whooping', 'whoops', 'why', 'wick', 'widely', 'widen', 'widget', 'widow', 'width', 'wieldable', 'wielder', 'wife', 'wifi', 'wikipedia', 'wildcard', 'wildcat', 'wilder', 'wildfire', 'wildfowl', 'wildland', 'wildlife', 'wildly', 'wildness', 'willed', 'willfully', 'willing', 'willow', 'willpower', 'wilt', 'wimp', 'wince', 'wincing', 'wind', 'wing', 'winking', 'winner', 'winnings', 'winter', 'wipe', 'wired', 'wireless', 'wiring', 'wiry', 'wisdom', 'wise', 'wish', 'wisplike', 'wispy', 'wistful', 'wizard', 'wobble', 'wobbling', 'wobbly', 'wok', 'wolf', 'wolverine', 'womanhood', 'womankind', 'womanless', 'womanlike', 'womanly', 'womb', 'woof', 'wooing', 'wool', 'woozy', 'word', 'work', 'worried', 'worrier', 'worrisome', 'worry', 'worsening', 'worshiper', 'worst', 'wound', 'woven', 'wow', 'wrangle', 'wrath', 'wreath', 'wreckage', 'wrecker', 'wrecking', 'wrench', 'wriggle', 'wriggly', 'wrinkle', 'wrinkly', 'wrist', 'writing', 'written', 'wrongdoer', 'wronged', 'wrongful', 'wrongly', 'wrongness', 'wrought', 'xbox', 'xerox', 'yahoo', 'yam', 'yanking', 'yapping', 'yard', 'yarn', 'yeah', 'yearbook', 'yearling', 'yearly', 'yearning', 'yeast', 'yelling', 'yelp', 'yen', 'yesterday', 'yiddish', 'yield', 'yin', 'yippee', 'yo-yo', 'yodel', 'yoga', 'yogurt', 'yonder', 'yoyo', 'yummy', 'zap', 'zealous', 'zebra', 'zen', 'zeppelin', 'zero', 'zestfully', 'zesty', 'zigzagged', 'zipfile', 'zipping', 'zippy', 'zips', 'zit', 'zodiac', 'zombie', 'zone', 'zoning', 'zookeeper', 'zoologist', 'zoology', 'zoom')\n\n\n\n\nC.3.2 Iterations to find the word\nUpdate the function in B.3.1 to also print the number of iterations it took to find the word_to_search or fail in finding the word_to_search.\nCheck your function if the word_to_search is:\n\n'rocket'\n'rest'\n'amendable'\n\n(10 points)\n\n\nC.3.3 Index of word\nUpdate the function in B.3.2 to also print the index of word_to_search in tuple_of_words if the word is found in the tuple. For example, the index of ‘abacus’ is 0, the index of ‘abdomen’ is 1, and so on.\nCheck your function if the 'word_to_search' is:\n\n'rocket'\n'rest'\n'ambush'\n\n(10 points)\n\n\nC.3.4 Maximum iterations\nWhat is the maximum number of iterations it may take for your function to search or fail in searching the word_to_search. You may either write a program to answer this question, or answer it analytically.\n(5 points)"
  },
  {
    "objectID": "Assignment C.html",
    "href": "Assignment C.html",
    "title": "Appendix D — Assignment C",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The breakdow is as follows:\n\n\nMust be an HTML file rendered using Quarto (1.5 pts).\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt)\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc. (1.5 pts)\n\n\nThe assignment is worth 100 points, and is due on 29th April 2023 at 11:59 pm."
  },
  {
    "objectID": "Assignment C.html#gdp-of-the-usa",
    "href": "Assignment C.html#gdp-of-the-usa",
    "title": "Appendix D — Assignment C",
    "section": "D.1 GDP of The USA",
    "text": "D.1 GDP of The USA\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on.\n\n\nCode\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\n\nD.1.1 Gaps\nUse list comprehension to produce a list of the gaps between consecutive entries in T, i.e, the increase in GDP per capita with respect to the previous year. The list with gaps should look like: [60, 177, …].\n(6 points)\n\n\nD.1.2 Maximum gap size\nUse the list developed in C.1.1 to find the maximum gap size, i.e, the maximum increase in GDP per capita.\n(2 points)\n\n\nD.1.3 Gaps higher than $1000\nUsing list comprehension with the list developed in C.1.1, find the percentage of gaps that have size greater than $1000.\n(6 points)\n\n\nD.1.4 Dictionary\nCreate a dictionary D, where the key is the year, and value for the key is the increase in GDP per capita in that year with respect to the previous year, i.e., the gaps computed in C.1.1.\n(6 points)\n\n\nD.1.5 Maximum increase\nUse the dictionary D to find the year when the GDP per capita increase was the maximum as compared to the previous year. Use the list comprehension method.\n(6 points)\nHint: […… for …. in D.items() if ……]\n\n\nD.1.6 GDP per capita decrease\nUse the dictionary D to find the years when the GDP per capita decreased with respect to the previous year. Use the list comprehension method.\n(6 points)"
  },
  {
    "objectID": "Assignment C.html#ted-talks",
    "href": "Assignment C.html#ted-talks",
    "title": "Appendix D — Assignment C",
    "section": "D.2 Ted Talks",
    "text": "D.2 Ted Talks\n\nD.2.1 Reading data\nRead the file TED_Talks.json on ted talks using the code below. You will get the data in the object TED_Talks_data. Just look at the data structure of TED_Talks_data. You will need to know how the data is structured in lists/dictionaries to answer the questions below.\nNote that the data must be stored in the same directory as the notebook.\n(2 points)\n\n\nCode\nimport json\nwith open(\"TED_Talks.json\", \"r\") as file:\n    TED_Talks_data=json.load(file)\n\n\n\n\nD.2.2 Number of talks\nFind the number of talks in the dataset.\n(2 points)\n\n\nD.2.3 Popular talk\nFind the headline, speaker and year_filmed of the talk with the highest number of views.\n(6 points)\n\n\nD.2.4 Mean and median views\nWhat are the mean and median number of views for a talk? Can we say that the majority of talks (i.e., more than 50% of the talks) have less views than the average number of views for a talk? Justify your answer.\n(6 points)\n\n\nD.2.5 Views vs average views\nDo at least 25% of the talks have more views than the average number of views for a talk? Justify your answer.\n(4 points)\n\n\nD.2.6 Confusing talks\nFind the headline of the talk that received the highest number of votes in the Confusing category.\n(8 points)\n\n\nD.2.7 Fascinating talks\nFind the headline and the year_filmed of the talk that received the highest percentage of votes in the Fascinating category.\n\\[\\text{Percentage of } \\textit{Fascinating} \\text{ votes for a ted talk} = \\frac{Number \\ of \\  votes \\ in \\ the \\ Fascinating \\ category \\ }{Total \\ votes \\ in \\ all  \\ categories}\\]\n(10 points)"
  },
  {
    "objectID": "Assignment C.html#poker",
    "href": "Assignment C.html#poker",
    "title": "Appendix D — Assignment C",
    "section": "D.3 Poker",
    "text": "D.3 Poker\nThe object deck defined below corresponds to a deck of cards. Estimate the probability that a five card hand will be:\n\nStraight\nThree-of-a-kind\nTwo-pair\nOne-pair\nHigh card\n\nYou may check the meaning of the above terms here.\n(25 points)\nHint:\nEstimate these probabilities as follows.\n\nWrite a function that accepts a hand of 5 cards as argument, and returns relevant characterisitics of a hand, such as the number of distinct card values, maximum occurences of a value etc. Using the values returned by this function (may be in a dictionary), you can compute if the hand is of any of the above types (Straight / Three-of-a-kind / two-pair / one-pair / high card).\nRandomly pull a hand of 5 cards from the deck. Call the function developed in (1) to get the relevant characteristics of the hand. Use those characteristics to determine if the hand is one of the five mentioned types (Straight / Three-of-a-kind / two-pair / one-pair / high card).\nRepeat (2) 10,000 times.\nEstimate the probability of the hand being of the above five mentioned types (Straight / Three-of-a-kind / two-pair / one-pair / high card) from the results of the 10,000 simulations.\n\nYou may use the function shuffle() from the library random to shuffle the deck everytime before pulling a hand of 5 cards.\nYou don’t need to stick to the hint if you feel you have a better way to do it. In case you have a better way, you can claim 10 bonus points for this assignment.\n\n\nCode\ndeck = [{'value':i, 'suit':c}\nfor c in ['spades', 'clubs', 'hearts', 'diamonds']\nfor i in range(2,15)]"
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix D — Assignment templates and Datasets",
    "section": "",
    "text": "Assignment templates and datasets used in the class notes can be found here"
  },
  {
    "objectID": "Rintro.html#installing-r",
    "href": "Rintro.html#installing-r",
    "title": "1  R: Introduction",
    "section": "1.1 Installing R",
    "text": "1.1 Installing R\nGo to the The Comprehensive R Archive Network (CRAN): https://cran.r-project.org/\n\n\n\nCRAN\n\n\nUnder “Download and Install R,” choose “Linux,” “MacOS X” or “Windows.” If you choose Windows, on the next page choose “base,” and on the following page choose “Download R 4.3.1 for Windows” to download the setup program.\nIf you choose MacOS X or Linux you will need to read through the instructions to find the downloads you need for your machine.\nOnce you have downloaded the setup program, execute it and follow the instructions for installing R on your system. If you have an earlier version of R already installed, you may continue to use it, or you can uninstall it and then install the most recent version, which is R 4.3.1."
  },
  {
    "objectID": "Rintro.html#installing-rstudio",
    "href": "Rintro.html#installing-rstudio",
    "title": "1  R: Introduction",
    "section": "1.2 Installing RStudio",
    "text": "1.2 Installing RStudio\nhttps://rstudio.com/products/rstudio/download/\nChoose your version: RStudio Desktop, Open Source License, Free. After you install RStudio, you can double click on it and open:\n\n\n\nR Studio\n\n\nUsually you will want to import data from a file corresponding to data associated with a homework problem. Such a file will usually end with the extensions *.txt or *.dat. The data files for this course will always be available on the CD that comes with the text and/or on the course web page. A data file will consist of columns of numbers, with nothing separating the columns but “white space.” If each column has a title on top describing what the data in the column represents (e.g., age, weight, income, etc.), we will say that the file has a header."
  },
  {
    "objectID": "Rintro.html#recursion-vs-iteration",
    "href": "Rintro.html#recursion-vs-iteration",
    "title": "1  R: Introduction",
    "section": "1.3 Recursion vs iteration",
    "text": "1.3 Recursion vs iteration\nRecursion is typically used when the problem is naturally recursive (for e.g., generating a Fibonacci sequence), or the data is naturally recursive ( for e.g., filesystem). Recursive solutions can be easy to read and understand as compared to the corresponding iterative solution.\nOne downside of recursion is that it may take more space than an iterative solution. Building up a stack of recursive calls consumes memory temporarily, and the stack is limited in size, which may become a limit on the size of the problem that the recursive implementation can solve."
  },
  {
    "objectID": "Rintro.html#getting-data-set-into-r",
    "href": "Rintro.html#getting-data-set-into-r",
    "title": "1  R: Introduction",
    "section": "1.3 Getting data set into R",
    "text": "1.3 Getting data set into R\nUsually you will want to import data from a file corresponding to data associated with a homework problem. Such a file will usually end with the extensions .txt or .dat. The data files for this course will always be available on the CD that comes with the text and/or on the course web page. A data file will consist of columns of numbers, with nothing separating the columns but “white space.” If each column has a title on top describing what the data in the column represents (e.g., “age,” “weight,” “income,” etc.), we will say that the file has a “header.”"
  },
  {
    "objectID": "Rintro.html#working-directory",
    "href": "Rintro.html#working-directory",
    "title": "1  R: Introduction",
    "section": "1.3 Working directory",
    "text": "1.3 Working directory\nThe easiest way to import the data into R and have it readily available for the current and future sessions is to first save the data file into your working directory. For example mine is C:\\stat350.\nTo set up the working directory, select the project option by choosing File menu, then New Project, and then Create Project from Existing Directory.\nTo start writing a new R script, navigate to the New File option in the File menu, and select Quarto Document. This will create a *.qmd file. You can write both code and formatted-text in this document. When working on assignment / exam problems, you will work on the *.qmd file, render it as HTML and then submit. You can view some examples on how to write R code and text in a *.qmd file and render it as HTML here.\nFor rough work, i.e., work that won’t be graded, you may use the R script option to write code."
  },
  {
    "objectID": "Rintro.html#some-coding-examples",
    "href": "Rintro.html#some-coding-examples",
    "title": "1  R: Introduction",
    "section": "1.5 Some coding examples",
    "text": "1.5 Some coding examples\nSuppose you want to work with the data from Problem 19 of Chapter 1, which is in a file named CH01PR19.txt which you have saved from the CD or the course web page into your R working directory. Assume the file has no header. You will want to create a Table object in R containing this data. First choose an appropriate name for the table. Assume you choose to name it Data. Then, you can execute the following code :\n\nData &lt;- read.table(\"CH01PR19.txt\")\n\nThen there will be a Table object in R named Data containing the data in rows and columns. To view it, you would type\n\nData"
  },
  {
    "objectID": "Rintro.html#getting-started-with-code",
    "href": "Rintro.html#getting-started-with-code",
    "title": "1  R: Introduction",
    "section": "1.4 Getting started with code",
    "text": "1.4 Getting started with code\n\n1.4.1 Reading data\nSuppose you want to work with the data from Problem 19 of Chapter 1, which is in a file named CH01PR19.txt which you have saved from the CD or the course web page in the Datasets folder within your R working directory. Assume the file has no header. You will want to create a Table object in R containing this data. First choose an appropriate name for the table. Assume you choose to name it Data. Then, you can execute the following code :\n\nData &lt;- read.table(\"./Datasets/CH01PR19.txt\")\n\nThen there will be a Table object in R named Data containing the data in rows and columns. To view it, you would type\n\nData\n\nHowever, if it is a large file, you might not be able to view the whole table at once. In that case, you may use the head() function, which will display only the first 6 rows of Data:\n\nhead(Data)\n\n     V1 V2\n1 3.897 21\n2 3.885 14\n3 3.778 28\n4 2.540 22\n5 3.028 21\n6 3.865 31\n\n\nNote that, in the absence of a header, the columns will be named V1, V2, etc., and the rows will be numbered.\nNow if the file does have a header (which you may have added yourself), you need to change the above command to:\n\nData &lt;- read.table(\"CH01PR19.txt\", header=TRUE)\n\nIn this case, when you view the file you will see the title for each column at the top of each column instead of V1, V2, etc. R regards these titles as names for the columns, and not as data.\nIf you want to load the data file from some other directory, you need to type the full path name in the read.table() command. For instance,\n\nData &lt;- read.table(file=\"C:/stat350/CH01PR19.txt\", header=FALSE) \n\nYou may read data manually as well. Here both Return and New are vectors.\n\nReturn &lt;- c(74,66,81,52,73,62,52,45,62,46,60,46,38)\nNew &lt;-c(5,6,8,11,12,15,16,17,18,18,19,20,20)\n\n\n\n1.4.2 Renaming columns\nNow suppose the file Data has two columns, and the first column is the GPA, while the second column is ACT score. If you would like to rename the columns in your R data table so that each column has a descriptive title, you could give the R command:\n\nnames(Data) &lt;- c(\"GPA\", \"ACT\")\n\nThen when you view the file the titles of the columns will have the new names you assigned:\n\nhead(Data)\n\n    GPA ACT\n1 3.897  21\n2 3.885  14\n3 3.778  28\n4 2.540  22\n5 3.028  21\n6 3.865  31\n\n\nNote that you can also give the columns these titles in the data file before you load it into R, and then use the header = TRUE setting when loading. Also, to avoid errors, you should never include a space in the title of any column\n\n\n1.4.3 Exporting data\nSuppose you wish to export Data to file Intro.csv in your folder.\n\nwrite.table(Data, \"C:/stat350/Intro.csv\", col.names=TRUE, sep=\",\")\n\nSuppose you wish to export Data to Intro.txt with a tab delimiter:\n\nwrite.table(Data, \"C:/stat350/Intro.txt\", col.names=TRUE, sep=\"\\t\")\n\nYou may export R objects to other file types in a similar manner.\n\n\n1.4.4 R environment\nIf you want to see which R objects are currently in your R environment, you can type:\n\nls()\n\nYou may also see these objects at the top right corner of the R Studio interface.\nIf you no longer need one or more of these objects, you can remove them. For instance, if you are done with Data, you can type:\n\nrm(Data)\n\nThen Data will no longer be in your current R environment. When you quit R, if you wish to keep all the new objects in your current R environment, be sure to answer Yes when asked, Save workspace image?\n\n\n1.4.5 Scatter plots and simple linear regression\nSuppose the data for Problem 19 of Chapter One has been stored in an R object named Data which has two columns, the first column named GPA and the second column named ACT. You want to make a scatterplot in R with ACT scores on the horizontal axis and GPA on the vertical axis. The R command is:\n\nplot(Data$ACT, Data$GPA)\n\n\n\n\nNote that the dollar sign is used to reference either column in the table named Data. The first argument to the plot() function is the column corresponding to the variable associated with the horizontal axis, and the second argument is the column corresponding to the variable associated with the vertical axis. Alternately, you could define two new vector variables, X and Y, to hold the data of the individual columns, and use these vectors as the arguments to the plot() function:\n\nX &lt;- Data$ACT\nY &lt;- Data$GPA\nplot(X, Y)\n\nFor now we will stick with the former approach. The resulting plot appears in the R Graphics Device within the R interface. Click on it to view it, save it, print it, etc.\nNote that whenever you make a new plot the old one will disappear (this can be changed; but not easily), so save it if you don’t want to lose it. However, the current scatterplot is inadequate. It has no title, the axis labels aren’t very informative, and the points are open circles rather than dark filled-in circles. To fix this, we can add some additional settings to the plot() command:\n\nplot(Data$ACT, Data$GPA, main=\"Problem 1.19\", xlab=\"ACT Test Score\", ylab=\"Freshman GPA\", pch=19)\n\n\n\n\nNow we obtain a much nicer scatterplot.\nWhatever you put in quotes after main = will be the title for the plot. Whatever you put in quotes after xlab = and ylab = will the the labels for the horizontal and vertical axes, respectively. The number after pch = is a code for the symbol to use for the points. You can try other numbers from 1 to 25. You can also use any symbol on your keyboard for the points, including numerals and letters, using quotes. For instance, if you want to use an asterisk for the points, type pch=\"*\".\nYou may want to also add a plot of the estimated regression function to the scatterplot of the data. This assumes you have already obtained the least squares estimates of the regression coefficients (see “Simple Linear Regression in R”).\n\nfit &lt;- lm(Data$GPA ~ Data$ACT)\nfit &lt;- lm(GPA~ACT, data=Data)   # another option\nplot(Data$ACT, Data$GPA, main=\"Problem 1.19\", xlab=\"ACT Test Score\", ylab=\"Freshman GPA\", pch=19)\nabline(fit, col = \"red\", lwd = 2) #lwd is for line-width\n\n\n\n\nThe line will appear superimposed over the data. You can also just type the actual values for the estimated intercept and slope if you prefer.\nYou may also use ggplot2 to make plots if you wish. ggplot() has a more intuitive syntax as it is based on the Grammar of Graphics, and also has more comprehensive formatting options.\n\nlibrary(ggplot2)\nggplot(Data, aes(x = ACT, y = GPA))+\n  geom_point()+\n  labs(\n    title = \"Problem 1.19\"\n  )\n\n\n\n\nTo save your plot, click anywhere on the plot, then on the menu bar choose File, then Save as. Choose the format in which you want to save the plot, then where you want to save it on your drive.\nCheck the estimates for the intercept and slope:\n\nfit\n\n\nCall:\nlm(formula = GPA ~ ACT, data = Data)\n\nCoefficients:\n(Intercept)          ACT  \n    2.11405      0.03883  \n\n\nCompute fitted values:\n\nfit$fitted.values \n\nCompute residuals:\n\nfit$residuals\n\nCompute the estimate of \\(\\sigma^2\\), that is, the MSE:\n\nn &lt;- dim(Data)[1]\nsum(fit$residuals^2)/(n-2)\n\n[1] 0.3882848"
  },
  {
    "objectID": "Rintro.html#scatter-plots-and-simple-linear-regression",
    "href": "Rintro.html#scatter-plots-and-simple-linear-regression",
    "title": "1  R: Introduction",
    "section": "1.5 Scatter plots and simple linear regression",
    "text": "1.5 Scatter plots and simple linear regression\nSuppose the data for Problem 19 of Chapter One has been stored in an R object named Data which has two columns, the first column named GPA and the second column named ACT. You want to make a scatterplot in R with ACT scores on the horizontal axis and GPA on the vertical axis. The R command is:\n\nplot(Data$ACT, Data$GPA)\n\nNote that the dollar sign is used to reference either column in the table named Data. The first argument to the plot() function is the column corresponding to the variable associated with the horizontal axis, and the second argument is the column corresponding to the variable associated with the vertical axis. Alternately, you could define two new vector variables, X and Y, to hold the data of the individual columns, and use these vectors as the arguments to the plot() function:\n\nX &lt;- Data$ACT\nY &lt;- Data$GPA\nplot(X, Y)\n\nFor now we will stick with the former approach. The resulting plot appears in the R Graphics Device within the R interface. Click on it to view it, save it, print it, etc.\nNote that whenever you make a new plot the old one will disappear (this can be changed; but not easily), so save it if you don’t want to lose it. However, the current scatterplot is inadequate. It has no title, the axis labels aren’t very informative, and the points are open circles rather than dark filled-in circles. To fix this, we can add some additional settings to the plot() command:\n\nplot(Data$ACT, Data$GPA, main=\"Problem 1.19\", xlab=\"ACT Test Score\", ylab=\"Freshman GPA\", pch=19)\n\nNow we obtain a much nicer scatterplot.\nWhatever you put in quotes after main = will be the title for the plot. Whatever you put in quotes after xlab = and ylab = will the the labels for the horizontal and vertical axes, respectively. The number after pch = is a code for the symbol to use for the points. You can try other numbers from 1 to 25. You can also use any symbol on your keyboard for the points, including numerals and letters, using quotes. For instance, if you want to use an asterisk for the points, type pch=\"*\".\nYou may want to also add a plot of the estimated regression function to the scatterplot of the data. This assumes you have already obtained the least squares estimates of the regression coefficients (see “Simple Linear Regression in R”).\n\nfit &lt;- lm(Data$GPA ~ Data$ACT)\nfit &lt;- lm(GPA~ACT, data=Data)   # another option\nabline(fit)\n\nThe line will appear superimposed over the data. You can also just type the actual values for the estimated intercept and slope if you prefer.\nTo save your plot, click anywhere on the plot, then on the menu bar choose File, then Save as. Choose the format in which you want to save the plot, then where you want to save it on your drive.\nCheck the estimates for the intercept and slope:\n\nfit\n\nCompute fitted values:\n\nfit$fitted.values \n\nCompute residuals:\n\nfit$residuals\n\nCompute the estimate of \\(\\sigma^2\\), that is, the MSE:"
  },
  {
    "objectID": "Rintro.html#r-markdown",
    "href": "Rintro.html#r-markdown",
    "title": "1  R: Introduction",
    "section": "1.5 R markdown:",
    "text": "1.5 R markdown:\nBefore Quarto, *.Rmd files were commonly used to render HTML files with R code and formatted-text. This Cheatsheet is for formatting *.Rmd files. However, you may use it to format *.qmd files in this course."
  },
  {
    "objectID": "Rintro.html#some-references-about-using-r",
    "href": "Rintro.html#some-references-about-using-r",
    "title": "1  R: Introduction",
    "section": "1.6 Some references about using R:",
    "text": "1.6 Some references about using R:\n\n100 page Introduction to R from the R website http://www.ics.uci.edu/~jutts/st108/R-intro.pdf\nPractical Regression and Anova using R, by Julian Faraway http://cran.r-project.org/doc/contrib/Faraway-PRA.pdf\nR code by Bryan Goodrich for Kutner et al., Applied Linear Statistical Models 5th ed: https://rpubs.com/bryangoodrich"
  },
  {
    "objectID": "Rintro.html#formatting-.qmd-file",
    "href": "Rintro.html#formatting-.qmd-file",
    "title": "1  R: Introduction",
    "section": "1.5 Formatting *.qmd file:",
    "text": "1.5 Formatting *.qmd file:\nBefore Quarto, *.Rmd files were commonly used to render HTML files with R code and formatted-text. This Cheatsheet is for formatting *.Rmd files. However, you may use it to format *.qmd files as well."
  },
  {
    "objectID": "Assignment 1 (control flow).html#instructions",
    "href": "Assignment 1 (control flow).html#instructions",
    "title": "Appendix A — Assignment A",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The breakdow is as follows:\n\n\nMust be an HTML file rendered using Quarto (1.5 pts).\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt)\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc. (1.5 pts)\n\n\nThe assignment is worth 100 points, and is due on 13th April 2023 at 11:59 pm."
  },
  {
    "objectID": "Computer_model.html#polynomial-interpolation",
    "href": "Computer_model.html#polynomial-interpolation",
    "title": "5  Computer model",
    "section": "5.1 Polynomial interpolation",
    "text": "5.1 Polynomial interpolation\nBelow is an example of a \\(7\\)-point polynomial interpolator.\n\ncurve(1/(1+x^2), from=-4, to=4, ylim=c(-.7,1))\nx=seq(-4,4,length=7)\ny=1/(1+x^2)\nX=as.matrix(cbind(1,x,x^2,x^3,x^4,x^5,x^6))\na=solve(X,y)\na\n\n                          x                                           \n 1.000000e+00  1.348921e-15 -4.719098e-01 -2.248202e-16  6.759065e-02 \n                            \n 8.782038e-18 -2.610798e-03 \n\nu=seq(-4,4,length=100)\nyhat=u\nfor(i in 1:100)\n  yhat[i]=sum(c(1,u[i],u[i]^2,u[i]^3,u[i]^4,u[i]^5,u[i]^6)*a)\nlines(u,yhat, col=2, lty=2, lwd = 2)\npoints(x,y,col=2)\n\n\n\n\nNotice that the polynomial interpolation model tends to be unstable near the edges, this is called Runge’s phenomenon.\nThe instability increases as the degree of the polynomial increases. Consider the same example if 9 equally-spaced points are considered, instead of 7.\n\ncurve(1/(1+x^2), from=-4, to=4, ylim=c(-.7,1))\nx=seq(-4,4,length=9)\ny=1/(1+x^2)\nX=as.matrix(cbind(1,x,x^2,x^3,x^4,x^5,x^6,x^7,x^8))\na=solve(X,y)\na\n\n                          x                                           \n 1.000000e+00  2.469982e-15 -6.611765e-01 -1.110223e-15  1.788235e-01 \n                                                        \n 1.621278e-16 -1.823529e-02 -6.399202e-18  5.882353e-04 \n\nu=seq(-4,4,length=100)\nyhat=u\nfor(i in 1:100)\n  yhat[i]=sum(c(1,u[i],u[i]^2,u[i]^3,u[i]^4,u[i]^5,u[i]^6, u[i]^7,u[i]^8)*a)\nlines(u,yhat, col='blue', lty=3, lwd = 2)\npoints(x,y,col=\"blue\")"
  },
  {
    "objectID": "t_test_example.html#t-test",
    "href": "t_test_example.html#t-test",
    "title": "2  Hypothesis testing examples",
    "section": "2.1 t-test",
    "text": "2.1 t-test\n\n2.1.1 Question\nCola manufacturers want to test how much the sweetness of a new cola drink is affected by storage. The sweetness loss due to storage was evaluated by 10 professional tasters (by comparing the sweetness before and after storage):\nTaster          Sweetness loss\n\n 1         2.0\n 2         0.4\n 3         0.7  \n 4         2.0  \n 5       −0.4   \n 6         2.2  \n 7       −1.3   \n 8         1.2  \n 9         1.1\n10         2.3\nObviously, we want to test if storage results in a loss of sweetness\nLet \\(\\mu\\) denote the sweetness loss, thus:\nNull hypothesis: \\(H_0: \\mu = 0\\)\nAlternate hypothesis: \\(H_a: \\mu &gt; 0\\)\n\n\n2.1.2 Solution\nSample mean (\\(\\bar{x}\\)):\n\ndata &lt;- c(2, 0.4, 0.7, 2, -0.4, 2.2, -1.3, 1.2, 1.1, 2.3)\n\nxbar &lt;- mean(data)\nxbar\n\n[1] 1.02\n\n\nT-statistic:\n\nt = xbar/(sd(data)/sqrt(10))\nt\n\n[1] 2.696689\n\n\np-value:\n\n1-pt(t, df = 9)\n\n[1] 0.01226316\n\n\nIf the probability of Type I error considered is 5%, then we reject the null hypothesis, and conclude that the sweetness loss is indeed greater than 0.\nIf the probability of Type I error considered is 1%, then we fail to reject the null hypothesis, and conclude that the sweetness loss is indeed 0."
  },
  {
    "objectID": "t_test_example.html#two-sample-t-test",
    "href": "t_test_example.html#two-sample-t-test",
    "title": "2  Hypothesis testing examples",
    "section": "2.2 Two-sample t-test",
    "text": "2.2 Two-sample t-test\n\n2.2.1 Question\nIn a study of lettuce growth, ten seedlings were randomly allocated to be grown in either a standard nutrient solution or in a solution containing extra nitrogen. After 22 days, the plants were harvested and weighed. The table below summarizes the results. Can we conclude that extra nitrogen enhances growth?\n\n\n\nNutrient solution\nn\nmean\nSD\n\n\n\n\nStandard\n5\n3.62\n0.54\n\n\nExtra\n5\n4.17\n0.67\n\n\n\n\n\n2.2.2 Solution\nWe will first test the hypothesis if the variance of the responses corresponding to the two treatments are the same or not.\nWe will assume that the response follows the normal distribution.\nLet \\(\\sigma_{standard}^2\\) denote the variance of the observations treated with standard solution, \\(\\sigma_{extra}^2\\) denote the variance of the observations treated with extra nitrogen. Then,\nNull hypothesis: \\(\\sigma_{standard}^2 = \\sigma_{extra}^2\\)\nAlternate hypothesis: \\(\\sigma_{standard}^2 \\ne \\sigma_{extra}^2\\)\n\n# F-statistic:\nF = (0.54/0.67)^2\nF\n\n[1] 0.6495879\n\n\n\n# Critical values based on a significance level of 5%\nleft_tail_critical_value &lt;- qf(0.025, 4, 4)\nleft_tail_critical_value\n\n[1] 0.1041175\n\n\n\nright_tail_critical_value &lt;- qf(0.975, 4, 4)\nright_tail_critical_value\n\n[1] 9.60453\n\n\nAs the \\(F\\)-statistic is between the critical values, we do not reject the null hypothesis.\nThus, we will use the pooled-variance to conduct a 2-sample t-test for equality of means.\nLet \\(\\mu_{standard}\\) denote the mean growth with the standard solution, \\(\\mu_{extra}\\) denote the mean growth with extra nitrogen. Then,\nNull hypothesis: \\(\\mu_{standard} = \\mu_{extra}\\)\nAlternate hypothesis: \\(\\mu_{standard} \\ne \\mu_{extra}\\)\n\n# Pooled variance\nsp2 = (0.54^2 + 0.67^2)/2\n\n# t-statistic\nt &lt;- (3.62 - 4.17)/(sqrt(sp2*2/5))\n\n#p-value\n2*pt(t, 8)\n\n[1] 0.1908168\n\n\nAs the \\(p\\)-value is high, we do not reject the null hypothesis that the extra nitrogen does not enhance growth.\nAlternatively, the Welch’s test for unequal variances can be used without testing for equality of variances in the two samples.\n\nn = 5; s1 = 0.54; s2 = 0.67\nnu = (n-1)*(((s1^2 + s2^2)/n)^2)/(((s1^2)/n)^2+((s2^2)/n)^2)\nt0 &lt;- (3.62 - 4.17)/(sqrt((s1^2+s2^2)/5))\n\n2*pt(t0, 7.654594)\n\n[1] 0.1924672\n\n\nAs the power of Welch’s t-test is similar to that of Student’s t-test, even when the population variances are equal and sample sizes are balanced, Welch’s test can always be used, irrespective of the variances being equal or not.\nHowever, if the variances are unequal, then Student’s t-test must not be used. Type 1 error rate will be higher for a Student’s t-test, particularly if one of the samples has a relatively higher variance, and a smaller sample size as compared to the other sample.\nThe functions t.test() and power.t.test() can be used to conveniently test the hypothesis, estimate confidence intervals, estimate power of the test, or the observations needed for a certain power of the test. Look at the documentation of these function, by executing the code ?t.test() or ?power.t.test() in the R console, to see the parameters you need to specify for using them."
  },
  {
    "objectID": "ANOVA.html#anova-table",
    "href": "ANOVA.html#anova-table",
    "title": "3  One way ANOVA",
    "section": "3.1 ANOVA Table",
    "text": "3.1 ANOVA Table\nLet us consider an example where we have results from an experiment to compare yields (as measured by dried weight of plants) obtained under a control and two different treatment conditions. The dataset is named as PlantGrowth and it can be found in the library car.\n\n# Loading the dataset\nlibrary(car)\nlibrary(DescTools)\ndata &lt;- PlantGrowth\n\nLet us print the anova table.\n\nanova(lm(weight ~ group, data = data))\n\nAnalysis of Variance Table\n\nResponse: weight\n          Df  Sum Sq Mean Sq F value  Pr(&gt;F)  \ngroup      2  3.7663  1.8832  4.8461 0.01591 *\nResiduals 27 10.4921  0.3886                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe null hypothesis that all treatments are the same is rejected at a significance level of 5%."
  },
  {
    "objectID": "ANOVA.html#confidence-interval",
    "href": "ANOVA.html#confidence-interval",
    "title": "3  One way ANOVA",
    "section": "3.2 Confidence interval",
    "text": "3.2 Confidence interval\nLet us print the Bonferroni’s confidence intervals:\n\naov_object &lt;- aov(lm(weight ~ group, data = data))\nPostHocTest(aov_object, method = \"bonferroni\")\n\n\n  Posthoc multiple comparisons of means : Bonferroni \n    95% family-wise confidence level\n\n$group\n            diff     lwr.ci    upr.ci   pval    \ntrt1-ctrl -0.371 -1.0825786 0.3405786 0.5832    \ntrt2-ctrl  0.494 -0.2175786 1.2055786 0.2630    \ntrt2-trt1  0.865  0.1534214 1.5765786 0.0134 *  \n\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nBased on Bonferroni’s method, we observe that treatment 1 and treatment 2 are significantly different, but there is no difference between other pairs.\nBonferroni’s confidence intervals are overly conservative. Let us find the confidence intervals basead on Tukey’s method:\n\nPostHocTest(aov_object, method = \"hsd\")\n\n\n  Posthoc multiple comparisons of means : Tukey HSD \n    95% family-wise confidence level\n\n$group\n            diff     lwr.ci    upr.ci   pval    \ntrt1-ctrl -0.371 -1.0622161 0.3202161 0.3909    \ntrt2-ctrl  0.494 -0.1972161 1.1852161 0.1980    \ntrt2-trt1  0.865  0.1737839 1.5562161 0.0120 *  \n\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "ANOVA.html#model-assumptions-check",
    "href": "ANOVA.html#model-assumptions-check",
    "title": "3  One way ANOVA",
    "section": "3.3 Model assumptions check",
    "text": "3.3 Model assumptions check\nThe conclusions of the statistical tests and the confidence intervals are based on the assumption that random error is normally distributed with mean 0 and constant variance, i.e., \\(\\epsilon_{ij} \\sim N(0, \\sigma^2)\\).\nThe diagnostic plots and statistical tests for checking model assumptions can be found here."
  },
  {
    "objectID": "ANOVA.html#contrasts",
    "href": "ANOVA.html#contrasts",
    "title": "3  One way ANOVA",
    "section": "3.4 Contrasts",
    "text": "3.4 Contrasts\n\n3.4.1 Class comparison\nThis is an example to use orthogonal contrasts to answer questions of interest. The data rice_seed_data.csv consists of the shoot dry weight (in mg) of an experiment to determine the effect of seed treatment by acids on the early growth of rice seeds.\nThe investigator had several specific questions in mind from the beginning: -Do acid treatments affect seedling growth? - Is the effect of organic acids different from that of inorganic acids? - Is there a difference in the effects of the two different organic acids?\nWe will create orthogonal contrasts, and perform an ANOVA analysis to answer these questions.\n\nrice_data &lt;- read.csv('rice_seed_data.csv')\nanova(lm(growth~treatment, data = rice_data))\n\nAnalysis of Variance Table\n\nResponse: growth\n          Df  Sum Sq  Mean Sq F value    Pr(&gt;F)    \ntreatment  3 0.87369 0.291232  33.874 3.669e-07 ***\nResiduals 16 0.13756 0.008597                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nc1 &lt;- c(3, -1, -1, -1)\nc2 &lt;- c(0, -2, 1, 1)\nc3 &lt;- c(0, 0, 1, -1)\n\n# Contrast matrix\nmat.contrast &lt;- cbind(c1, c2, c3)\ncolnames(mat.contrast) &lt;- paste0(\"c\",1:3)\n\n# Converting treatment to a factor variable\nrice_data$treatment &lt;- as.factor(rice_data$treatment)\ncontrasts(rice_data$treatment) &lt;- mat.contrast\n\n# ANOVA table\nmodel &lt;- aov(growth ~ treatment, data = rice_data,\n                   contrasts = list(treatment = mat.contrast))\n\n# Splitting the Treatment sum of squares into independent \n# orthogonal contrast components\nsummary.aov(model,split = list(treatment = list(\"Control vs acid\"=1,  \n                              \"Inorganic vs organic\" = 2, 'Between organic'=3)))\n\n                                  Df Sum Sq Mean Sq F value   Pr(&gt;F)    \ntreatment                          3 0.8737  0.2912  33.874 3.67e-07 ***\n  treatment: Control vs acid       1 0.7415  0.7415  86.244 7.61e-08 ***\n  treatment: Inorganic vs organic  1 0.1129  0.1129  13.126  0.00229 ** \n  treatment: Between organic       1 0.0194  0.0194   2.252  0.15293    \nResiduals                         16 0.1376  0.0086                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWe conclude that there is no statistically significant difference between the effect of organic acids. However, there is a statistically significant difference between the effect of inorganic and organic acids, and an even higher statistically significant difference between the weight of seeds in the control group and the weight seeds treated with acid.\n\n\n3.4.2 Trend comparison\nThis is an example to identify if there is a linear, quadratic, or higher order relationship between a continuous treatment and the response.\nConsider the data laser_power.csv, which consists of laser power, and the corresponding strength of the material obtained using a machining process involving the laser. The question to be answered is if there is a linear or quadratic relationship between the laser power and strength of the material.\n\ndata &lt;- read.csv('laser_power.csv')\ndata$power &lt;- as.factor(data$power)\n\n# Linear contrast\nc1 &lt;- c(-1, 0, 1)\n\n# Quadratic contrast\nc2 &lt;- c(1, -2, 1)\n\nmat.contrast &lt;- cbind(c1, c2)\nmodel &lt;- aov(strength ~ power, data = data,\n             contrasts = list(power = mat.contrast))\nsummary.aov(model, split = list(power = list(\"linear\" = 1,\n                                                 \"quadratic\" = 2)))\n\n                   Df Sum Sq Mean Sq F value  Pr(&gt;F)   \npower               2 224.18  112.09  11.318 0.00920 **\n  power: linear     1 223.75  223.75  22.593 0.00315 **\n  power: quadratic  1   0.44    0.44   0.044 0.84083   \nResiduals           6  59.42    9.90                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWe conclude that there is a linear relationship between laser power and strength. This can be seen visually as well as below.\n\ndata$power &lt;- as.integer(substr(data$power,5,8))\nplot(data$power, data$strength)\nabline(lm(strength~power, data = data))"
  },
  {
    "objectID": "Multiple_factors.html#randomized-complete-block-design-rcbd",
    "href": "Multiple_factors.html#randomized-complete-block-design-rcbd",
    "title": "4  Multiple factors",
    "section": "4.1 Randomized complete block design (RCBD)",
    "text": "4.1 Randomized complete block design (RCBD)\nLet us consider an example, where the shear strength of steel plate girders needs to be modeled as a function of the four methods (treatment) and nine girders (blocks).\n\nlibrary(ACSWR)\nlibrary(reshape2)\nlibrary(DescTools)\nlibrary(lmtest)\n\n# Visualizing treatment effects\ndata(\"girder\")\nboxplot(girder[,2:5])\n\n\n\n# Melting data to make it suitable to fit a linear regression model\n# using the 'lm' function\ndata_melt &lt;- melt(girder, variable.name = \"treatment\", id = 'Girder')\nanova(lm(value~Girder+treatment, data = data_melt))\n\nAnalysis of Variance Table\n\nResponse: value\n          Df  Sum Sq Mean Sq F value    Pr(&gt;F)    \nGirder     8 0.08949 0.01119  1.6189    0.1717    \ntreatment  3 1.51381 0.50460 73.0267 3.296e-12 ***\nResiduals 24 0.16584 0.00691                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe null hypothesis that there is no effect of the method on the sheer strength of the girder is rejected.\nLet us compare the methods pairwise.\n\naov_object &lt;- aov(value~Girder+treatment, data = data_melt)\n\n# Tukey's method\nPostHocTest(aov_object, method = \"hsd\")$treatment\n\n                        diff       lwr.ci      upr.ci         pval\nKarisruhe-Aarau    0.5452222  0.437124171  0.65332027 3.225975e-12\nLehigh-Aarau       0.2713333  0.163235283  0.37943138 2.106339e-06\nCardiff-Aarau      0.1106667  0.002568616  0.21876472 4.343575e-02\nLehigh-Karisruhe  -0.2738889 -0.381986940 -0.16579084 1.808447e-06\nCardiff-Karisruhe -0.4345556 -0.542653606 -0.32645750 3.675706e-10\nCardiff-Lehigh    -0.1606667 -0.268764717 -0.05256862 2.164599e-03\n\n\nAll methods are different from each other according to Tukey’s method (at 5% significance level).\n\n# Bonferroni's method\nPostHocTest(aov_object, method = \"bonferroni\")$treatment\n\n                        diff       lwr.ci      upr.ci         pval\nKarisruhe-Aarau    0.5452222  0.432559601  0.65788484 3.308011e-12\nLehigh-Aarau       0.2713333  0.158670712  0.38399595 2.208198e-06\nCardiff-Aarau      0.1106667 -0.001995955  0.22332929 5.631958e-02\nLehigh-Karisruhe  -0.2738889 -0.386551510 -0.16122627 1.894578e-06\nCardiff-Karisruhe -0.4345556 -0.547218177 -0.32189293 3.770501e-10\nCardiff-Lehigh    -0.1606667 -0.273329288 -0.04800405 2.453939e-03\n\n\nAll methods except Aarau and Cardiff are different from each other according to Bonferroni’s method (at 5% significance level).\nLet us verify if the model assumptions are satisfied.\n\npar(mfrow = c(2,2))\nmodel &lt;- lm(value~Girder+treatment, data = data_melt)\nplot(model)\n\n\n\n\n\nshapiro.test(model$residuals)\n\n\n    Shapiro-Wilk normality test\n\ndata:  model$residuals\nW = 0.94966, p-value = 0.102\n\n\nThe errors are normally distribued.\n\nbptest(model)\n\n\n    studentized Breusch-Pagan test\n\ndata:  model\nBP = 22.205, df = 11, p-value = 0.02283\n\n\nThe error variance assumption is also satisfied at a 1% significance level. There is no strong deviation from the assumption."
  },
  {
    "objectID": "Multiple_factors.html#two-way-layout-fixed-effects",
    "href": "Multiple_factors.html#two-way-layout-fixed-effects",
    "title": "4  Multiple factors",
    "section": "4.2 Two-way layout: Fixed effects",
    "text": "4.2 Two-way layout: Fixed effects\nA manufacturer was interested in finding differences in torque values of a lock-nut. The two factors effecting the torque are the type of plating, and whether the locknut is threaded into a bolt or a mandrel. We’ll use two-way ANOVA to find if the two factors or their interaction effect the torque.\n\ndata &lt;- read.table('bolt.dat.txt', header = TRUE)\ndata_melt &lt;- melt(data, variable.name = 'plating', value.name = 'torque')\n\nUsing M.B as id variables\n\nhead(data_melt)\n\n  M.B plating torque\n1   M     P.O     10\n2   M     P.O     13\n3   M     P.O     17\n4   M     P.O     16\n5   M     P.O     15\n6   M     P.O     14\n\nanova(lm(torque ~ M.B*plating, data = data_melt))\n\nAnalysis of Variance Table\n\nResponse: torque\n            Df Sum Sq Mean Sq F value    Pr(&gt;F)    \nM.B          1  821.4  821.40 22.4563 1.604e-05 ***\nplating      2 2290.6 1145.32 31.3118 9.363e-10 ***\nM.B:plating  2  665.1  332.55  9.0916 0.0003952 ***\nResiduals   54 1975.2   36.58                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n#data['plating_bolt'] = apply(data_melt[,1:2], axis = 1, function(x) paste)\n\nThe two factors and their interaction significantly effects the torque."
  },
  {
    "objectID": "Multiple_factors.html#two-way-layout-random-effects",
    "href": "Multiple_factors.html#two-way-layout-random-effects",
    "title": "4  Multiple factors",
    "section": "4.3 Two-way layout: Random effects",
    "text": "4.3 Two-way layout: Random effects\nTen food items are being tested by 5 judges (operators) for quality. Each judge inspects a food item 3 times, and gives a score. Answer the following questions with appropriate analysis:\n\nIs there a statistically significant variation in the scores given by judges for the same quality of food? If yes, quantify the variation.\nIs the variation in the scores given by judges for the same quality of food dependent on the food item?\nIs there a statistically significant variation in the quality of the food items after removing the variation in scores due to different judges? If yes, quantify the variation.\n\n\ndata &lt;- read.csv('sensory_data.csv', header = TRUE)\nhead(data)\n\n   Item Operator1 Operator2 Operator3 Operator4 Operator5\n1 Item1       4.3       4.9       3.3       5.3       4.4\n2 Item1       4.3       4.5       4.0       5.5       3.3\n3 Item1       4.1       5.3       3.4       5.7       4.7\n4 Item2       6.0       5.3       4.5       5.9       4.7\n5 Item2       4.9       6.3       4.2       5.5       4.9\n6 Item2       6.0       5.9       4.7       6.3       4.6\n\ndata_melt &lt;- melt(data, variable.name = \"Operator\", value.name = 'property')\n\nUsing Item as id variables\n\nhead(data_melt)\n\n   Item  Operator property\n1 Item1 Operator1      4.3\n2 Item1 Operator1      4.3\n3 Item1 Operator1      4.1\n4 Item2 Operator1      6.0\n5 Item2 Operator1      4.9\n6 Item2 Operator1      6.0\n\nanova(lm(property~Item*Operator, data = data_melt))\n\nAnalysis of Variance Table\n\nResponse: property\n               Df Sum Sq Mean Sq  F value    Pr(&gt;F)    \nItem            9 612.40  68.044 199.3084 &lt; 2.2e-16 ***\nOperator        4  25.49   6.372  18.6643 1.739e-11 ***\nItem:Operator  36  12.97   0.360   1.0549     0.406    \nResiduals     100  34.14   0.341                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nYes, there is a statistically significant variation in the scores given by judges for the same quality of food\nThe standard deviation in the scores given by judges for the same quality of food is:\n\nsqrt((6.37 - 0.36)/30)\n\n[1] 0.4475861\n\n\nThe variation in the scores given by judges for the same quality of food does not depend on the food item\nYes, there is a statistically significant variation in the quality of the food items after removing the variation in scores due to different judges.\nThe standard deviation in the scores given food items after removing the variation due to different judges is:\n\nsqrt((68.04 - 0.36)/15)\n\n[1] 2.124147"
  },
  {
    "objectID": "Assignment A.html#instructions",
    "href": "Assignment A.html#instructions",
    "title": "Appendix A — Assignment 1",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nMake R code chunks to insert code and type your answer outside the code chunks, in the template provided. Ensure that the solution is written neatly enough to understand and grade.\nQuarto-render the file as HTML to submit. For theoretical questions, you can either type the answer within the template and include the solutions in this file, or write the solution on paper, scan and submit separately.\nThe assignment is worth 100 points, and is due on 15th April 2024 at 11:59 pm.\nUse a significance level \\(\\alpha = 5\\%\\) in all hypothesis tests, unless otherwise specified.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\n\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text (2 pt)\nFinal answers of each question are written clearly (1 pt).\nThe proofs are legible, and clearly written with reasoning provided for every step. They are easy to follow and understand (2 pt)\n\n\n10 points will be deducted in case the provided template is not used (for coding / text-answer questions), and/or the template is not rendered using Quarto markdown.\nFor questions involving derivations (Q2, Q3 and Q5 in this assignment), you are allowed to do them on paper, scan and upload separately. However, you are welcome to type the derivations in this template."
  },
  {
    "objectID": "Assignment A.html#q1",
    "href": "Assignment A.html#q1",
    "title": "Appendix A — Assignment 1",
    "section": "Q1",
    "text": "Q1\nWCAS (Weinberg College of Arts and Sciences) is considering replacing keyboards used in offices of all its departments with new keyboards of a different brand. Let the current keyboard be denoted as A, and the new one denoted as B, where A and B can be assumed to be the brands of the keyboards. However, before making the purchase, WCAS is conducting an experiment to test if the new keyboard will increase the typing efficiency.\nFor the experiments mentioned in all the questions below, assume that:\n\nThe manuscripts used in the replications of the experiments are not the same, but are of a fixed length and font size.\nThe effect of typist on the typing time can be considered as a random variable with constant variance, and thus can be combined with the random error due to unknown factors. Typists within the same department as as similar as typists across departments.\nThe effect of manuscript on the typing time can be considered as a random variable. However, manuscripts within the same department are similar, while manuscripts across departments are relatively less similar.\nThe typing time is modeled as:\n\n\\(y = \\mu_{keyboard} + \\beta_{script} + \\epsilon\\),\nwhere the effect of the keyboards is fixed, and the effect of the script is a random variable, whose variance will be higher if scripts from across multiple departments are used as compared to the case if scripts from within the same department are used in the experiment. However, a given script will have the same effect on the typing time if used multiple times in an experiment.\n\nQ1(a)\nThe first experiment is conducted as follows.\n16 manuscripts are distributed randomly among 16 different typists - one manuscript to each typist. The manuscripts are chosen randomly from different departments of WCAS. 8 typists are randomly selected to use keyboard A and the rest use keyboard B.\nThe times taken (in minutes) by the typists for the 2 keyboards are:\n\n\n\nKeyboard A\nKeyboard B\n\n\n\n\n8.73\n10.77\n\n\n11.31\n8.33\n\n\n9.15\n11.87\n\n\n13.78\n8.31\n\n\n11.58\n7.28\n\n\n9.14\n4.99\n\n\n11.05\n12.61\n\n\n9.49\n8.81\n\n\n\nIs there evidence to support the claim that the time taken by keyboard B is less than that by keyboard A?\nState the null and alternate hypothesis, compute the test statistic, conduct the test, and state the conclusion.\n(4 points)\n\na &lt;- c(8.73, 11.31,  9.15, 13.78, 11.58, 9.14, 11.05,  9.49)\nb &lt;- c(10.77,  8.33, 11.87,  8.31,  7.28,  4.99, 12.61,  8.81)\n\n\n\nQ1(b)\nThe company that sells keyboards of brand B contested the conclusions made based on the above test, and asked WCAS to conduct another experiment, where the same script is tested on both the keyboards, and the typing times are compared for the same script across keyboards.\nWCAS randomly distributed 8 scripts among 16 typists, where each script was shared by two typists - one of them typed it with keyboard A, and the other one typed the same script with keyboard B.\nThe times taken (in minutes) by the typists for the 2 keyboards are in the table below. Each row of the table shows time taken to type the same script.\n\n\n\nKeyboard A\nKeyboard B\n\n\n\n\n9.13\n7.58\n\n\n10.31\n9.11\n\n\n6.95\n8.02\n\n\n12.77\n12.75\n\n\n10.26\n8.97\n\n\n8.3\n6.65\n\n\n12.07\n10.34\n\n\n12.24\n11.24\n\n\n\nIs there evidence to support the claim that the time taken by keyboard B is less than that by keyboard A?\nState the null and alternate hypothesis, compute the test statistic, conduct the test, and state the conclusion.\n(4 points)\n\na &lt;- c(9.13, 10.31,  6.95, 12.77, 10.26,  8.3, 12.07, 12.24)\nb &lt;- c(7.58,  9.11,  8.02, 12.75,  8.97,  6.65, 10.34, 11.24)\n\n\n\nQ1(c)\nWere the conclusions based on the experiments in 1(a) different from the experiments in 1(b)? If yes, then why? If no, then why not? Explain in terms of design principles.\n(4 points)\n\n\nQ1(d)\nUnconvinced by the results of the tests in 1(a) and 1(b), WCAS asked the Department of Statistics and Data Science (DSDS) to conduct both types of experiments (1(a) & 1(b)) again.\nDSDS conducted experiments similar to the ones conducted in 1(a) and 1(b). However, they distributed the scripts available within their own department to typists. Note that the scripts within the same department will be similar as compared to scripts across departments.\nFor the first experiment, DSDS randomly distributed 16 scripts among 16 typists - one manuscript to each typist. The typists and manuscripts are chosen randomly from within DSDS. 8 typists are randomly selected to use keyboard A and the rest use keyboard B.\nThe times taken (in minutes) by the typists for the 2 keyboards are:\n\n\n\nKeyboard A\nKeyboard B\n\n\n\n\n10.79\n9.20\n\n\n10.05\n6.53\n\n\n11.17\n9.52\n\n\n10.32\n8.50\n\n\n12.08\n9.75\n\n\n8.81\n9.18\n\n\n11.66\n9.92\n\n\n11.93\n9.09\n\n\n\nIs there evidence to support the claim that the time taken by keyboard B is less than that by keyboard A?\nState the null and alternate hypothesis, compute the test statistic, conduct the test, and state the conclusion.\n(4 points)\n\na &lt;- c(10.79, 10.05, 11.17, 10.32, 12.08,  8.81, 11.66, 11.93)\nb &lt;- c(9.20, 6.53, 9.52, 8.50, 9.75, 9.18, 9.92, 9.09)\n\n\n\nQ1(e)\nAre the conclusions based on the experiment conducted by DSDS in 1(d) the same as that of the experiment conducted in 1(a)?\nWhat do you think can be the reason of the conclusions being the same (if they are indeed the same) or different (if they are indeed different)?\n(4 points)\n\n\nQ1(f)\nFor the seconds experiment, DSDS randomly distributed 8 scripts among 16 typists, where each script was shared by two typists - one of them typed it with keyboard A, and the other one typed the same script with keyboard B.\nThe times taken (in minutes) by the typists for the 2 keyboards are in the table below. Each row of the table shows time taken to type the same script.\n\n\n\nKeyboard A\nKeyboard B\n\n\n\n\n10.99\n8.53\n\n\n9.73\n7.06\n\n\n9.38\n8.32\n\n\n9.29\n10.79\n\n\n8.26\n9.61\n\n\n9.11\n11.00\n\n\n9.51\n8.76\n\n\n9.73\n8.88\n\n\n\nIs there evidence to support the claim that the time taken by keyboard B is less than that by keyboard A?\nState the null and alternate hypothesis, compute the test statistic, conduct the test, and state the conclusion.\n(4 points)\n\na &lt;- c(10.99,  9.73,  9.38,  9.29,  8.26,  9.11,  9.51,  9.73)\nb &lt;- c(8.53,  7.06,  8.32, 10.79, 9.61, 11.00,  8.76,  8.88)\n\n\n\nQ1(g)\nAre the conclusions based on the experiment conducted by DSDS in 1(f) the same as that of the experiment conducted in 1(b)?\nWhat do you think can be the reason of the conclusions being the same (if they are indeed the same) or different (if they are indeed different)?\n(4 points)\n\n\nQ1(h)\nIf the true difference between the mean typing time with the 2 keyboards is 60 seconds, compute the power of the test for each of the 4 tests - 1(a), 1(b), 1(d), and 1(f). You can assume the population variances to be the same for the populations considered in each experiment.\n(8 points)\n\n\nQ1(i)\nWhich test among 1(a), 1(b), 1(d), and 1(f) would you recommend in the future for a similar problem? Why?\nIs there any potential disadvantage of the recommended test?\n(4 points)\n\n\nQ1(j)\nDesign an experiment that uses minimum resources (i.e., minimum replicates) to provide a power of at least 95% in detecting a potential difference of 60 seconds in the typing time taken by the keyboards. Mention the design. You may modify any of the designs in 1(a), 1(b), 1(d), or 1(f), or even combine the results of some of the experiments to come up with a more reliable design.\n(4 points)"
  },
  {
    "objectID": "Assignment A.html#q2",
    "href": "Assignment A.html#q2",
    "title": "Appendix A — Assignment 1",
    "section": "Q2",
    "text": "Q2\nConsider another experiment to compare two keyboards A and B in terms of typing efficiency. In this experiment, six manuscripts 1-6 are given to the same typist.\n\nQ2(a)\nUse a statistical model to quantify the gains (1) using randomization (use the randomized design on slide 15 of the class presentation), and (2) using balanced randomization.\n(4 points)\n\n\nQ2(b)\nSuppose the following sequence is obtained using balanced randomization:\n\nA-B, 2. A-B, 3. A-B, 4. B-A, 5. B-A, 6. B-A.\n\nWould you use it for the study? What aspect of the sequence makes you concerned?\nCan you relate it to the possibility that the learning effect may decay over time? Assuming that is the case, derive an expression for the expected bias in the estimated typing time difference of the two keyboards, if you use this design.\nHow can you modify the design to reduce the expected bias?\n(2 + 2 + 2 = 6 points)"
  },
  {
    "objectID": "Assignment A.html#q3",
    "href": "Assignment A.html#q3",
    "title": "Appendix A — Assignment 1",
    "section": "Q3",
    "text": "Q3\nA fertilizer is claimed to change the mean yield of a crop to 3 times the mean yield without the fertilizer minus 5 units, i.e.,\nmean yield with fertilizer = 3 * (mean yield without fertilizer) - 5\nWe need to conduct a hypothesis test to verify this claim.\nAssume that the variances of the yield of the two populations (with & without the fertilizer), \\(\\sigma_{Fertilizer}^2\\) and \\(\\sigma_{NoFertilizer}^2\\) are known.\n\nQ3(a)\nState the null and alternate hypothesis.\n(4 points)\n\n\nQ3(b)\nFormulate the test statistic.\n(4 points)\n\n\nQ3(c)\nDerive an expression for the ratio of the number of observations to be sampled from each of the populations, so as to maximize the power of the test. Assume a fixed budget of a total of \\(N\\) samples (i.e., sum of number of samples from both the populations is \\(N\\)).\n(6 points)"
  },
  {
    "objectID": "Assignment A.html#q4",
    "href": "Assignment A.html#q4",
    "title": "Appendix A — Assignment 1",
    "section": "Q4",
    "text": "Q4\nIn the early stages of research and development experimentation which type of error do you think is most important, type I or type II? Justify your answer.\n(4 points)"
  },
  {
    "objectID": "Assignment A.html#q5",
    "href": "Assignment A.html#q5",
    "title": "Appendix A — Assignment 1",
    "section": "Q5",
    "text": "Q5\nConsider a hardness testing machine that presses a rod with a pointed tip (treatment) into a metal specimen (experimental unit) with a known force.\nBy measuring the depth of the depression caused by the tip, the hardness of the specimen is determined (observed response).\nTwo different tips (Tip 1 & Tip 2) are available for this machine, and although the precision (variability) of the measurements made by the two tips seems to be the same, it is suspected that one tip produces different mean hardness readings than the other.\nSuppose that the observed hardness, \\(y_{ij}\\) in the experiments is modeled as follows:\n\\(y_{ij} = \\mu_i + \\beta_{j} + \\epsilon_{ij}\\),\nwhere,\n\\(y_{ij}\\) is the observed hardness of the \\(j_{th}\\) metal specimen based on the \\(i^{th}\\) tip,\n\\(\\mu_i\\) is the true mean hardness measured by the \\(i^{th}\\) tip,\n\\(\\beta_{j} \\sim N(0, \\sigma_{\\beta}^2)\\) is a random variable, which is the effect of the nature of the metal specimen on its observed hardness (however, the nature of a given metal specimen will have the same effect on the hardness measured by both the tips if tested repeatedly),\n\\(\\epsilon_{ij} \\sim N(0, \\sigma_{n}^2)\\) is the random variable, which is the effect of unknown factors on the observed hardness \\(y_{ij}\\).\n\\(i = 1,2\\) (There are 2 tips),\n\\(j = 1, ..., n\\) (There are \\(n\\) replicates for each tip)\n\nQ5(a)\nSuppose that a randomly selected set of \\(n\\) metal specimens is assigned to tip 1, and another set of randomly selected \\(n\\) metal specimens is assigned to tip 2 (i.e., a total of 2\\(n\\) specimens are used in the experiment), and the appropriate test is used to test the hypothesis if the mean hardness measured by the two tips is the same.\n\nQ5(a)(i)\nDerive an expression for the expected bias of the estimated difference in the mean hardness measured by the 2 tips.\n(4 points)\n\n\nQ5(a)(ii)\nDerive an expression for the expected variance of the estimated difference in the mean hardness measured by the 2 tips.\n(4 points)\n\n\n\nQ5(b)\nSuppose that a randomly selected set of \\(n\\) metal specimens is assigned to both the tips (i.e., a total of \\(n\\) specimens are used in the experiment). For each specimen, hardness is observed at a point in the specimen using tip 1 and at another point within the same specimen using tip 2. The appropriate test is used to test the hypothesis if the mean hardness measured by the two tips is the same.\n\nQ5(b)(i)\nDerive an expression for the expected bias of the estimated difference in the mean hardness measured by the 2 tips.\n(2 points)\n\n\nQ5(b)(ii)\nDerive an expression for the expected variance of the estimated difference in the mean hardness measured by the 2 tips.\n(3 points)\n\n\n\nQ5(c)\nDerive the condition, when the expected precision of the estimated difference in means of the hardness measured by the two tips will be higher in the experimental design of 5(b) as compared to the experimental design in 5(a).\nHint: Derive the expression when the expected square of the width of the confidence interval based on the design in 5(b) is less than the expected square of the width of the confidence interval based on the design in 5(a).\n(8 points)\n\n\nQ5(d)\nHow does the difference in the precision of the estimated difference (in means of the hardness measured by the two tips) by the two experimental designs (5(a) and 5(b)) change as the number of replicates \\(n\\) are increased in each of those designs.\n(2 points)"
  },
  {
    "objectID": "Assignment B_questions.html#instructions",
    "href": "Assignment B_questions.html#instructions",
    "title": "Appendix B — Assignment 2",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nMake R code chunks to insert code and type your answer outside the code chunks, in the template provided. Ensure that the solution is written neatly enough to understand and grade.\nQuarto-render the file as HTML to submit. For theoretical questions, you can either type the answer within the template and include the solutions in this file, or write the solution on paper, scan and submit separately.\nThe assignment is worth 100 points, and is due on 24th April 2024 at 11:59 pm.\nUse a significance level \\(\\alpha = 5\\%\\) in all hypothesis tests, unless otherwise specified.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\n\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text (2 pt)\nFinal answers of each question are written clearly (1 pt).\nThe proofs are legible, and clearly written with reasoning provided for every step. They are easy to follow and understand (2 pt)\n\n\n10 points will be deducted in case the provided template is not used (for coding / text-answer questions), and/or the template is not rendered using Quarto markdown.\nFor the question involving derivations (Q4 in this assignment), you are allowed to do them on paper, scan and upload separately. However, you are welcome to type the derivation in this template."
  },
  {
    "objectID": "Assignment B_questions.html#q1",
    "href": "Assignment B_questions.html#q1",
    "title": "Appendix B — Assignment 2",
    "section": "Q1",
    "text": "Q1\nIn Q1 of assignment 1, suppose three keyboards were being compared, instead of two. Let us say there were keyboards of another brand C. Assume that the number of replicates of keyboard C were the same as that of keyboards A and B in all the experiments. After the experiment is conducted, ANOVA is used to identify a difference between the typing time of all pairs of keyboards. Will it be more likely or less likely to observe a statistically significant difference between keyboard A and keyboard B in each of the experiments - 1(a), 1(b), 1(d), and 1(f)? Justify your answer.\n(4 points)"
  },
  {
    "objectID": "Assignment B_questions.html#q2",
    "href": "Assignment B_questions.html#q2",
    "title": "Appendix B — Assignment 2",
    "section": "Q2",
    "text": "Q2\n\nQ2(a)\nA developer has 4 different designs of a food-ordering mobile app. They tested each design 3 times (the design was launched for a week to be tested each time), and recorded the average time spent by a user on the app. The developer is thinking about either using a single best design that stands out, or combine features of designs that bring similar user-engagement. The developer has the following specific questions in mind before the experiment:\n\nIs design B significantly better or worse than the other three designs? Design B will be more expensive to use as the developer will need to purchase some copyrights to use the design for long term. However, design B will be seriously considered if it generates significantly more app time than the other three designs. Otherwise, a combination of the other 3 designs may be considered.\nIs design A significantly better or worse than designs C and D. Design A is targeted towards Gen-Z, while designs C and D are targeted towards millennials. Thus, it will be easier to either combine designs C and D, or just use design A.\nIs design C significantly better or worse than design D? If that is the case, then the developer may not need to combine designs C and D.\n\nConstruct a meaningful set of orthogonal contrasts that will be useful to answer the questions once the experiment has been performed.\n(3 points)\n\n\nQ2(b)\nExperiments were conducted based on the design in the previous question, and the results (average time spent on app per user in minutes) are given below. Conduct statistically independent tests to answer the 3 questions in 2(a).\n\n\n\nApp design A\nApp design B\nApp design C\nApp design D\n\n\n\n\n7.75\n14.69\n9.97\n8.39\n\n\n9.37\n12.16\n10.48\n12.02\n\n\n7.33\n9.86\n10.15\n9.78\n\n\n\n(4 points)\n\ndata &lt;- data.frame(app_time = c(7.75, 9.37, 7.33, 14.69, 12.16,  9.86,  9.97, 10.48, 10.15,  8.39, 12.02, 9.78), design = factor(c(rep(\"A\", 3), rep(\"B\", 3), rep(\"C\", 3), rep(\"D\", 3))))\n\n\n\nQ2(c)\nAnswer each of the questions in 1(a) with a confidence interval, and interpret the interval.\n(6 points)\n\n\nQ2(d)\nTest if the model assumptions are satisfied in the model developed in 2(b).\nRegardless whether the assumptions are satisfied or not, consider the hypothetical scenario that they are not satisfied. Which conclusions will they effect? For each model assumption violation, mention the conclusion effected.\n(6 points)\n\n\nQ2(e)\nConduct an ANOVA analysis to test if the mean user app times of all the designs is the same. Construct confidence intervals of the difference in mean app times of each design using Tukey’s method. Mention the conclusion based on the analysis.\n(4 points)\n\n\nQ2(f)\nDo the conclusions in 2(e) contradict those in 2(b)? If yes, then why? If not, then why not?\n(4 points)\n\n\nQ2(g)\nWhat is the benefit of using orthogonal contrasts, instead of non-orthogonal contrasts? Do orthogonal contrasts reduce the family-wise type I error rate as compared to non-orthogonal contrasts?\n(4 points)"
  },
  {
    "objectID": "Assignment B_questions.html#q3",
    "href": "Assignment B_questions.html#q3",
    "title": "Appendix B — Assignment 2",
    "section": "Q3",
    "text": "Q3\nExperiments are conducted to compare the average lifetime of batteries of three brands. Five randomly selected batteries of each brand are tested with the following results. The table consists of life of batteries in weeks.\n\n\n\nBrand A\nBrand B\nBrand C\n\n\n\n\n100\n76\n108\n\n\n96\n80\n100\n\n\n92\n75\n96\n\n\n96\n84\n98\n\n\n92\n82\n100\n\n\n\n\nQ3(a)\nWhich brand will you select for use? Justify your answer with statistical analysis.\n(4 points)\n\n\nQ3(b)\nIf the manufacturer will replace without charge any battery that fails in less than 85 weeks, what percentage would the company expect to replace? Consider the brand selected in 3(a).\n(4 points)\n\n\nQ3(c)\nIf we wish to detect a maximum difference in mean battery life of 10 weeks with a probability of at least 0.90, what sample size should be used?\n(4 points)\n\n\nQ3(d)\nIf we wish to construct a 95 percent confidence interval on the difference in two mean battery lives that has an accuracy of \\(\\pm2\\) weeks, how many batteries of each brand must be tested?\n(4 points)"
  },
  {
    "objectID": "Assignment B_questions.html#q4",
    "href": "Assignment B_questions.html#q4",
    "title": "Appendix B — Assignment 2",
    "section": "Q4",
    "text": "Q4\nSeveral ovens in a metal working shop are used to heat metal specimens. All ovens are supposed to operate at the same temperature, although it is suspected that this may not be true. Three ovens selected at random, and their temperatures on successive heats are noted. The data collected are as follows:\n\n\n\nOven 1\nOven 2\nOven 3\n\n\n\n\n491.5\n488.5\n480.1\n\n\n498.3\n484.65\n484.8\n\n\n498.1\n479.9\n488.25\n\n\n493.5\n477.35\n473\n\n\n493.6\n-\n471.85\n\n\n-\n-\n478.65\n\n\n\n\nQ4(a)\nIs there significant variation in temperature between ovens?\n(2 points)\n\n\nQ4(b)\nDerive the expression for the expected Mean squared treatment \\(E(MS_{Oven})\\) for the model in 4(a). Note that you will need to consider different number of replicates for each oven. Don’t plug-in any values in the expression, leave the expression in an algebraic form.\n(12 points)\n\n\nQ4(c)\nSuppose engineers have modified the oven manufacturing process in the factory to minimize the temperature variation between ovens. The quality testing team has to design an experiment to test the hypothesis test in 4(a) again. They decide to conduct the experiment on a random sample of 3 ovens manufactured based on the new process in the factory.\nAssume that the budget for the total number of replicates (successive heat measurements on all ovens) in the experiment is fixed as \\(N\\). Derive the optimal number of replicates for each oven to maximize the power of the test.\nYou may use the following result.\nThe solution of the problem,\n\\(\\min \\sum_{i=1}^n x_i^2\\), subject to \\(\\sum_{i=1}^n x_i = C\\), where \\(C\\) is a constant, is:\n\\(x_i = C/n\\)\n(4 points)"
  },
  {
    "objectID": "Assignment B_questions.html#q5",
    "href": "Assignment B_questions.html#q5",
    "title": "Appendix B — Assignment 2",
    "section": "Q5",
    "text": "Q5\nSuppose that experiments are being conducted to analyse the effect of whey protein and creatine (supplement) on growth in muscle mass. The table below show the muscle mass growth (in grams/100 kg body weight) of a randomly selected sample of 32 individuals in a month. Each individual took a different amount of protein (0.4, 0.6, 0.8, or 1.0 grams/kg body weight) and either took the supplement or didn’t take it.\n\n\n\nSupplement\nProtein amount\n\n\n\n\n\n\n\n\n0.4g\n0.6g\n0.8g\n1.0g\n\n\nCreatine\n105.7\n419.2\n608.4\n623.1\n\n\nCreatine\n111.6\n418.4\n602.9\n602.9\n\n\nCreatine\n90.8\n435.3\n591.2\n581.5\n\n\nCreatine\n92.6\n424.2\n589.4\n594.4\n\n\nNone\n104.9\n452.1\n416.0\n366.8\n\n\nNone\n93.5\n447.3\n400.6\n383.3\n\n\nNone\n103.2\n466.4\n407.7\n369.1\n\n\nNone\n109.0\n449.6\n405.9\n370.1\n\n\n\n\nQ5(a)\nAnswer the following questions using orthogonal contrasts:\n\nIs there a linear response of muscle growth to increasing whey protein?\nIs there a quadratic response of muscle growth to increasing whey protein?\nIs there a cubic response of muscle growth to increasing whey protein?\nDoes adding the creatine supplement have a significant effect on increase in muscle growth?\nIs the linear response to muscle growth different in the presence or absence of the creatine supplement?\nIs the quadratic response to muscle growth different in the presence or absence of the creatine supplement?\nIs the cubic response to muscle growth different in the presence or absence of the creatine supplement?\n\n(14 points)\n\n\nQ5(b)\nDemonstrate that the contrasts are orthogonal.\n(4 points)\n\n\nQ5(c)\nCreate a line plot that shows the average effect on muscle growth with increasing whey protein, both with and without supplement (i.e., 2 line plots - one for supplement, and one for no supplement). Based on the results of the plot which whey-protein-supplement combination will be the best for high muscle growth?\n(4 points)\n\n\nQ5(d)\nNow take the uncertainty of the estimates in the plot in 5(c) into account. Will your answer to the recommendation asked in 5(c) change? Why or why not?\nNote: If there are multiple combinations with no statistically significant difference in the muscle growth, and provide statistically significantly higher muscle growth than the rest of the combinations, then recommend the combination with the lower whey protein / supplement, as it will be cheaper.\n(4 points)"
  },
  {
    "objectID": "Assignment 3_questions.html#instructions",
    "href": "Assignment 3_questions.html#instructions",
    "title": "Appendix C — Assignment 3",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nMake R code chunks to insert code and type your answer outside the code chunks, in the template provided. Ensure that the solution is written neatly enough to understand and grade.\nQuarto-render the file as HTML to submit. For theoretical questions, you can either type the answer within the template and include the solutions in this file, or write the solution on paper, scan and submit separately.\nThe assignment is worth 100 points, and is due on 17th May 2024 at 11:59 pm.\nUse a significance level \\(\\alpha = 5\\%\\) in all hypothesis tests, unless otherwise specified.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\n\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text (2 pt)\nFinal answers of each question are written clearly (1 pt).\nThe proofs are legible, and clearly written with reasoning provided for every step. They are easy to follow and understand (2 pt)\n\n\n10 points will be deducted in case the provided template is not used (for coding / text-answer questions), and/or the template is not rendered using Quarto markdown.\nFor questions involving derivations (Q1, Q4(d) in this assignment), you are allowed to do them on paper, scan and upload separately. However, you are welcome to type the derivations in this template.\nTo maintain family-wise error-rate, use Bonferroni’s correction, wherever needed. Do not use Tukey’s correction. This is to ensure consistency and simplicity of solutions."
  },
  {
    "objectID": "Assignment 3_questions.html#robustness-to-interaction-effect",
    "href": "Assignment 3_questions.html#robustness-to-interaction-effect",
    "title": "Appendix C — Assignment 3",
    "section": "1 Robustness to interaction effect",
    "text": "1 Robustness to interaction effect\nConsider the randomized complete block design, with no replicates. Suppose that there is a significant interaction between the treatments and the blocks. However, if no interaction is assumed between the treatments and the blocks, will the hypothesis test of testing if all treatments are the same hold?\nAnswer this question by considering 2 different cases:\nCase 1: Fixed treatment effect, fixed block effect\nCase 2: Fixed treatment effect, random block effect\nDerive \\(E(MSTr)\\), and \\(E(MSE)\\) in both the cases to argue whether the hypothesis test is robust to the assumption of no interaction in the respective case.\n(10 points)"
  },
  {
    "objectID": "Assignment 3_questions.html#rcbd-without-replicates",
    "href": "Assignment 3_questions.html#rcbd-without-replicates",
    "title": "Appendix C — Assignment 3",
    "section": "2) RCBD (without replicates)",
    "text": "2) RCBD (without replicates)\nDuring the Covid-19 pandemic, several schools changed their mode of instruction from in-person to virtual or hybrid. As a result, educators decided to test the effect of virtual / hybrid / in-person education on the ACT scores of high school students.\nThe file act_scores1.csv consists of ACT scores of high school students. The average ACT scores are provided for a set of 5 schools randomly selected from all US schools. For each school, the average ACT score is provided for students receiving in-person, virtual, and hybrid education respectively.\nHere the teaching mode (i.e., in-person, virtual, or hybrid) and school are the factors effecting ACT score.\n\n2a) Model\nWrite the model equation with ACT score as the response, and mean ACT score (population mean), teaching mode effects, school effects, and random error, as the independent variables.\n(1 point)\n\n\n2b) Fixed/random effects\nIdentify the teaching mode effect, and school effect as fixed or random. Justify your answer.\n(2 points)\n\n\n2c) School effect\nFind the variance estimate of the school effect.\n(2 points)\n\n\n2d) Teaching mode effect\nFind the variance of the estimate of the difference in any pair of teaching mode effects.\n(2 points)\n\n\n2e) Precision\nUse the result of the previous question to obtain the width of the confidence interval of the difference in the estimates of any pair of teaching mode effects.\n(2 points)\n\n\n2f) Best teaching mode\nWhich teaching mode is the best for students (consider uncertainties)?\n(1 point)"
  },
  {
    "objectID": "Assignment 3_questions.html#rcbd-with-replicates",
    "href": "Assignment 3_questions.html#rcbd-with-replicates",
    "title": "Appendix C — Assignment 3",
    "section": "3) RCBD (with replicates)",
    "text": "3) RCBD (with replicates)\nSchools may be interacting with the teaching mode to effect the ACT scores. The file act_scores2.csv consists of replicates of average ACT scores for a given school and teaching mode.\nNote: These average ACT scores may be obtained at different period of times for a given school and teaching mode. However, we are not considering the time period as another potential factor effecting the ACT score for simplicity.\n\n3a) Interaction effect\nShould the interaction effect of teaching mode and school on the average ACT score be considered as fixed or random?\n(1 point)\n\n\n3b) Expectation\nWrite the expression for the expected mean teaching-mode sum-of-squares, the expected mean school sum-of-squares, and the expected interaction sum-of-squares. You do not need to show the derivation.\n(3 points)\n\n\n3c) Teaching mode, and School effect\nIs there a statistically significant variation in school effects? Are all the teaching mode effects the same?\nHint: Conduct appropriate hypothesis tests, you will not get the result directly from the ANOVA table. Find the \\(p\\)-value for each test.\n(4 points)\n\n\n3d) Best teaching mode\nWhich teaching mode is the best for students (consider uncertainties)?\n(2 points)\n\n\n3e) Effects variance\nEstimate the variance of the school effect, and the variance of the interaction effect.\n(4 points)\n\n\n3f) Chance\nWhat is the chance that a school with in-person education has a worse average ACT score than a school with virtual education?\nConsider the degrees of freedom of the \\(t\\)-distribution as the minimum of the degrees of freedom of the terms contributing to the variance estimate in the denominator of the \\(t\\)-statistic.\n(4 points)\n\n\n3g) Teaching mode effect\nFind the variance of the estimate of the difference in any pair of teaching mode effects.\n(2 points)\n\n\n3h) Precision\nUse the result of the previous question to obtain the width of the confidence interval of the difference in the estimates of any pair of teaching mode effects. Did it increase or decrease as compared to that in case of RBCD without replicates [2(e)]? Why?\n(4 points)"
  },
  {
    "objectID": "Assignment 3_questions.html#three-way-anova",
    "href": "Assignment 3_questions.html#three-way-anova",
    "title": "Appendix C — Assignment 3",
    "section": "4) Three-way ANOVA",
    "text": "4) Three-way ANOVA\nBased on exploratory research, it was found that the income status of a student’s family is likely to effect the ACT score, and it may also interact with the teaching mode and school in effecting the ACT score. To analyze these effects, the average ACT score was collected for students of a given income status, school, and being taught with a particular teaching mode.\nThe file act_scores3.csv consists of average ACT score for a given school, teaching mode, and income status of students. There are no replicates, i.e., there is only one observation for a given school, teaching mode, and income status combination.\n\n4a) Model equation\nWrite the model equation.\n(1 point)\n\n\n4b) Two-factor interactions\nGiven that there are no replicates, will be possible to estimate two-factor interactions? Will it be possible to estimate three-factor interactions? Justify your answers.\n(2 + 2 points)\n\n\n4c) Interaction effect\nAmong the three two-factor interaction effects, which interaction effects are fixed, and which are random?\n(3 points)\n\n\n4d) Expectation\nDerive the expressions for the:\n\nExpected mean teaching-mode sum-of-squares [\\(E(MS_{TM})\\)],\nExpected mean school sum-of-squares [\\(E(MS_{School})\\)],\nExpected mean income sum-of-squares [\\(E(MS_{income})\\)],\nExpected mean sum-of-squares of interaction between teaching mode and school [\\(E(MS_{TM-School})\\)],\nExpected mean sum-of-squares of interaction between teaching mode and income status [\\(E(MS_{TM-income})\\)],\nExpected mean sum-of-squares of interaction between school and income status [\\(E(MS_{School-income})\\)]\n\nAs the derivations will be similar, you are allowed to skip steps, and write expressions directly wherever you can.\n(4 points for writing the model equation, and the equations for the relevant means (\\(y_{ijk}, \\bar{y}_{i..}, \\bar{y}_{.j.}, \\bar{y}_{..k}, \\bar{y}_{ij.}, \\bar{y}_{i.k}, \\bar{y}_{.jk}, \\bar{y}_{...}\\)) - a total of 8 equations)\n(1 point for writing the estimates of the main effects)\n(3 points for writing the estimates of the interaction effects)\n(6 \\(\\times\\) 2 = 12 points for taking expectations and writing the derivations)\n\n\n4e) Teaching mode, and School effect\nWhich two-factor interaction effects, and which main-effects are statistically significant?\nHint:\n\nConduct hypothesis tests, you will not get the result directly from the ANOVA table.\nFor testing the statistical significance of school effects, the denominator of the \\(F\\) statistic will be a linear combination of 3 mean sum-of-squares terms. Use the minimum degrees of freedom of the 3 mean sum-of-squares as the degrees of freedom of the denominator.\n\n(6 points)\n\n\n4f) Effects variance\nEstimate the variance of the school effect, and the variance of the relevant interaction effects.\n(3 points)\n\n\n4g) Teaching mode effect\nFind the variance of the estimates of the difference in any pair of teaching mode effects.\n(2 points)\n\n\n4h) Precision\nUse the result of the previous question to obtain the width of the confidence interval of the difference in the estimates of any pair of teaching mode effects.\n(2 points)\n\n\n4i) Change in precision\nHas the width of the confidence interval obtained in the previous question reduced as compared to that in 3(h)? If yes, then why? Given the same number of data points in Qs 3 and 4, why will the width reduce in 4(h) as compared to that in 3(h)?\n(4 points)\n\n\n4j) Best teaching method based on income\nWhich is the best teaching method based on the income status of the student, i.e., which is the best teaching method for:\n\nHigh-income students,\nMedium-income students,\nLow-income students.\n\nInclude uncertainties into account, i.e., there may be multiple best teaching methods for students of a given income status.\n(3 \\(\\times\\) 2 = 6 points)"
  }
]