# Computer experiment designs

## Maximin design

Let us generate a 4-run maximin design in $[0, 1]^2$ for $p=2$.

We will use the `maximin()` function of the `maximin` library

```{r, message = FALSE}
library(maximin)
```

For generating a maximin design, we need to specify an initial design, and the function will add points to the design to develop a design that is as close to a maximin design as possible.

Let us add the origin as a point in the initial design.

```{r}
D_initial <- matrix(c(0,0),1,2)
```

```{r}
set.seed(3)
D <- maximin(n = 3, p=2, Xorig = D_initial)$Xf
```

```{r}
plot(D, pch = 16)
```

As expected, the design is the four corners of the feasible design space as the minimum distance between any two design points is the largest in this case.

Note that the algorithm that optimizes the minimum distance between points does not gaurantee to find the global optimum. The more iterations it runs, the higher is the likelihood to find the global optimium. One can increase the number of iterations of the optimization algorithm, and / or execute the code multiple times, and compare the minimum distance between points to obtain a better maximin design.

Let us attempt to obtain a 5-run maximin design in $[0, 1]^2$ for $p=2$.

```{r}
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial)
plot(D$Xf, pch = 16)
```

Let us compute the maximin distance for this design.

```{r}
# Function to obtain the minimum distance between 
# a point and a design
minimum_distance <- function(x)
{
  sq_distances <- (colSums((t(D$Xf)- x)^2))
  sq_distances[sq_distances == 0] <- Inf
  return(sqrt(min(sq_distances)))
}
min(apply(D$Xf, 1, minimum_distance))
```

Let us increase the iterations of the function to see if that leads to a better design.

```{r}
set.seed(3)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
```

Increasing the number of iteration did not help. We can increase the iterations further. However, let us try to change the seed.

```{r}
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
```

We got a better design, as the minimum distance between the points is higher. Let us increase the number of iterations to see if the design gets better.    

```{r}
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 200)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
```

```{r}
set.seed(4)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 400)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
```

The design did not get better. Let us change the seed again.

```{r}
set.seed(5)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 400)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
```

The design did not get better. Let us change use a `for()` loop to try a lot of different seeds.

```{r}
min_dist <- rep(0, 20)
for(s in 1:20)
{
  set.seed(s)
  D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
  min_dist[s] <- min(apply(D$Xf, 1, minimum_distance))
}
```

The seed for the best design, i.e., the design with the maximum minimum distance between points is:

```{r}
which.max(min_dist)
```

Let us plot the best design:

```{r}
set.seed(12)
D <- maximin(n = 4, p=2, Xorig = D_initial, T = 100)
plot(D$Xf, pch = 16)
min(apply(D$Xf, 1, minimum_distance))
```


## Maximin LHD

Let us generate a 4-run maximin LHD in $[0, 1]^2$ for $p=2$.

We will use the `maximinLHS()` function of the `lhs` library

```{r, message = FALSE}
library(lhs)
```

```{r}
set.seed(1)
D <- maximinLHS(4, 2)
plot(D, xlim = c(0, 1), ylim = c(0, 1), pch = 16)
```

Note that the design has 4 distinct projections for each of the two factors.

### MmLHD: Weakness

MaximinLHD have good projections in a single dimension, but projection properties in 2, 3, …, 𝑝−1 dimensions may not be good.

Let us compare the projections of a 2-dimensional design with that of a 20-dimensional design on a 2-dimensional subspace.

```{r}
set.seed(3)
D <- maximinLHS(20, 2)
par(mfrow = c(1,2))
plot(D, pch = 16, main = "MmLHD(n = 20, p = 2)")
D <- maximinLHS(20, 10)
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
```

We observe that the projects of the 20-dimensional MmLHD design are not that good.

## MaxProLHD & MaxPro

Let us generate a 20-run MaxProLHD and MaxPro designs in $[0, 1]^10$ for $p=10$.

We will use the `MaxProLHD()` and `MaxPro()` functions of the `MaxPro` library

```{r, message=FALSE}
library(MaxPro)
```


```{r}
set.seed(3)
D1 <- MaxProLHD(20, 10)$Design
D2 <- MaxPro(D1)$Design
par(mfrow = c(1,2))
plot(D1[,1:2], pch = 16, main = "MaxProLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
```

```{r}
par(mfrow = c(1,2))
plot(D[,1:2], pch = 16, main = "MmLHD(n = 20, p = 10)")
plot(D2[,1:2], pch = 16, main = "MaxPro(n = 20, p = 10)")
```

Note that the projections of the MaxPro design on the 2-d subspace are better than the projections of the MmLHD design, as expected.


