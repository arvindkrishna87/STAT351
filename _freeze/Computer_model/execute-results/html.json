{
  "hash": "83cee15cc7dbd46deb5ee3ba46ebec08",
  "result": {
    "markdown": "# Computer model\n\nAssume that the true computer model is the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1/(1+x^2), from=-4, to=4, ylim=c(-.7,1))\n```\n\n::: {.cell-output-display}\n![](Computer_model_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWe will consider potential methods to replace the computer model above with a metamodel or a surrogate model.\n\n## Polynomial interpolation\n\nBelow is an example of a $7$-point polynomial interpolator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1/(1+x^2), from=-4, to=4, ylim=c(-.7,1))\nx=seq(-4,4,length=7)\ny=1/(1+x^2)\nX=as.matrix(cbind(1,x,x^2,x^3,x^4,x^5,x^6))\na=solve(X,y)\nu=seq(-4,4,length=100)\nyhat=u\nfor(i in 1:100)\n  yhat[i]=sum(c(1,u[i],u[i]^2,u[i]^3,u[i]^4,u[i]^5,u[i]^6)*a)\nlines(u,yhat, col=2, lty=2, lwd = 2)\npoints(x,y,col=2)\n```\n\n::: {.cell-output-display}\n![](Computer_model_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNotice that the polynomial interpolation model tends to be unstable near the edges, this is called Runge's phenomenon.\n\nThe instability increases as the degree of the polynomial increases. Consider the same example if 9 equally-spaced points are considered, instead of 7.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1/(1+x^2), from=-4, to=4, ylim=c(-.7,1))\nx=seq(-4,4,length=9)\ny=1/(1+x^2)\nX=as.matrix(cbind(1,x,x^2,x^3,x^4,x^5,x^6,x^7,x^8))\na=solve(X,y)\nu=seq(-4,4,length=100)\nyhat=u\nfor(i in 1:100)\n  yhat[i]=sum(c(1,u[i],u[i]^2,u[i]^3,u[i]^4,u[i]^5,u[i]^6, u[i]^7,u[i]^8)*a)\nlines(u,yhat, col='blue', lty=3, lwd = 2)\npoints(x,y,col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](Computer_model_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Splines\n\nLet us consider splines as the metamodel to replace the same computer model considered above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurve(1/(1+x^2), from=-4, to=4, ylim=c(-.7,1))\n\n# Splines with 7 points\n\nx=seq(-4,4,length=7)\ny=1/(1+x^2)\npoints(x,y,col=2)\na=splinefun(x,y,method=\"natural\")\ncurve(a,add=T,col=2, lwd = 2)\n\n# Splines with 9 points\n\nx=seq(-4,4,length=9)\ny=1/(1+x^2)\npoints(x,y, pch=3,col=3)\na=splinefun(x,y,method=\"natural\")\ncurve(a,add=T,col=3, lty=2, lwd = 2)\n```\n\n::: {.cell-output-display}\n![](Computer_model_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe observe that splines fit the points smoothly, which is desired. However, splines do not scale up and are difficult to fit in case of higher dimensions.\n\n\n## Random functions\n\nWe will now adopt a statistical approach to replace the computer model with a metamodel, where we view the deterministic computer model as a realization from a stochastic process.\n\nLet us consider quadratic functions as the random functions to develop the metamodel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=seq(-1,1,length=10)\nb=rnorm(3)\ny=b[1]+b[2]*x+b[3]*x^2\nplot(x,y,\"l\", ylim=c(-3,3))\nb=rnorm(3)\ny=b[1]+b[2]*x+b[3]*x^2\nlines(x,y,\"l\")\nfor(i in 1:10)\n{b=rnorm(3)\ny=b[1]+b[2]*x+b[3]*x^2\nlines(x,y,\"l\",col=i)}\n```\n\n::: {.cell-output-display}\n![](Computer_model_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Computer_model_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}